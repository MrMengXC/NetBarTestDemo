// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public static partial class BaseStruct {

  #region Extension registration
  public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
  }
  #endregion
  #region Static variables
  internal static pbd::MessageDescriptor internal__static_StructErrorTip__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::StructErrorTip, global::StructErrorTip.Builder> internal__static_StructErrorTip__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_StructAccount__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::StructAccount, global::StructAccount.Builder> internal__static_StructAccount__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_StructRole__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::StructRole, global::StructRole.Builder> internal__static_StructRole__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_StructComputer__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::StructComputer, global::StructComputer.Builder> internal__static_StructComputer__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_StructArea__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::StructArea, global::StructArea.Builder> internal__static_StructArea__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_StructConsum__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::StructConsum, global::StructConsum.Builder> internal__static_StructConsum__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_StructEmbarkation__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::StructEmbarkation, global::StructEmbarkation.Builder> internal__static_StructEmbarkation__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_StructRealTime__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::StructRealTime, global::StructRealTime.Builder> internal__static_StructRealTime__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_StructCard__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::StructCard, global::StructCard.Builder> internal__static_StructCard__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_StructMember__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::StructMember, global::StructMember.Builder> internal__static_StructMember__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_StructPage__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::StructPage, global::StructPage.Builder> internal__static_StructPage__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_StructUserArea__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::StructUserArea, global::StructUserArea.Builder> internal__static_StructUserArea__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_StructBillSetting__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::StructBillSetting, global::StructBillSetting.Builder> internal__static_StructBillSetting__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_StructDictItem__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::StructDictItem, global::StructDictItem.Builder> internal__static_StructDictItem__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_StructGoods__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::StructGoods, global::StructGoods.Builder> internal__static_StructGoods__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_StructSale__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::StructSale, global::StructSale.Builder> internal__static_StructSale__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_StructSaleTop__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::StructSaleTop, global::StructSaleTop.Builder> internal__static_StructSaleTop__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_StructStock__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::StructStock, global::StructStock.Builder> internal__static_StructStock__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_StructOrder__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::StructOrder, global::StructOrder.Builder> internal__static_StructOrder__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_StructOrderDetail__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::StructOrderDetail, global::StructOrderDetail.Builder> internal__static_StructOrderDetail__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_StructComment__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::StructComment, global::StructComment.Builder> internal__static_StructComment__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_StructPerform__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::StructPerform, global::StructPerform.Builder> internal__static_StructPerform__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_StructLog__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::StructLog, global::StructLog.Builder> internal__static_StructLog__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_StructAreaTotal__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::StructAreaTotal, global::StructAreaTotal.Builder> internal__static_StructAreaTotal__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_StructEarn__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::StructEarn, global::StructEarn.Builder> internal__static_StructEarn__FieldAccessorTable;
  #endregion
  #region Descriptor
  public static pbd::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbd::FileDescriptor descriptor;
  
  static BaseStruct() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChBCYXNlU3RydWN0LnByb3RvIk4KDlN0cnVjdEVycm9yVGlwEgsKA2tleRgB", 
          "IAIoCRIRCgl0aXBTdHJpbmcYAiABKAkSDAoEYXJncxgDIAMoCRIOCgZhY3Rp", 
          "b24YBCABKAkijgEKDVN0cnVjdEFjY291bnQSDAoEZ3VpZBgBIAIoCRIQCgh1", 
          "c2VybmFtZRgCIAEoCRIQCghwYXNzd29yZBgDIAEoCRIQCghuaWNrbmFtZRgE", 
          "IAEoCRIOCgZyb2xlaWQYBSABKAkSDQoFcGhvbmUYBiABKAkSDQoFZW1haWwY", 
          "ByABKAkSCwoDc25zGAggASgJIo8BCgpTdHJ1Y3RSb2xlEg4KBnJvbGVpZBgB", 
          "IAIoCRIMCgRuYW1lGAIgAigJEg4KBnJpZ2h0cxgDIAIoCRIQCghwYXJlbnRp", 
          "ZBgEIAIoCRIOCgZhZGRfcXgYBSACKAkSDgoGZGVsX3F4GAYgAigJEg8KB2Vk", 
          "aXRfcXgYByACKAkSEAoIcXVlcnlfcXgYCCACKAkiQAoOU3RydWN0Q29tcHV0", 
          "ZXISEgoKY29tcHV0ZXJpZBgBIAIoBRIMCgRuYW1lGAIgASgJEgwKBGFyZWEY", 
          "AyABKAkiKgoKU3RydWN0QXJlYRIOCgZhcmVhaWQYASACKAUSDAoEbmFtZRgC", 
          "IAIoCSKWAQoMU3RydWN0Q29uc3VtEhAKCGNvbnN1bWlkGAEgAigFEhAKCHVz", 
          "ZXJuYW1lGAIgAigJEhIKCmNhcmRudW1iZXIYAyACKAkSDAoEYXJlYRgEIAIo", 
          "BRISCgpjb25zdW10eXBlGAUgAigFEg0KBW1vbmV5GAYgAigFEgwKBHRpbWUY", 
          "ByACKAkSDwoHcGF5bW9kZRgIIAIoBSLKAQoRU3RydWN0RW1iYXJrYXRpb24S", 
          "EAoIY29tcHV0ZXIYASACKAkSEgoKY2FyZG51bWJlchgCIAIoCRIQCgh1c2Vy", 
          "bmFtZRgDIAIoCRIQCgh1c2VydHlwZRgEIAIoCRIRCglzdGFydHRpbWUYBSAC", 
          "KAkSEAoIc3RvcHRpbWUYBiACKAkSDAoEYXJlYRgHIAIoCRIQCgh1c2VkdGlt", 
          "ZRgIIAIoBRINCgVtb25leRgJIAIoBRILCgNtYWMYCiACKAkSCgoCaXAYCyAC", 
          "KAkikAIKDlN0cnVjdFJlYWxUaW1lEhIKCmNvbXB1dGVyaWQYASACKAUSEAoI", 
          "Y29tcHV0ZXIYAiACKAkSDAoEYXJlYRgDIAIoCRIOCgZzdGF0dXMYBCACKAkS", 
          "EgoKY2FyZG51bWJlchgFIAIoCRIQCgh1c2VydHlwZRgGIAIoCRIPCgdiaWxs", 
          "aW5nGAcgAigJEg4KBnZlcmlmeRgIIAIoCRIPCgdiYWxhbmNlGAkgAigJEhIK", 
          "CnJlbWFpbnRpbWUYCiACKAkSEQoJc3RhcnR0aW1lGAsgAigJEhAKCHVzZWR0", 
          "aW1lGAwgAigJEhAKCHN0b3B0aW1lGA0gAigJEgsKA21hYxgOIAIoCRIKCgJp", 
          "cBgPIAIoCSKhAQoKU3RydWN0Q2FyZBIMCgRuYW1lGAEgAigJEg4KBmdlbmRl", 
          "chgCIAIoBRIOCgZuYXRpb24YAyACKAkSDgoGbnVtYmVyGAQgAigJEhAKCGJp", 
          "cnRoZGF5GAUgAigJEgsKA3ZsZBgGIAIoCRIPCgdhZGRyZXNzGAcgAigJEhQK", 
          "DG9yZ2FuaXphdGlvbhgIIAIoCRIPCgdoZWFkVXJsGAkgAigJIpsCCgxTdHJ1", 
          "Y3RNZW1iZXISEAoIbWVtYmVyaWQYASACKAUSEgoKY2FyZG51bWJlchgCIAIo", 
          "CRIOCgZnZW5kZXIYAyACKAkSDAoEbmFtZRgEIAIoCRISCgptZW1iZXJ0eXBl", 
          "GAUgAigFEg0KBXBob25lGAYgAigJEhAKCG9wZW50aW1lGAcgAigJEhAKCGxh", 
          "c3R0aW1lGAggAigJEg8KB2JhbGFuY2UYCSACKAUSFQoNdG90YWxSZWNoYXJn", 
          "ZRgKIAIoBRISCgp0b3RhbEJvbnVzGAsgAigFEg8KB2ludGVnYWwYDCACKAUS", 
          "EwoLdXNlZEludGVnYWwYDSACKAUSDgoGc3RhdHVzGA4gAigFEg4KBnZlcmlm", 
          "eRgPIAIoBSJTCgpTdHJ1Y3RQYWdlEhAKCHBhZ2VzaXplGAEgAigFEhEKCXBh", 
          "Z2ViZWdpbhgCIAIoBRIRCglmaWVsZG5hbWUYAyACKAUSDQoFb3JkZXIYBCAC", 
          "KAUinwEKDlN0cnVjdFVzZXJBcmVhEhAKCHVzZXJ0eXBlGAEgAigFEhAKCGFy", 
          "ZWF0eXBlGAIgAigFEhUKDW9yZGluYXJ5UHJpY2UYAyACKAUSGAoQb3JkaW5h", 
          "cnlJbnRlcnZhbBgEIAIoBRISCgpuaWdodFByaWNlGAUgAigFEhUKDW5pZ2h0", 
          "SW50ZXJ2YWwYBiACKAUSDQoFaW5kZXgYByACKAUidQoRU3RydWN0QmlsbFNl", 
          "dHRpbmcSDAoEZGF5MBgBIAIoBRIMCgRkYXkxGAIgAigFEgwKBGRheTIYAyAC", 
          "KAUSDAoEZGF5MxgEIAIoBRIMCgRkYXk0GAUgAigFEgwKBGRheTUYBiACKAUS", 
          "DAoEZGF5NhgHIAIoBSI4Cg5TdHJ1Y3REaWN0SXRlbRIKCgJpZBgBIAIoBRIM", 
          "CgRjb2RlGAIgAigFEgwKBGl0ZW0YAyADKAkipgEKC1N0cnVjdEdvb2RzEg8K", 
          "B2dvb2RzSWQYASACKAUSEQoJZ29vZHNOYW1lGAIgAigJEhAKCGdvb2RzSW1n", 
          "GAMgAigJEhAKCGNhdGVnb3J5GAQgAigFEg0KBXByaWNlGAUgAigJEhIKCnVz", 
          "ZUludGVnYWwYBiACKAgSDAoEaGlkZRgHIAIoCBIPCgdpbnRlZ2FsGAggAigF", 
          "Eg0KBWNvdW50GAkgAigFIqYBCgpTdHJ1Y3RTYWxlEg8KB29yZGVyaWQYASAC", 
          "KAUSEAoIdXNlcm5hbWUYAiACKAkSEgoKY2FyZG51bWJlchgDIAIoCRIQCghh", 
          "cmVhbmFtZRgEIAIoCRIRCglnb29kc25hbWUYBSACKAkSCwoDbnVtGAYgAigF", 
          "Eg0KBW1vbmV5GAcgAigFEg8KB2FkZHRpbWUYCCACKAkSDwoHcGF5bW9kZRgJ", 
          "IAIoCSJQCg1TdHJ1Y3RTYWxlVG9wEhAKCGNhdGVnb3J5GAEgAigFEhEKCWdv", 
          "b2RzbmFtZRgCIAIoCRILCgNudW0YAyACKAUSDQoFbW9uZXkYBCACKAUiTgoL", 
          "U3RydWN0U3RvY2sSEQoJZ29vZHNuYW1lGAEgAigJEhAKCGNhdGVnb3J5GAIg", 
          "AigFEg0KBXByaWNlGAMgAigJEgsKA251bRgEIAIoBSLKAQoLU3RydWN0T3Jk", 
          "ZXISDwoHb3JkZXJpZBgBIAIoBRIQCgh1c2VybmFtZRgCIAIoCRISCgpjYXJk", 
          "bnVtYmVyGAMgAigJEhAKCGFyZWFuYW1lGAQgAigJEg0KBW1vbmV5GAUgAigF", 
          "Eg8KB2FkZHRpbWUYBiACKAkSEAoIcHJvY3RpbWUYByACKAkSEAoIb3BlcmF0", 
          "b3IYCCACKAkSDgoGc3RhdHVzGAkgAigJEg8KB3BheW1vZGUYCiACKAkSDQoF", 
          "cGF5aWQYCyACKAkiVAoRU3RydWN0T3JkZXJEZXRhaWwSEQoJZ29vZHNuYW1l", 
          "GAEgAigJEhAKCGNhdGVnb3J5GAIgAigFEg0KBXByaWNlGAMgAigJEgsKA251", 
          "bRgEIAIoBSK5AQoNU3RydWN0Q29tbWVudBIPCgdhZGR0aW1lGAEgAigJEhAK", 
          "CGN1c3RvbWVyGAIgAigJEhIKCmNhcmRudW1iZXIYAyACKAkSDQoFYm9udXMY", 
          "BCACKAUSDQoFc3RhZmYYBSABKAkSDQoFcG9pbnQYBiABKAUSEwoLZW52aXJv", 
          "bm1lbnQYByABKAUSDwoHc2VydmljZRgIIAEoBRIOCgZkZXZpY2UYCSABKAUS", 
          "DgoGZGV0YWlsGAogASgJImoKDVN0cnVjdFBlcmZvcm0SDAoEbmFtZRgBIAIo", 
          "CRIMCgRyb2xlGAIgAigJEg0KBWhvdXJzGAMgAigFEg4KBmNoYXJnZRgEIAIo", 
          "BRINCgVzYWxlcxgFIAIoBRIPCgdzYXRpc2Z5GAYgAigFIl0KCVN0cnVjdExv", 
          "ZxIQCghvcGVyYXRvchgBIAIoCRIRCglvcGVyYXRpb24YAiACKAkSCgoCaXAY", 
          "AyACKAkSDwoHYWRkdGltZRgEIAIoCRIOCgZzdGF0dXMYBSACKAkiMwoPU3Ry", 
          "dWN0QXJlYVRvdGFsEhAKCGFyZWFuYW1lGAEgAigJEg4KBmFtb3VudBgCIAIo", 
          "BSLEAQoKU3RydWN0RWFybhIQCghkYXRldGltZRgBIAIoBRIVCg1hbGlwYXlf", 
          "Y2hhcmdlGAIgAigFEhMKC2FsaXBheV9zYWxlGAMgAigFEhUKDXRlbnBheV9j", 
          "aGFyZ2UYBCACKAUSEwoLdGVucGF5X3NhbGUYBSACKAUSEwoLY2FzaF9jaGFy", 
          "Z2UYBiACKAUSEQoJY2FzaF9zYWxlGAcgAigFEiQKCmFyZWFfdG90YWwYCCAD", 
          "KAsyEC5TdHJ1Y3RBcmVhVG90YWwqKAoEVHlwZRIICgRJVEVNEAESDAoIQ1VS", 
          "UkVOQ1kQAhIICgRQQUNLEANCKwodY29tLnNreXNvZnQuY29yZS5hdXRvLm1l", 
        "c3NhZ2VCCkJhc2VTdHJ1Y3Q="));
    pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
      descriptor = root;
      internal__static_StructErrorTip__Descriptor = Descriptor.MessageTypes[0];
      internal__static_StructErrorTip__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::StructErrorTip, global::StructErrorTip.Builder>(internal__static_StructErrorTip__Descriptor,
              new string[] { "Key", "TipString", "Args", "Action", });
      internal__static_StructAccount__Descriptor = Descriptor.MessageTypes[1];
      internal__static_StructAccount__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::StructAccount, global::StructAccount.Builder>(internal__static_StructAccount__Descriptor,
              new string[] { "Guid", "Username", "Password", "Nickname", "Roleid", "Phone", "Email", "Sns", });
      internal__static_StructRole__Descriptor = Descriptor.MessageTypes[2];
      internal__static_StructRole__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::StructRole, global::StructRole.Builder>(internal__static_StructRole__Descriptor,
              new string[] { "Roleid", "Name", "Rights", "Parentid", "AddQx", "DelQx", "EditQx", "QueryQx", });
      internal__static_StructComputer__Descriptor = Descriptor.MessageTypes[3];
      internal__static_StructComputer__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::StructComputer, global::StructComputer.Builder>(internal__static_StructComputer__Descriptor,
              new string[] { "Computerid", "Name", "Area", });
      internal__static_StructArea__Descriptor = Descriptor.MessageTypes[4];
      internal__static_StructArea__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::StructArea, global::StructArea.Builder>(internal__static_StructArea__Descriptor,
              new string[] { "Areaid", "Name", });
      internal__static_StructConsum__Descriptor = Descriptor.MessageTypes[5];
      internal__static_StructConsum__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::StructConsum, global::StructConsum.Builder>(internal__static_StructConsum__Descriptor,
              new string[] { "Consumid", "Username", "Cardnumber", "Area", "Consumtype", "Money", "Time", "Paymode", });
      internal__static_StructEmbarkation__Descriptor = Descriptor.MessageTypes[6];
      internal__static_StructEmbarkation__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::StructEmbarkation, global::StructEmbarkation.Builder>(internal__static_StructEmbarkation__Descriptor,
              new string[] { "Computer", "Cardnumber", "Username", "Usertype", "Starttime", "Stoptime", "Area", "Usedtime", "Money", "Mac", "Ip", });
      internal__static_StructRealTime__Descriptor = Descriptor.MessageTypes[7];
      internal__static_StructRealTime__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::StructRealTime, global::StructRealTime.Builder>(internal__static_StructRealTime__Descriptor,
              new string[] { "Computerid", "Computer", "Area", "Status", "Cardnumber", "Usertype", "Billing", "Verify", "Balance", "Remaintime", "Starttime", "Usedtime", "Stoptime", "Mac", "Ip", });
      internal__static_StructCard__Descriptor = Descriptor.MessageTypes[8];
      internal__static_StructCard__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::StructCard, global::StructCard.Builder>(internal__static_StructCard__Descriptor,
              new string[] { "Name", "Gender", "Nation", "Number", "Birthday", "Vld", "Address", "Organization", "HeadUrl", });
      internal__static_StructMember__Descriptor = Descriptor.MessageTypes[9];
      internal__static_StructMember__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::StructMember, global::StructMember.Builder>(internal__static_StructMember__Descriptor,
              new string[] { "Memberid", "Cardnumber", "Gender", "Name", "Membertype", "Phone", "Opentime", "Lasttime", "Balance", "TotalRecharge", "TotalBonus", "Integal", "UsedIntegal", "Status", "Verify", });
      internal__static_StructPage__Descriptor = Descriptor.MessageTypes[10];
      internal__static_StructPage__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::StructPage, global::StructPage.Builder>(internal__static_StructPage__Descriptor,
              new string[] { "Pagesize", "Pagebegin", "Fieldname", "Order", });
      internal__static_StructUserArea__Descriptor = Descriptor.MessageTypes[11];
      internal__static_StructUserArea__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::StructUserArea, global::StructUserArea.Builder>(internal__static_StructUserArea__Descriptor,
              new string[] { "Usertype", "Areatype", "OrdinaryPrice", "OrdinaryInterval", "NightPrice", "NightInterval", "Index", });
      internal__static_StructBillSetting__Descriptor = Descriptor.MessageTypes[12];
      internal__static_StructBillSetting__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::StructBillSetting, global::StructBillSetting.Builder>(internal__static_StructBillSetting__Descriptor,
              new string[] { "Day0", "Day1", "Day2", "Day3", "Day4", "Day5", "Day6", });
      internal__static_StructDictItem__Descriptor = Descriptor.MessageTypes[13];
      internal__static_StructDictItem__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::StructDictItem, global::StructDictItem.Builder>(internal__static_StructDictItem__Descriptor,
              new string[] { "Id", "Code", "Item", });
      internal__static_StructGoods__Descriptor = Descriptor.MessageTypes[14];
      internal__static_StructGoods__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::StructGoods, global::StructGoods.Builder>(internal__static_StructGoods__Descriptor,
              new string[] { "GoodsId", "GoodsName", "GoodsImg", "Category", "Price", "UseIntegal", "Hide", "Integal", "Count", });
      internal__static_StructSale__Descriptor = Descriptor.MessageTypes[15];
      internal__static_StructSale__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::StructSale, global::StructSale.Builder>(internal__static_StructSale__Descriptor,
              new string[] { "Orderid", "Username", "Cardnumber", "Areaname", "Goodsname", "Num", "Money", "Addtime", "Paymode", });
      internal__static_StructSaleTop__Descriptor = Descriptor.MessageTypes[16];
      internal__static_StructSaleTop__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::StructSaleTop, global::StructSaleTop.Builder>(internal__static_StructSaleTop__Descriptor,
              new string[] { "Category", "Goodsname", "Num", "Money", });
      internal__static_StructStock__Descriptor = Descriptor.MessageTypes[17];
      internal__static_StructStock__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::StructStock, global::StructStock.Builder>(internal__static_StructStock__Descriptor,
              new string[] { "Goodsname", "Category", "Price", "Num", });
      internal__static_StructOrder__Descriptor = Descriptor.MessageTypes[18];
      internal__static_StructOrder__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::StructOrder, global::StructOrder.Builder>(internal__static_StructOrder__Descriptor,
              new string[] { "Orderid", "Username", "Cardnumber", "Areaname", "Money", "Addtime", "Proctime", "Operator", "Status", "Paymode", "Payid", });
      internal__static_StructOrderDetail__Descriptor = Descriptor.MessageTypes[19];
      internal__static_StructOrderDetail__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::StructOrderDetail, global::StructOrderDetail.Builder>(internal__static_StructOrderDetail__Descriptor,
              new string[] { "Goodsname", "Category", "Price", "Num", });
      internal__static_StructComment__Descriptor = Descriptor.MessageTypes[20];
      internal__static_StructComment__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::StructComment, global::StructComment.Builder>(internal__static_StructComment__Descriptor,
              new string[] { "Addtime", "Customer", "Cardnumber", "Bonus", "Staff", "Point", "Environment", "Service", "Device", "Detail", });
      internal__static_StructPerform__Descriptor = Descriptor.MessageTypes[21];
      internal__static_StructPerform__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::StructPerform, global::StructPerform.Builder>(internal__static_StructPerform__Descriptor,
              new string[] { "Name", "Role", "Hours", "Charge", "Sales", "Satisfy", });
      internal__static_StructLog__Descriptor = Descriptor.MessageTypes[22];
      internal__static_StructLog__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::StructLog, global::StructLog.Builder>(internal__static_StructLog__Descriptor,
              new string[] { "Operator", "Operation", "Ip", "Addtime", "Status", });
      internal__static_StructAreaTotal__Descriptor = Descriptor.MessageTypes[23];
      internal__static_StructAreaTotal__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::StructAreaTotal, global::StructAreaTotal.Builder>(internal__static_StructAreaTotal__Descriptor,
              new string[] { "Areaname", "Amount", });
      internal__static_StructEarn__Descriptor = Descriptor.MessageTypes[24];
      internal__static_StructEarn__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::StructEarn, global::StructEarn.Builder>(internal__static_StructEarn__Descriptor,
              new string[] { "Datetime", "AlipayCharge", "AlipaySale", "TenpayCharge", "TenpaySale", "CashCharge", "CashSale", "AreaTotal", });
      return null;
    };
    pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
        new pbd::FileDescriptor[] {
        }, assigner);
  }
  #endregion
  
}
#region Enums
public enum Type {
  ITEM = 1,
  CURRENCY = 2,
  PACK = 3,
}

#endregion

#region Messages
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class StructErrorTip : pb::GeneratedMessage<StructErrorTip, StructErrorTip.Builder> {
  private StructErrorTip() { }
  private static readonly StructErrorTip defaultInstance = new StructErrorTip().MakeReadOnly();
  private static readonly string[] _structErrorTipFieldNames = new string[] { "action", "args", "key", "tipString" };
  private static readonly uint[] _structErrorTipFieldTags = new uint[] { 34, 26, 10, 18 };
  public static StructErrorTip DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override StructErrorTip DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override StructErrorTip ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::BaseStruct.internal__static_StructErrorTip__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<StructErrorTip, StructErrorTip.Builder> InternalFieldAccessors {
    get { return global::BaseStruct.internal__static_StructErrorTip__FieldAccessorTable; }
  }
  
  public const int KeyFieldNumber = 1;
  private bool hasKey;
  private string key_ = "";
  public bool HasKey {
    get { return hasKey; }
  }
  public string Key {
    get { return key_; }
  }
  
  public const int TipStringFieldNumber = 2;
  private bool hasTipString;
  private string tipString_ = "";
  public bool HasTipString {
    get { return hasTipString; }
  }
  public string TipString {
    get { return tipString_; }
  }
  
  public const int ArgsFieldNumber = 3;
  private pbc::PopsicleList<string> args_ = new pbc::PopsicleList<string>();
  public scg::IList<string> ArgsList {
    get { return pbc::Lists.AsReadOnly(args_); }
  }
  public int ArgsCount {
    get { return args_.Count; }
  }
  public string GetArgs(int index) {
    return args_[index];
  }
  
  public const int ActionFieldNumber = 4;
  private bool hasAction;
  private string action_ = "";
  public bool HasAction {
    get { return hasAction; }
  }
  public string Action {
    get { return action_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasKey) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _structErrorTipFieldNames;
    if (hasKey) {
      output.WriteString(1, field_names[2], Key);
    }
    if (hasTipString) {
      output.WriteString(2, field_names[3], TipString);
    }
    if (args_.Count > 0) {
      output.WriteStringArray(3, field_names[1], args_);
    }
    if (hasAction) {
      output.WriteString(4, field_names[0], Action);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasKey) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Key);
    }
    if (hasTipString) {
      size += pb::CodedOutputStream.ComputeStringSize(2, TipString);
    }
    {
      int dataSize = 0;
      foreach (string element in ArgsList) {
        dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
      }
      size += dataSize;
      size += 1 * args_.Count;
    }
    if (hasAction) {
      size += pb::CodedOutputStream.ComputeStringSize(4, Action);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static StructErrorTip ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static StructErrorTip ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static StructErrorTip ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static StructErrorTip ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static StructErrorTip ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static StructErrorTip ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static StructErrorTip ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static StructErrorTip ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static StructErrorTip ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static StructErrorTip ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private StructErrorTip MakeReadOnly() {
    args_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(StructErrorTip prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<StructErrorTip, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(StructErrorTip cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private StructErrorTip result;
    
    private StructErrorTip PrepareBuilder() {
      if (resultIsReadOnly) {
        StructErrorTip original = result;
        result = new StructErrorTip();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override StructErrorTip MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::StructErrorTip.Descriptor; }
    }
    
    public override StructErrorTip DefaultInstanceForType {
      get { return global::StructErrorTip.DefaultInstance; }
    }
    
    public override StructErrorTip BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is StructErrorTip) {
        return MergeFrom((StructErrorTip) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(StructErrorTip other) {
      if (other == global::StructErrorTip.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasKey) {
        Key = other.Key;
      }
      if (other.HasTipString) {
        TipString = other.TipString;
      }
      if (other.args_.Count != 0) {
        result.args_.Add(other.args_);
      }
      if (other.HasAction) {
        Action = other.Action;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_structErrorTipFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _structErrorTipFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasKey = input.ReadString(ref result.key_);
            break;
          }
          case 18: {
            result.hasTipString = input.ReadString(ref result.tipString_);
            break;
          }
          case 26: {
            input.ReadStringArray(tag, field_name, result.args_);
            break;
          }
          case 34: {
            result.hasAction = input.ReadString(ref result.action_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasKey {
      get { return result.hasKey; }
    }
    public string Key {
      get { return result.Key; }
      set { SetKey(value); }
    }
    public Builder SetKey(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasKey = true;
      result.key_ = value;
      return this;
    }
    public Builder ClearKey() {
      PrepareBuilder();
      result.hasKey = false;
      result.key_ = "";
      return this;
    }
    
    public bool HasTipString {
      get { return result.hasTipString; }
    }
    public string TipString {
      get { return result.TipString; }
      set { SetTipString(value); }
    }
    public Builder SetTipString(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasTipString = true;
      result.tipString_ = value;
      return this;
    }
    public Builder ClearTipString() {
      PrepareBuilder();
      result.hasTipString = false;
      result.tipString_ = "";
      return this;
    }
    
    public pbc::IPopsicleList<string> ArgsList {
      get { return PrepareBuilder().args_; }
    }
    public int ArgsCount {
      get { return result.ArgsCount; }
    }
    public string GetArgs(int index) {
      return result.GetArgs(index);
    }
    public Builder SetArgs(int index, string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.args_[index] = value;
      return this;
    }
    public Builder AddArgs(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.args_.Add(value);
      return this;
    }
    public Builder AddRangeArgs(scg::IEnumerable<string> values) {
      PrepareBuilder();
      result.args_.Add(values);
      return this;
    }
    public Builder ClearArgs() {
      PrepareBuilder();
      result.args_.Clear();
      return this;
    }
    
    public bool HasAction {
      get { return result.hasAction; }
    }
    public string Action {
      get { return result.Action; }
      set { SetAction(value); }
    }
    public Builder SetAction(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasAction = true;
      result.action_ = value;
      return this;
    }
    public Builder ClearAction() {
      PrepareBuilder();
      result.hasAction = false;
      result.action_ = "";
      return this;
    }
  }
  static StructErrorTip() {
    object.ReferenceEquals(global::BaseStruct.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class StructAccount : pb::GeneratedMessage<StructAccount, StructAccount.Builder> {
  private StructAccount() { }
  private static readonly StructAccount defaultInstance = new StructAccount().MakeReadOnly();
  private static readonly string[] _structAccountFieldNames = new string[] { "email", "guid", "nickname", "password", "phone", "roleid", "sns", "username" };
  private static readonly uint[] _structAccountFieldTags = new uint[] { 58, 10, 34, 26, 50, 42, 66, 18 };
  public static StructAccount DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override StructAccount DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override StructAccount ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::BaseStruct.internal__static_StructAccount__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<StructAccount, StructAccount.Builder> InternalFieldAccessors {
    get { return global::BaseStruct.internal__static_StructAccount__FieldAccessorTable; }
  }
  
  public const int GuidFieldNumber = 1;
  private bool hasGuid;
  private string guid_ = "";
  public bool HasGuid {
    get { return hasGuid; }
  }
  public string Guid {
    get { return guid_; }
  }
  
  public const int UsernameFieldNumber = 2;
  private bool hasUsername;
  private string username_ = "";
  public bool HasUsername {
    get { return hasUsername; }
  }
  public string Username {
    get { return username_; }
  }
  
  public const int PasswordFieldNumber = 3;
  private bool hasPassword;
  private string password_ = "";
  public bool HasPassword {
    get { return hasPassword; }
  }
  public string Password {
    get { return password_; }
  }
  
  public const int NicknameFieldNumber = 4;
  private bool hasNickname;
  private string nickname_ = "";
  public bool HasNickname {
    get { return hasNickname; }
  }
  public string Nickname {
    get { return nickname_; }
  }
  
  public const int RoleidFieldNumber = 5;
  private bool hasRoleid;
  private string roleid_ = "";
  public bool HasRoleid {
    get { return hasRoleid; }
  }
  public string Roleid {
    get { return roleid_; }
  }
  
  public const int PhoneFieldNumber = 6;
  private bool hasPhone;
  private string phone_ = "";
  public bool HasPhone {
    get { return hasPhone; }
  }
  public string Phone {
    get { return phone_; }
  }
  
  public const int EmailFieldNumber = 7;
  private bool hasEmail;
  private string email_ = "";
  public bool HasEmail {
    get { return hasEmail; }
  }
  public string Email {
    get { return email_; }
  }
  
  public const int SnsFieldNumber = 8;
  private bool hasSns;
  private string sns_ = "";
  public bool HasSns {
    get { return hasSns; }
  }
  public string Sns {
    get { return sns_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasGuid) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _structAccountFieldNames;
    if (hasGuid) {
      output.WriteString(1, field_names[1], Guid);
    }
    if (hasUsername) {
      output.WriteString(2, field_names[7], Username);
    }
    if (hasPassword) {
      output.WriteString(3, field_names[3], Password);
    }
    if (hasNickname) {
      output.WriteString(4, field_names[2], Nickname);
    }
    if (hasRoleid) {
      output.WriteString(5, field_names[5], Roleid);
    }
    if (hasPhone) {
      output.WriteString(6, field_names[4], Phone);
    }
    if (hasEmail) {
      output.WriteString(7, field_names[0], Email);
    }
    if (hasSns) {
      output.WriteString(8, field_names[6], Sns);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasGuid) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Guid);
    }
    if (hasUsername) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Username);
    }
    if (hasPassword) {
      size += pb::CodedOutputStream.ComputeStringSize(3, Password);
    }
    if (hasNickname) {
      size += pb::CodedOutputStream.ComputeStringSize(4, Nickname);
    }
    if (hasRoleid) {
      size += pb::CodedOutputStream.ComputeStringSize(5, Roleid);
    }
    if (hasPhone) {
      size += pb::CodedOutputStream.ComputeStringSize(6, Phone);
    }
    if (hasEmail) {
      size += pb::CodedOutputStream.ComputeStringSize(7, Email);
    }
    if (hasSns) {
      size += pb::CodedOutputStream.ComputeStringSize(8, Sns);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static StructAccount ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static StructAccount ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static StructAccount ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static StructAccount ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static StructAccount ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static StructAccount ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static StructAccount ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static StructAccount ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static StructAccount ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static StructAccount ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private StructAccount MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(StructAccount prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<StructAccount, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(StructAccount cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private StructAccount result;
    
    private StructAccount PrepareBuilder() {
      if (resultIsReadOnly) {
        StructAccount original = result;
        result = new StructAccount();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override StructAccount MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::StructAccount.Descriptor; }
    }
    
    public override StructAccount DefaultInstanceForType {
      get { return global::StructAccount.DefaultInstance; }
    }
    
    public override StructAccount BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is StructAccount) {
        return MergeFrom((StructAccount) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(StructAccount other) {
      if (other == global::StructAccount.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasGuid) {
        Guid = other.Guid;
      }
      if (other.HasUsername) {
        Username = other.Username;
      }
      if (other.HasPassword) {
        Password = other.Password;
      }
      if (other.HasNickname) {
        Nickname = other.Nickname;
      }
      if (other.HasRoleid) {
        Roleid = other.Roleid;
      }
      if (other.HasPhone) {
        Phone = other.Phone;
      }
      if (other.HasEmail) {
        Email = other.Email;
      }
      if (other.HasSns) {
        Sns = other.Sns;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_structAccountFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _structAccountFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasGuid = input.ReadString(ref result.guid_);
            break;
          }
          case 18: {
            result.hasUsername = input.ReadString(ref result.username_);
            break;
          }
          case 26: {
            result.hasPassword = input.ReadString(ref result.password_);
            break;
          }
          case 34: {
            result.hasNickname = input.ReadString(ref result.nickname_);
            break;
          }
          case 42: {
            result.hasRoleid = input.ReadString(ref result.roleid_);
            break;
          }
          case 50: {
            result.hasPhone = input.ReadString(ref result.phone_);
            break;
          }
          case 58: {
            result.hasEmail = input.ReadString(ref result.email_);
            break;
          }
          case 66: {
            result.hasSns = input.ReadString(ref result.sns_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasGuid {
      get { return result.hasGuid; }
    }
    public string Guid {
      get { return result.Guid; }
      set { SetGuid(value); }
    }
    public Builder SetGuid(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasGuid = true;
      result.guid_ = value;
      return this;
    }
    public Builder ClearGuid() {
      PrepareBuilder();
      result.hasGuid = false;
      result.guid_ = "";
      return this;
    }
    
    public bool HasUsername {
      get { return result.hasUsername; }
    }
    public string Username {
      get { return result.Username; }
      set { SetUsername(value); }
    }
    public Builder SetUsername(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasUsername = true;
      result.username_ = value;
      return this;
    }
    public Builder ClearUsername() {
      PrepareBuilder();
      result.hasUsername = false;
      result.username_ = "";
      return this;
    }
    
    public bool HasPassword {
      get { return result.hasPassword; }
    }
    public string Password {
      get { return result.Password; }
      set { SetPassword(value); }
    }
    public Builder SetPassword(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPassword = true;
      result.password_ = value;
      return this;
    }
    public Builder ClearPassword() {
      PrepareBuilder();
      result.hasPassword = false;
      result.password_ = "";
      return this;
    }
    
    public bool HasNickname {
      get { return result.hasNickname; }
    }
    public string Nickname {
      get { return result.Nickname; }
      set { SetNickname(value); }
    }
    public Builder SetNickname(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasNickname = true;
      result.nickname_ = value;
      return this;
    }
    public Builder ClearNickname() {
      PrepareBuilder();
      result.hasNickname = false;
      result.nickname_ = "";
      return this;
    }
    
    public bool HasRoleid {
      get { return result.hasRoleid; }
    }
    public string Roleid {
      get { return result.Roleid; }
      set { SetRoleid(value); }
    }
    public Builder SetRoleid(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasRoleid = true;
      result.roleid_ = value;
      return this;
    }
    public Builder ClearRoleid() {
      PrepareBuilder();
      result.hasRoleid = false;
      result.roleid_ = "";
      return this;
    }
    
    public bool HasPhone {
      get { return result.hasPhone; }
    }
    public string Phone {
      get { return result.Phone; }
      set { SetPhone(value); }
    }
    public Builder SetPhone(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPhone = true;
      result.phone_ = value;
      return this;
    }
    public Builder ClearPhone() {
      PrepareBuilder();
      result.hasPhone = false;
      result.phone_ = "";
      return this;
    }
    
    public bool HasEmail {
      get { return result.hasEmail; }
    }
    public string Email {
      get { return result.Email; }
      set { SetEmail(value); }
    }
    public Builder SetEmail(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasEmail = true;
      result.email_ = value;
      return this;
    }
    public Builder ClearEmail() {
      PrepareBuilder();
      result.hasEmail = false;
      result.email_ = "";
      return this;
    }
    
    public bool HasSns {
      get { return result.hasSns; }
    }
    public string Sns {
      get { return result.Sns; }
      set { SetSns(value); }
    }
    public Builder SetSns(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasSns = true;
      result.sns_ = value;
      return this;
    }
    public Builder ClearSns() {
      PrepareBuilder();
      result.hasSns = false;
      result.sns_ = "";
      return this;
    }
  }
  static StructAccount() {
    object.ReferenceEquals(global::BaseStruct.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class StructRole : pb::GeneratedMessage<StructRole, StructRole.Builder> {
  private StructRole() { }
  private static readonly StructRole defaultInstance = new StructRole().MakeReadOnly();
  private static readonly string[] _structRoleFieldNames = new string[] { "add_qx", "del_qx", "edit_qx", "name", "parentid", "query_qx", "rights", "roleid" };
  private static readonly uint[] _structRoleFieldTags = new uint[] { 42, 50, 58, 18, 34, 66, 26, 10 };
  public static StructRole DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override StructRole DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override StructRole ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::BaseStruct.internal__static_StructRole__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<StructRole, StructRole.Builder> InternalFieldAccessors {
    get { return global::BaseStruct.internal__static_StructRole__FieldAccessorTable; }
  }
  
  public const int RoleidFieldNumber = 1;
  private bool hasRoleid;
  private string roleid_ = "";
  public bool HasRoleid {
    get { return hasRoleid; }
  }
  public string Roleid {
    get { return roleid_; }
  }
  
  public const int NameFieldNumber = 2;
  private bool hasName;
  private string name_ = "";
  public bool HasName {
    get { return hasName; }
  }
  public string Name {
    get { return name_; }
  }
  
  public const int RightsFieldNumber = 3;
  private bool hasRights;
  private string rights_ = "";
  public bool HasRights {
    get { return hasRights; }
  }
  public string Rights {
    get { return rights_; }
  }
  
  public const int ParentidFieldNumber = 4;
  private bool hasParentid;
  private string parentid_ = "";
  public bool HasParentid {
    get { return hasParentid; }
  }
  public string Parentid {
    get { return parentid_; }
  }
  
  public const int AddQxFieldNumber = 5;
  private bool hasAddQx;
  private string addQx_ = "";
  public bool HasAddQx {
    get { return hasAddQx; }
  }
  public string AddQx {
    get { return addQx_; }
  }
  
  public const int DelQxFieldNumber = 6;
  private bool hasDelQx;
  private string delQx_ = "";
  public bool HasDelQx {
    get { return hasDelQx; }
  }
  public string DelQx {
    get { return delQx_; }
  }
  
  public const int EditQxFieldNumber = 7;
  private bool hasEditQx;
  private string editQx_ = "";
  public bool HasEditQx {
    get { return hasEditQx; }
  }
  public string EditQx {
    get { return editQx_; }
  }
  
  public const int QueryQxFieldNumber = 8;
  private bool hasQueryQx;
  private string queryQx_ = "";
  public bool HasQueryQx {
    get { return hasQueryQx; }
  }
  public string QueryQx {
    get { return queryQx_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasRoleid) return false;
      if (!hasName) return false;
      if (!hasRights) return false;
      if (!hasParentid) return false;
      if (!hasAddQx) return false;
      if (!hasDelQx) return false;
      if (!hasEditQx) return false;
      if (!hasQueryQx) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _structRoleFieldNames;
    if (hasRoleid) {
      output.WriteString(1, field_names[7], Roleid);
    }
    if (hasName) {
      output.WriteString(2, field_names[3], Name);
    }
    if (hasRights) {
      output.WriteString(3, field_names[6], Rights);
    }
    if (hasParentid) {
      output.WriteString(4, field_names[4], Parentid);
    }
    if (hasAddQx) {
      output.WriteString(5, field_names[0], AddQx);
    }
    if (hasDelQx) {
      output.WriteString(6, field_names[1], DelQx);
    }
    if (hasEditQx) {
      output.WriteString(7, field_names[2], EditQx);
    }
    if (hasQueryQx) {
      output.WriteString(8, field_names[5], QueryQx);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasRoleid) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Roleid);
    }
    if (hasName) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Name);
    }
    if (hasRights) {
      size += pb::CodedOutputStream.ComputeStringSize(3, Rights);
    }
    if (hasParentid) {
      size += pb::CodedOutputStream.ComputeStringSize(4, Parentid);
    }
    if (hasAddQx) {
      size += pb::CodedOutputStream.ComputeStringSize(5, AddQx);
    }
    if (hasDelQx) {
      size += pb::CodedOutputStream.ComputeStringSize(6, DelQx);
    }
    if (hasEditQx) {
      size += pb::CodedOutputStream.ComputeStringSize(7, EditQx);
    }
    if (hasQueryQx) {
      size += pb::CodedOutputStream.ComputeStringSize(8, QueryQx);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static StructRole ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static StructRole ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static StructRole ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static StructRole ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static StructRole ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static StructRole ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static StructRole ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static StructRole ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static StructRole ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static StructRole ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private StructRole MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(StructRole prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<StructRole, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(StructRole cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private StructRole result;
    
    private StructRole PrepareBuilder() {
      if (resultIsReadOnly) {
        StructRole original = result;
        result = new StructRole();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override StructRole MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::StructRole.Descriptor; }
    }
    
    public override StructRole DefaultInstanceForType {
      get { return global::StructRole.DefaultInstance; }
    }
    
    public override StructRole BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is StructRole) {
        return MergeFrom((StructRole) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(StructRole other) {
      if (other == global::StructRole.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasRoleid) {
        Roleid = other.Roleid;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasRights) {
        Rights = other.Rights;
      }
      if (other.HasParentid) {
        Parentid = other.Parentid;
      }
      if (other.HasAddQx) {
        AddQx = other.AddQx;
      }
      if (other.HasDelQx) {
        DelQx = other.DelQx;
      }
      if (other.HasEditQx) {
        EditQx = other.EditQx;
      }
      if (other.HasQueryQx) {
        QueryQx = other.QueryQx;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_structRoleFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _structRoleFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasRoleid = input.ReadString(ref result.roleid_);
            break;
          }
          case 18: {
            result.hasName = input.ReadString(ref result.name_);
            break;
          }
          case 26: {
            result.hasRights = input.ReadString(ref result.rights_);
            break;
          }
          case 34: {
            result.hasParentid = input.ReadString(ref result.parentid_);
            break;
          }
          case 42: {
            result.hasAddQx = input.ReadString(ref result.addQx_);
            break;
          }
          case 50: {
            result.hasDelQx = input.ReadString(ref result.delQx_);
            break;
          }
          case 58: {
            result.hasEditQx = input.ReadString(ref result.editQx_);
            break;
          }
          case 66: {
            result.hasQueryQx = input.ReadString(ref result.queryQx_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasRoleid {
      get { return result.hasRoleid; }
    }
    public string Roleid {
      get { return result.Roleid; }
      set { SetRoleid(value); }
    }
    public Builder SetRoleid(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasRoleid = true;
      result.roleid_ = value;
      return this;
    }
    public Builder ClearRoleid() {
      PrepareBuilder();
      result.hasRoleid = false;
      result.roleid_ = "";
      return this;
    }
    
    public bool HasName {
      get { return result.hasName; }
    }
    public string Name {
      get { return result.Name; }
      set { SetName(value); }
    }
    public Builder SetName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasName = true;
      result.name_ = value;
      return this;
    }
    public Builder ClearName() {
      PrepareBuilder();
      result.hasName = false;
      result.name_ = "";
      return this;
    }
    
    public bool HasRights {
      get { return result.hasRights; }
    }
    public string Rights {
      get { return result.Rights; }
      set { SetRights(value); }
    }
    public Builder SetRights(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasRights = true;
      result.rights_ = value;
      return this;
    }
    public Builder ClearRights() {
      PrepareBuilder();
      result.hasRights = false;
      result.rights_ = "";
      return this;
    }
    
    public bool HasParentid {
      get { return result.hasParentid; }
    }
    public string Parentid {
      get { return result.Parentid; }
      set { SetParentid(value); }
    }
    public Builder SetParentid(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasParentid = true;
      result.parentid_ = value;
      return this;
    }
    public Builder ClearParentid() {
      PrepareBuilder();
      result.hasParentid = false;
      result.parentid_ = "";
      return this;
    }
    
    public bool HasAddQx {
      get { return result.hasAddQx; }
    }
    public string AddQx {
      get { return result.AddQx; }
      set { SetAddQx(value); }
    }
    public Builder SetAddQx(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasAddQx = true;
      result.addQx_ = value;
      return this;
    }
    public Builder ClearAddQx() {
      PrepareBuilder();
      result.hasAddQx = false;
      result.addQx_ = "";
      return this;
    }
    
    public bool HasDelQx {
      get { return result.hasDelQx; }
    }
    public string DelQx {
      get { return result.DelQx; }
      set { SetDelQx(value); }
    }
    public Builder SetDelQx(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasDelQx = true;
      result.delQx_ = value;
      return this;
    }
    public Builder ClearDelQx() {
      PrepareBuilder();
      result.hasDelQx = false;
      result.delQx_ = "";
      return this;
    }
    
    public bool HasEditQx {
      get { return result.hasEditQx; }
    }
    public string EditQx {
      get { return result.EditQx; }
      set { SetEditQx(value); }
    }
    public Builder SetEditQx(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasEditQx = true;
      result.editQx_ = value;
      return this;
    }
    public Builder ClearEditQx() {
      PrepareBuilder();
      result.hasEditQx = false;
      result.editQx_ = "";
      return this;
    }
    
    public bool HasQueryQx {
      get { return result.hasQueryQx; }
    }
    public string QueryQx {
      get { return result.QueryQx; }
      set { SetQueryQx(value); }
    }
    public Builder SetQueryQx(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasQueryQx = true;
      result.queryQx_ = value;
      return this;
    }
    public Builder ClearQueryQx() {
      PrepareBuilder();
      result.hasQueryQx = false;
      result.queryQx_ = "";
      return this;
    }
  }
  static StructRole() {
    object.ReferenceEquals(global::BaseStruct.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class StructComputer : pb::GeneratedMessage<StructComputer, StructComputer.Builder> {
  private StructComputer() { }
  private static readonly StructComputer defaultInstance = new StructComputer().MakeReadOnly();
  private static readonly string[] _structComputerFieldNames = new string[] { "area", "computerid", "name" };
  private static readonly uint[] _structComputerFieldTags = new uint[] { 26, 8, 18 };
  public static StructComputer DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override StructComputer DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override StructComputer ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::BaseStruct.internal__static_StructComputer__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<StructComputer, StructComputer.Builder> InternalFieldAccessors {
    get { return global::BaseStruct.internal__static_StructComputer__FieldAccessorTable; }
  }
  
  public const int ComputeridFieldNumber = 1;
  private bool hasComputerid;
  private int computerid_;
  public bool HasComputerid {
    get { return hasComputerid; }
  }
  public int Computerid {
    get { return computerid_; }
  }
  
  public const int NameFieldNumber = 2;
  private bool hasName;
  private string name_ = "";
  public bool HasName {
    get { return hasName; }
  }
  public string Name {
    get { return name_; }
  }
  
  public const int AreaFieldNumber = 3;
  private bool hasArea;
  private string area_ = "";
  public bool HasArea {
    get { return hasArea; }
  }
  public string Area {
    get { return area_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasComputerid) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _structComputerFieldNames;
    if (hasComputerid) {
      output.WriteInt32(1, field_names[1], Computerid);
    }
    if (hasName) {
      output.WriteString(2, field_names[2], Name);
    }
    if (hasArea) {
      output.WriteString(3, field_names[0], Area);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasComputerid) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Computerid);
    }
    if (hasName) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Name);
    }
    if (hasArea) {
      size += pb::CodedOutputStream.ComputeStringSize(3, Area);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static StructComputer ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static StructComputer ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static StructComputer ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static StructComputer ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static StructComputer ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static StructComputer ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static StructComputer ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static StructComputer ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static StructComputer ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static StructComputer ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private StructComputer MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(StructComputer prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<StructComputer, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(StructComputer cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private StructComputer result;
    
    private StructComputer PrepareBuilder() {
      if (resultIsReadOnly) {
        StructComputer original = result;
        result = new StructComputer();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override StructComputer MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::StructComputer.Descriptor; }
    }
    
    public override StructComputer DefaultInstanceForType {
      get { return global::StructComputer.DefaultInstance; }
    }
    
    public override StructComputer BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is StructComputer) {
        return MergeFrom((StructComputer) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(StructComputer other) {
      if (other == global::StructComputer.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasComputerid) {
        Computerid = other.Computerid;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasArea) {
        Area = other.Area;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_structComputerFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _structComputerFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasComputerid = input.ReadInt32(ref result.computerid_);
            break;
          }
          case 18: {
            result.hasName = input.ReadString(ref result.name_);
            break;
          }
          case 26: {
            result.hasArea = input.ReadString(ref result.area_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasComputerid {
      get { return result.hasComputerid; }
    }
    public int Computerid {
      get { return result.Computerid; }
      set { SetComputerid(value); }
    }
    public Builder SetComputerid(int value) {
      PrepareBuilder();
      result.hasComputerid = true;
      result.computerid_ = value;
      return this;
    }
    public Builder ClearComputerid() {
      PrepareBuilder();
      result.hasComputerid = false;
      result.computerid_ = 0;
      return this;
    }
    
    public bool HasName {
      get { return result.hasName; }
    }
    public string Name {
      get { return result.Name; }
      set { SetName(value); }
    }
    public Builder SetName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasName = true;
      result.name_ = value;
      return this;
    }
    public Builder ClearName() {
      PrepareBuilder();
      result.hasName = false;
      result.name_ = "";
      return this;
    }
    
    public bool HasArea {
      get { return result.hasArea; }
    }
    public string Area {
      get { return result.Area; }
      set { SetArea(value); }
    }
    public Builder SetArea(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasArea = true;
      result.area_ = value;
      return this;
    }
    public Builder ClearArea() {
      PrepareBuilder();
      result.hasArea = false;
      result.area_ = "";
      return this;
    }
  }
  static StructComputer() {
    object.ReferenceEquals(global::BaseStruct.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class StructArea : pb::GeneratedMessage<StructArea, StructArea.Builder> {
  private StructArea() { }
  private static readonly StructArea defaultInstance = new StructArea().MakeReadOnly();
  private static readonly string[] _structAreaFieldNames = new string[] { "areaid", "name" };
  private static readonly uint[] _structAreaFieldTags = new uint[] { 8, 18 };
  public static StructArea DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override StructArea DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override StructArea ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::BaseStruct.internal__static_StructArea__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<StructArea, StructArea.Builder> InternalFieldAccessors {
    get { return global::BaseStruct.internal__static_StructArea__FieldAccessorTable; }
  }
  
  public const int AreaidFieldNumber = 1;
  private bool hasAreaid;
  private int areaid_;
  public bool HasAreaid {
    get { return hasAreaid; }
  }
  public int Areaid {
    get { return areaid_; }
  }
  
  public const int NameFieldNumber = 2;
  private bool hasName;
  private string name_ = "";
  public bool HasName {
    get { return hasName; }
  }
  public string Name {
    get { return name_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasAreaid) return false;
      if (!hasName) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _structAreaFieldNames;
    if (hasAreaid) {
      output.WriteInt32(1, field_names[0], Areaid);
    }
    if (hasName) {
      output.WriteString(2, field_names[1], Name);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasAreaid) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Areaid);
    }
    if (hasName) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Name);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static StructArea ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static StructArea ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static StructArea ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static StructArea ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static StructArea ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static StructArea ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static StructArea ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static StructArea ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static StructArea ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static StructArea ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private StructArea MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(StructArea prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<StructArea, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(StructArea cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private StructArea result;
    
    private StructArea PrepareBuilder() {
      if (resultIsReadOnly) {
        StructArea original = result;
        result = new StructArea();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override StructArea MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::StructArea.Descriptor; }
    }
    
    public override StructArea DefaultInstanceForType {
      get { return global::StructArea.DefaultInstance; }
    }
    
    public override StructArea BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is StructArea) {
        return MergeFrom((StructArea) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(StructArea other) {
      if (other == global::StructArea.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasAreaid) {
        Areaid = other.Areaid;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_structAreaFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _structAreaFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasAreaid = input.ReadInt32(ref result.areaid_);
            break;
          }
          case 18: {
            result.hasName = input.ReadString(ref result.name_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasAreaid {
      get { return result.hasAreaid; }
    }
    public int Areaid {
      get { return result.Areaid; }
      set { SetAreaid(value); }
    }
    public Builder SetAreaid(int value) {
      PrepareBuilder();
      result.hasAreaid = true;
      result.areaid_ = value;
      return this;
    }
    public Builder ClearAreaid() {
      PrepareBuilder();
      result.hasAreaid = false;
      result.areaid_ = 0;
      return this;
    }
    
    public bool HasName {
      get { return result.hasName; }
    }
    public string Name {
      get { return result.Name; }
      set { SetName(value); }
    }
    public Builder SetName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasName = true;
      result.name_ = value;
      return this;
    }
    public Builder ClearName() {
      PrepareBuilder();
      result.hasName = false;
      result.name_ = "";
      return this;
    }
  }
  static StructArea() {
    object.ReferenceEquals(global::BaseStruct.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class StructConsum : pb::GeneratedMessage<StructConsum, StructConsum.Builder> {
  private StructConsum() { }
  private static readonly StructConsum defaultInstance = new StructConsum().MakeReadOnly();
  private static readonly string[] _structConsumFieldNames = new string[] { "area", "cardnumber", "consumid", "consumtype", "money", "paymode", "time", "username" };
  private static readonly uint[] _structConsumFieldTags = new uint[] { 32, 26, 8, 40, 48, 64, 58, 18 };
  public static StructConsum DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override StructConsum DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override StructConsum ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::BaseStruct.internal__static_StructConsum__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<StructConsum, StructConsum.Builder> InternalFieldAccessors {
    get { return global::BaseStruct.internal__static_StructConsum__FieldAccessorTable; }
  }
  
  public const int ConsumidFieldNumber = 1;
  private bool hasConsumid;
  private int consumid_;
  public bool HasConsumid {
    get { return hasConsumid; }
  }
  public int Consumid {
    get { return consumid_; }
  }
  
  public const int UsernameFieldNumber = 2;
  private bool hasUsername;
  private string username_ = "";
  public bool HasUsername {
    get { return hasUsername; }
  }
  public string Username {
    get { return username_; }
  }
  
  public const int CardnumberFieldNumber = 3;
  private bool hasCardnumber;
  private string cardnumber_ = "";
  public bool HasCardnumber {
    get { return hasCardnumber; }
  }
  public string Cardnumber {
    get { return cardnumber_; }
  }
  
  public const int AreaFieldNumber = 4;
  private bool hasArea;
  private int area_;
  public bool HasArea {
    get { return hasArea; }
  }
  public int Area {
    get { return area_; }
  }
  
  public const int ConsumtypeFieldNumber = 5;
  private bool hasConsumtype;
  private int consumtype_;
  public bool HasConsumtype {
    get { return hasConsumtype; }
  }
  public int Consumtype {
    get { return consumtype_; }
  }
  
  public const int MoneyFieldNumber = 6;
  private bool hasMoney;
  private int money_;
  public bool HasMoney {
    get { return hasMoney; }
  }
  public int Money {
    get { return money_; }
  }
  
  public const int TimeFieldNumber = 7;
  private bool hasTime;
  private string time_ = "";
  public bool HasTime {
    get { return hasTime; }
  }
  public string Time {
    get { return time_; }
  }
  
  public const int PaymodeFieldNumber = 8;
  private bool hasPaymode;
  private int paymode_;
  public bool HasPaymode {
    get { return hasPaymode; }
  }
  public int Paymode {
    get { return paymode_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasConsumid) return false;
      if (!hasUsername) return false;
      if (!hasCardnumber) return false;
      if (!hasArea) return false;
      if (!hasConsumtype) return false;
      if (!hasMoney) return false;
      if (!hasTime) return false;
      if (!hasPaymode) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _structConsumFieldNames;
    if (hasConsumid) {
      output.WriteInt32(1, field_names[2], Consumid);
    }
    if (hasUsername) {
      output.WriteString(2, field_names[7], Username);
    }
    if (hasCardnumber) {
      output.WriteString(3, field_names[1], Cardnumber);
    }
    if (hasArea) {
      output.WriteInt32(4, field_names[0], Area);
    }
    if (hasConsumtype) {
      output.WriteInt32(5, field_names[3], Consumtype);
    }
    if (hasMoney) {
      output.WriteInt32(6, field_names[4], Money);
    }
    if (hasTime) {
      output.WriteString(7, field_names[6], Time);
    }
    if (hasPaymode) {
      output.WriteInt32(8, field_names[5], Paymode);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasConsumid) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Consumid);
    }
    if (hasUsername) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Username);
    }
    if (hasCardnumber) {
      size += pb::CodedOutputStream.ComputeStringSize(3, Cardnumber);
    }
    if (hasArea) {
      size += pb::CodedOutputStream.ComputeInt32Size(4, Area);
    }
    if (hasConsumtype) {
      size += pb::CodedOutputStream.ComputeInt32Size(5, Consumtype);
    }
    if (hasMoney) {
      size += pb::CodedOutputStream.ComputeInt32Size(6, Money);
    }
    if (hasTime) {
      size += pb::CodedOutputStream.ComputeStringSize(7, Time);
    }
    if (hasPaymode) {
      size += pb::CodedOutputStream.ComputeInt32Size(8, Paymode);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static StructConsum ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static StructConsum ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static StructConsum ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static StructConsum ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static StructConsum ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static StructConsum ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static StructConsum ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static StructConsum ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static StructConsum ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static StructConsum ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private StructConsum MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(StructConsum prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<StructConsum, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(StructConsum cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private StructConsum result;
    
    private StructConsum PrepareBuilder() {
      if (resultIsReadOnly) {
        StructConsum original = result;
        result = new StructConsum();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override StructConsum MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::StructConsum.Descriptor; }
    }
    
    public override StructConsum DefaultInstanceForType {
      get { return global::StructConsum.DefaultInstance; }
    }
    
    public override StructConsum BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is StructConsum) {
        return MergeFrom((StructConsum) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(StructConsum other) {
      if (other == global::StructConsum.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasConsumid) {
        Consumid = other.Consumid;
      }
      if (other.HasUsername) {
        Username = other.Username;
      }
      if (other.HasCardnumber) {
        Cardnumber = other.Cardnumber;
      }
      if (other.HasArea) {
        Area = other.Area;
      }
      if (other.HasConsumtype) {
        Consumtype = other.Consumtype;
      }
      if (other.HasMoney) {
        Money = other.Money;
      }
      if (other.HasTime) {
        Time = other.Time;
      }
      if (other.HasPaymode) {
        Paymode = other.Paymode;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_structConsumFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _structConsumFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasConsumid = input.ReadInt32(ref result.consumid_);
            break;
          }
          case 18: {
            result.hasUsername = input.ReadString(ref result.username_);
            break;
          }
          case 26: {
            result.hasCardnumber = input.ReadString(ref result.cardnumber_);
            break;
          }
          case 32: {
            result.hasArea = input.ReadInt32(ref result.area_);
            break;
          }
          case 40: {
            result.hasConsumtype = input.ReadInt32(ref result.consumtype_);
            break;
          }
          case 48: {
            result.hasMoney = input.ReadInt32(ref result.money_);
            break;
          }
          case 58: {
            result.hasTime = input.ReadString(ref result.time_);
            break;
          }
          case 64: {
            result.hasPaymode = input.ReadInt32(ref result.paymode_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasConsumid {
      get { return result.hasConsumid; }
    }
    public int Consumid {
      get { return result.Consumid; }
      set { SetConsumid(value); }
    }
    public Builder SetConsumid(int value) {
      PrepareBuilder();
      result.hasConsumid = true;
      result.consumid_ = value;
      return this;
    }
    public Builder ClearConsumid() {
      PrepareBuilder();
      result.hasConsumid = false;
      result.consumid_ = 0;
      return this;
    }
    
    public bool HasUsername {
      get { return result.hasUsername; }
    }
    public string Username {
      get { return result.Username; }
      set { SetUsername(value); }
    }
    public Builder SetUsername(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasUsername = true;
      result.username_ = value;
      return this;
    }
    public Builder ClearUsername() {
      PrepareBuilder();
      result.hasUsername = false;
      result.username_ = "";
      return this;
    }
    
    public bool HasCardnumber {
      get { return result.hasCardnumber; }
    }
    public string Cardnumber {
      get { return result.Cardnumber; }
      set { SetCardnumber(value); }
    }
    public Builder SetCardnumber(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCardnumber = true;
      result.cardnumber_ = value;
      return this;
    }
    public Builder ClearCardnumber() {
      PrepareBuilder();
      result.hasCardnumber = false;
      result.cardnumber_ = "";
      return this;
    }
    
    public bool HasArea {
      get { return result.hasArea; }
    }
    public int Area {
      get { return result.Area; }
      set { SetArea(value); }
    }
    public Builder SetArea(int value) {
      PrepareBuilder();
      result.hasArea = true;
      result.area_ = value;
      return this;
    }
    public Builder ClearArea() {
      PrepareBuilder();
      result.hasArea = false;
      result.area_ = 0;
      return this;
    }
    
    public bool HasConsumtype {
      get { return result.hasConsumtype; }
    }
    public int Consumtype {
      get { return result.Consumtype; }
      set { SetConsumtype(value); }
    }
    public Builder SetConsumtype(int value) {
      PrepareBuilder();
      result.hasConsumtype = true;
      result.consumtype_ = value;
      return this;
    }
    public Builder ClearConsumtype() {
      PrepareBuilder();
      result.hasConsumtype = false;
      result.consumtype_ = 0;
      return this;
    }
    
    public bool HasMoney {
      get { return result.hasMoney; }
    }
    public int Money {
      get { return result.Money; }
      set { SetMoney(value); }
    }
    public Builder SetMoney(int value) {
      PrepareBuilder();
      result.hasMoney = true;
      result.money_ = value;
      return this;
    }
    public Builder ClearMoney() {
      PrepareBuilder();
      result.hasMoney = false;
      result.money_ = 0;
      return this;
    }
    
    public bool HasTime {
      get { return result.hasTime; }
    }
    public string Time {
      get { return result.Time; }
      set { SetTime(value); }
    }
    public Builder SetTime(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasTime = true;
      result.time_ = value;
      return this;
    }
    public Builder ClearTime() {
      PrepareBuilder();
      result.hasTime = false;
      result.time_ = "";
      return this;
    }
    
    public bool HasPaymode {
      get { return result.hasPaymode; }
    }
    public int Paymode {
      get { return result.Paymode; }
      set { SetPaymode(value); }
    }
    public Builder SetPaymode(int value) {
      PrepareBuilder();
      result.hasPaymode = true;
      result.paymode_ = value;
      return this;
    }
    public Builder ClearPaymode() {
      PrepareBuilder();
      result.hasPaymode = false;
      result.paymode_ = 0;
      return this;
    }
  }
  static StructConsum() {
    object.ReferenceEquals(global::BaseStruct.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class StructEmbarkation : pb::GeneratedMessage<StructEmbarkation, StructEmbarkation.Builder> {
  private StructEmbarkation() { }
  private static readonly StructEmbarkation defaultInstance = new StructEmbarkation().MakeReadOnly();
  private static readonly string[] _structEmbarkationFieldNames = new string[] { "area", "cardnumber", "computer", "ip", "mac", "money", "starttime", "stoptime", "usedtime", "username", "usertype" };
  private static readonly uint[] _structEmbarkationFieldTags = new uint[] { 58, 18, 10, 90, 82, 72, 42, 50, 64, 26, 34 };
  public static StructEmbarkation DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override StructEmbarkation DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override StructEmbarkation ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::BaseStruct.internal__static_StructEmbarkation__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<StructEmbarkation, StructEmbarkation.Builder> InternalFieldAccessors {
    get { return global::BaseStruct.internal__static_StructEmbarkation__FieldAccessorTable; }
  }
  
  public const int ComputerFieldNumber = 1;
  private bool hasComputer;
  private string computer_ = "";
  public bool HasComputer {
    get { return hasComputer; }
  }
  public string Computer {
    get { return computer_; }
  }
  
  public const int CardnumberFieldNumber = 2;
  private bool hasCardnumber;
  private string cardnumber_ = "";
  public bool HasCardnumber {
    get { return hasCardnumber; }
  }
  public string Cardnumber {
    get { return cardnumber_; }
  }
  
  public const int UsernameFieldNumber = 3;
  private bool hasUsername;
  private string username_ = "";
  public bool HasUsername {
    get { return hasUsername; }
  }
  public string Username {
    get { return username_; }
  }
  
  public const int UsertypeFieldNumber = 4;
  private bool hasUsertype;
  private string usertype_ = "";
  public bool HasUsertype {
    get { return hasUsertype; }
  }
  public string Usertype {
    get { return usertype_; }
  }
  
  public const int StarttimeFieldNumber = 5;
  private bool hasStarttime;
  private string starttime_ = "";
  public bool HasStarttime {
    get { return hasStarttime; }
  }
  public string Starttime {
    get { return starttime_; }
  }
  
  public const int StoptimeFieldNumber = 6;
  private bool hasStoptime;
  private string stoptime_ = "";
  public bool HasStoptime {
    get { return hasStoptime; }
  }
  public string Stoptime {
    get { return stoptime_; }
  }
  
  public const int AreaFieldNumber = 7;
  private bool hasArea;
  private string area_ = "";
  public bool HasArea {
    get { return hasArea; }
  }
  public string Area {
    get { return area_; }
  }
  
  public const int UsedtimeFieldNumber = 8;
  private bool hasUsedtime;
  private int usedtime_;
  public bool HasUsedtime {
    get { return hasUsedtime; }
  }
  public int Usedtime {
    get { return usedtime_; }
  }
  
  public const int MoneyFieldNumber = 9;
  private bool hasMoney;
  private int money_;
  public bool HasMoney {
    get { return hasMoney; }
  }
  public int Money {
    get { return money_; }
  }
  
  public const int MacFieldNumber = 10;
  private bool hasMac;
  private string mac_ = "";
  public bool HasMac {
    get { return hasMac; }
  }
  public string Mac {
    get { return mac_; }
  }
  
  public const int IpFieldNumber = 11;
  private bool hasIp;
  private string ip_ = "";
  public bool HasIp {
    get { return hasIp; }
  }
  public string Ip {
    get { return ip_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasComputer) return false;
      if (!hasCardnumber) return false;
      if (!hasUsername) return false;
      if (!hasUsertype) return false;
      if (!hasStarttime) return false;
      if (!hasStoptime) return false;
      if (!hasArea) return false;
      if (!hasUsedtime) return false;
      if (!hasMoney) return false;
      if (!hasMac) return false;
      if (!hasIp) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _structEmbarkationFieldNames;
    if (hasComputer) {
      output.WriteString(1, field_names[2], Computer);
    }
    if (hasCardnumber) {
      output.WriteString(2, field_names[1], Cardnumber);
    }
    if (hasUsername) {
      output.WriteString(3, field_names[9], Username);
    }
    if (hasUsertype) {
      output.WriteString(4, field_names[10], Usertype);
    }
    if (hasStarttime) {
      output.WriteString(5, field_names[6], Starttime);
    }
    if (hasStoptime) {
      output.WriteString(6, field_names[7], Stoptime);
    }
    if (hasArea) {
      output.WriteString(7, field_names[0], Area);
    }
    if (hasUsedtime) {
      output.WriteInt32(8, field_names[8], Usedtime);
    }
    if (hasMoney) {
      output.WriteInt32(9, field_names[5], Money);
    }
    if (hasMac) {
      output.WriteString(10, field_names[4], Mac);
    }
    if (hasIp) {
      output.WriteString(11, field_names[3], Ip);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasComputer) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Computer);
    }
    if (hasCardnumber) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Cardnumber);
    }
    if (hasUsername) {
      size += pb::CodedOutputStream.ComputeStringSize(3, Username);
    }
    if (hasUsertype) {
      size += pb::CodedOutputStream.ComputeStringSize(4, Usertype);
    }
    if (hasStarttime) {
      size += pb::CodedOutputStream.ComputeStringSize(5, Starttime);
    }
    if (hasStoptime) {
      size += pb::CodedOutputStream.ComputeStringSize(6, Stoptime);
    }
    if (hasArea) {
      size += pb::CodedOutputStream.ComputeStringSize(7, Area);
    }
    if (hasUsedtime) {
      size += pb::CodedOutputStream.ComputeInt32Size(8, Usedtime);
    }
    if (hasMoney) {
      size += pb::CodedOutputStream.ComputeInt32Size(9, Money);
    }
    if (hasMac) {
      size += pb::CodedOutputStream.ComputeStringSize(10, Mac);
    }
    if (hasIp) {
      size += pb::CodedOutputStream.ComputeStringSize(11, Ip);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static StructEmbarkation ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static StructEmbarkation ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static StructEmbarkation ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static StructEmbarkation ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static StructEmbarkation ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static StructEmbarkation ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static StructEmbarkation ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static StructEmbarkation ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static StructEmbarkation ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static StructEmbarkation ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private StructEmbarkation MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(StructEmbarkation prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<StructEmbarkation, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(StructEmbarkation cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private StructEmbarkation result;
    
    private StructEmbarkation PrepareBuilder() {
      if (resultIsReadOnly) {
        StructEmbarkation original = result;
        result = new StructEmbarkation();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override StructEmbarkation MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::StructEmbarkation.Descriptor; }
    }
    
    public override StructEmbarkation DefaultInstanceForType {
      get { return global::StructEmbarkation.DefaultInstance; }
    }
    
    public override StructEmbarkation BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is StructEmbarkation) {
        return MergeFrom((StructEmbarkation) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(StructEmbarkation other) {
      if (other == global::StructEmbarkation.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasComputer) {
        Computer = other.Computer;
      }
      if (other.HasCardnumber) {
        Cardnumber = other.Cardnumber;
      }
      if (other.HasUsername) {
        Username = other.Username;
      }
      if (other.HasUsertype) {
        Usertype = other.Usertype;
      }
      if (other.HasStarttime) {
        Starttime = other.Starttime;
      }
      if (other.HasStoptime) {
        Stoptime = other.Stoptime;
      }
      if (other.HasArea) {
        Area = other.Area;
      }
      if (other.HasUsedtime) {
        Usedtime = other.Usedtime;
      }
      if (other.HasMoney) {
        Money = other.Money;
      }
      if (other.HasMac) {
        Mac = other.Mac;
      }
      if (other.HasIp) {
        Ip = other.Ip;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_structEmbarkationFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _structEmbarkationFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasComputer = input.ReadString(ref result.computer_);
            break;
          }
          case 18: {
            result.hasCardnumber = input.ReadString(ref result.cardnumber_);
            break;
          }
          case 26: {
            result.hasUsername = input.ReadString(ref result.username_);
            break;
          }
          case 34: {
            result.hasUsertype = input.ReadString(ref result.usertype_);
            break;
          }
          case 42: {
            result.hasStarttime = input.ReadString(ref result.starttime_);
            break;
          }
          case 50: {
            result.hasStoptime = input.ReadString(ref result.stoptime_);
            break;
          }
          case 58: {
            result.hasArea = input.ReadString(ref result.area_);
            break;
          }
          case 64: {
            result.hasUsedtime = input.ReadInt32(ref result.usedtime_);
            break;
          }
          case 72: {
            result.hasMoney = input.ReadInt32(ref result.money_);
            break;
          }
          case 82: {
            result.hasMac = input.ReadString(ref result.mac_);
            break;
          }
          case 90: {
            result.hasIp = input.ReadString(ref result.ip_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasComputer {
      get { return result.hasComputer; }
    }
    public string Computer {
      get { return result.Computer; }
      set { SetComputer(value); }
    }
    public Builder SetComputer(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasComputer = true;
      result.computer_ = value;
      return this;
    }
    public Builder ClearComputer() {
      PrepareBuilder();
      result.hasComputer = false;
      result.computer_ = "";
      return this;
    }
    
    public bool HasCardnumber {
      get { return result.hasCardnumber; }
    }
    public string Cardnumber {
      get { return result.Cardnumber; }
      set { SetCardnumber(value); }
    }
    public Builder SetCardnumber(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCardnumber = true;
      result.cardnumber_ = value;
      return this;
    }
    public Builder ClearCardnumber() {
      PrepareBuilder();
      result.hasCardnumber = false;
      result.cardnumber_ = "";
      return this;
    }
    
    public bool HasUsername {
      get { return result.hasUsername; }
    }
    public string Username {
      get { return result.Username; }
      set { SetUsername(value); }
    }
    public Builder SetUsername(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasUsername = true;
      result.username_ = value;
      return this;
    }
    public Builder ClearUsername() {
      PrepareBuilder();
      result.hasUsername = false;
      result.username_ = "";
      return this;
    }
    
    public bool HasUsertype {
      get { return result.hasUsertype; }
    }
    public string Usertype {
      get { return result.Usertype; }
      set { SetUsertype(value); }
    }
    public Builder SetUsertype(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasUsertype = true;
      result.usertype_ = value;
      return this;
    }
    public Builder ClearUsertype() {
      PrepareBuilder();
      result.hasUsertype = false;
      result.usertype_ = "";
      return this;
    }
    
    public bool HasStarttime {
      get { return result.hasStarttime; }
    }
    public string Starttime {
      get { return result.Starttime; }
      set { SetStarttime(value); }
    }
    public Builder SetStarttime(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasStarttime = true;
      result.starttime_ = value;
      return this;
    }
    public Builder ClearStarttime() {
      PrepareBuilder();
      result.hasStarttime = false;
      result.starttime_ = "";
      return this;
    }
    
    public bool HasStoptime {
      get { return result.hasStoptime; }
    }
    public string Stoptime {
      get { return result.Stoptime; }
      set { SetStoptime(value); }
    }
    public Builder SetStoptime(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasStoptime = true;
      result.stoptime_ = value;
      return this;
    }
    public Builder ClearStoptime() {
      PrepareBuilder();
      result.hasStoptime = false;
      result.stoptime_ = "";
      return this;
    }
    
    public bool HasArea {
      get { return result.hasArea; }
    }
    public string Area {
      get { return result.Area; }
      set { SetArea(value); }
    }
    public Builder SetArea(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasArea = true;
      result.area_ = value;
      return this;
    }
    public Builder ClearArea() {
      PrepareBuilder();
      result.hasArea = false;
      result.area_ = "";
      return this;
    }
    
    public bool HasUsedtime {
      get { return result.hasUsedtime; }
    }
    public int Usedtime {
      get { return result.Usedtime; }
      set { SetUsedtime(value); }
    }
    public Builder SetUsedtime(int value) {
      PrepareBuilder();
      result.hasUsedtime = true;
      result.usedtime_ = value;
      return this;
    }
    public Builder ClearUsedtime() {
      PrepareBuilder();
      result.hasUsedtime = false;
      result.usedtime_ = 0;
      return this;
    }
    
    public bool HasMoney {
      get { return result.hasMoney; }
    }
    public int Money {
      get { return result.Money; }
      set { SetMoney(value); }
    }
    public Builder SetMoney(int value) {
      PrepareBuilder();
      result.hasMoney = true;
      result.money_ = value;
      return this;
    }
    public Builder ClearMoney() {
      PrepareBuilder();
      result.hasMoney = false;
      result.money_ = 0;
      return this;
    }
    
    public bool HasMac {
      get { return result.hasMac; }
    }
    public string Mac {
      get { return result.Mac; }
      set { SetMac(value); }
    }
    public Builder SetMac(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasMac = true;
      result.mac_ = value;
      return this;
    }
    public Builder ClearMac() {
      PrepareBuilder();
      result.hasMac = false;
      result.mac_ = "";
      return this;
    }
    
    public bool HasIp {
      get { return result.hasIp; }
    }
    public string Ip {
      get { return result.Ip; }
      set { SetIp(value); }
    }
    public Builder SetIp(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasIp = true;
      result.ip_ = value;
      return this;
    }
    public Builder ClearIp() {
      PrepareBuilder();
      result.hasIp = false;
      result.ip_ = "";
      return this;
    }
  }
  static StructEmbarkation() {
    object.ReferenceEquals(global::BaseStruct.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class StructRealTime : pb::GeneratedMessage<StructRealTime, StructRealTime.Builder> {
  private StructRealTime() { }
  private static readonly StructRealTime defaultInstance = new StructRealTime().MakeReadOnly();
  private static readonly string[] _structRealTimeFieldNames = new string[] { "area", "balance", "billing", "cardnumber", "computer", "computerid", "ip", "mac", "remaintime", "starttime", "status", "stoptime", "usedtime", "usertype", "verify" };
  private static readonly uint[] _structRealTimeFieldTags = new uint[] { 26, 74, 58, 42, 18, 8, 122, 114, 82, 90, 34, 106, 98, 50, 66 };
  public static StructRealTime DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override StructRealTime DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override StructRealTime ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::BaseStruct.internal__static_StructRealTime__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<StructRealTime, StructRealTime.Builder> InternalFieldAccessors {
    get { return global::BaseStruct.internal__static_StructRealTime__FieldAccessorTable; }
  }
  
  public const int ComputeridFieldNumber = 1;
  private bool hasComputerid;
  private int computerid_;
  public bool HasComputerid {
    get { return hasComputerid; }
  }
  public int Computerid {
    get { return computerid_; }
  }
  
  public const int ComputerFieldNumber = 2;
  private bool hasComputer;
  private string computer_ = "";
  public bool HasComputer {
    get { return hasComputer; }
  }
  public string Computer {
    get { return computer_; }
  }
  
  public const int AreaFieldNumber = 3;
  private bool hasArea;
  private string area_ = "";
  public bool HasArea {
    get { return hasArea; }
  }
  public string Area {
    get { return area_; }
  }
  
  public const int StatusFieldNumber = 4;
  private bool hasStatus;
  private string status_ = "";
  public bool HasStatus {
    get { return hasStatus; }
  }
  public string Status {
    get { return status_; }
  }
  
  public const int CardnumberFieldNumber = 5;
  private bool hasCardnumber;
  private string cardnumber_ = "";
  public bool HasCardnumber {
    get { return hasCardnumber; }
  }
  public string Cardnumber {
    get { return cardnumber_; }
  }
  
  public const int UsertypeFieldNumber = 6;
  private bool hasUsertype;
  private string usertype_ = "";
  public bool HasUsertype {
    get { return hasUsertype; }
  }
  public string Usertype {
    get { return usertype_; }
  }
  
  public const int BillingFieldNumber = 7;
  private bool hasBilling;
  private string billing_ = "";
  public bool HasBilling {
    get { return hasBilling; }
  }
  public string Billing {
    get { return billing_; }
  }
  
  public const int VerifyFieldNumber = 8;
  private bool hasVerify;
  private string verify_ = "";
  public bool HasVerify {
    get { return hasVerify; }
  }
  public string Verify {
    get { return verify_; }
  }
  
  public const int BalanceFieldNumber = 9;
  private bool hasBalance;
  private string balance_ = "";
  public bool HasBalance {
    get { return hasBalance; }
  }
  public string Balance {
    get { return balance_; }
  }
  
  public const int RemaintimeFieldNumber = 10;
  private bool hasRemaintime;
  private string remaintime_ = "";
  public bool HasRemaintime {
    get { return hasRemaintime; }
  }
  public string Remaintime {
    get { return remaintime_; }
  }
  
  public const int StarttimeFieldNumber = 11;
  private bool hasStarttime;
  private string starttime_ = "";
  public bool HasStarttime {
    get { return hasStarttime; }
  }
  public string Starttime {
    get { return starttime_; }
  }
  
  public const int UsedtimeFieldNumber = 12;
  private bool hasUsedtime;
  private string usedtime_ = "";
  public bool HasUsedtime {
    get { return hasUsedtime; }
  }
  public string Usedtime {
    get { return usedtime_; }
  }
  
  public const int StoptimeFieldNumber = 13;
  private bool hasStoptime;
  private string stoptime_ = "";
  public bool HasStoptime {
    get { return hasStoptime; }
  }
  public string Stoptime {
    get { return stoptime_; }
  }
  
  public const int MacFieldNumber = 14;
  private bool hasMac;
  private string mac_ = "";
  public bool HasMac {
    get { return hasMac; }
  }
  public string Mac {
    get { return mac_; }
  }
  
  public const int IpFieldNumber = 15;
  private bool hasIp;
  private string ip_ = "";
  public bool HasIp {
    get { return hasIp; }
  }
  public string Ip {
    get { return ip_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasComputerid) return false;
      if (!hasComputer) return false;
      if (!hasArea) return false;
      if (!hasStatus) return false;
      if (!hasCardnumber) return false;
      if (!hasUsertype) return false;
      if (!hasBilling) return false;
      if (!hasVerify) return false;
      if (!hasBalance) return false;
      if (!hasRemaintime) return false;
      if (!hasStarttime) return false;
      if (!hasUsedtime) return false;
      if (!hasStoptime) return false;
      if (!hasMac) return false;
      if (!hasIp) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _structRealTimeFieldNames;
    if (hasComputerid) {
      output.WriteInt32(1, field_names[5], Computerid);
    }
    if (hasComputer) {
      output.WriteString(2, field_names[4], Computer);
    }
    if (hasArea) {
      output.WriteString(3, field_names[0], Area);
    }
    if (hasStatus) {
      output.WriteString(4, field_names[10], Status);
    }
    if (hasCardnumber) {
      output.WriteString(5, field_names[3], Cardnumber);
    }
    if (hasUsertype) {
      output.WriteString(6, field_names[13], Usertype);
    }
    if (hasBilling) {
      output.WriteString(7, field_names[2], Billing);
    }
    if (hasVerify) {
      output.WriteString(8, field_names[14], Verify);
    }
    if (hasBalance) {
      output.WriteString(9, field_names[1], Balance);
    }
    if (hasRemaintime) {
      output.WriteString(10, field_names[8], Remaintime);
    }
    if (hasStarttime) {
      output.WriteString(11, field_names[9], Starttime);
    }
    if (hasUsedtime) {
      output.WriteString(12, field_names[12], Usedtime);
    }
    if (hasStoptime) {
      output.WriteString(13, field_names[11], Stoptime);
    }
    if (hasMac) {
      output.WriteString(14, field_names[7], Mac);
    }
    if (hasIp) {
      output.WriteString(15, field_names[6], Ip);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasComputerid) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Computerid);
    }
    if (hasComputer) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Computer);
    }
    if (hasArea) {
      size += pb::CodedOutputStream.ComputeStringSize(3, Area);
    }
    if (hasStatus) {
      size += pb::CodedOutputStream.ComputeStringSize(4, Status);
    }
    if (hasCardnumber) {
      size += pb::CodedOutputStream.ComputeStringSize(5, Cardnumber);
    }
    if (hasUsertype) {
      size += pb::CodedOutputStream.ComputeStringSize(6, Usertype);
    }
    if (hasBilling) {
      size += pb::CodedOutputStream.ComputeStringSize(7, Billing);
    }
    if (hasVerify) {
      size += pb::CodedOutputStream.ComputeStringSize(8, Verify);
    }
    if (hasBalance) {
      size += pb::CodedOutputStream.ComputeStringSize(9, Balance);
    }
    if (hasRemaintime) {
      size += pb::CodedOutputStream.ComputeStringSize(10, Remaintime);
    }
    if (hasStarttime) {
      size += pb::CodedOutputStream.ComputeStringSize(11, Starttime);
    }
    if (hasUsedtime) {
      size += pb::CodedOutputStream.ComputeStringSize(12, Usedtime);
    }
    if (hasStoptime) {
      size += pb::CodedOutputStream.ComputeStringSize(13, Stoptime);
    }
    if (hasMac) {
      size += pb::CodedOutputStream.ComputeStringSize(14, Mac);
    }
    if (hasIp) {
      size += pb::CodedOutputStream.ComputeStringSize(15, Ip);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static StructRealTime ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static StructRealTime ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static StructRealTime ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static StructRealTime ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static StructRealTime ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static StructRealTime ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static StructRealTime ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static StructRealTime ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static StructRealTime ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static StructRealTime ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private StructRealTime MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(StructRealTime prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<StructRealTime, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(StructRealTime cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private StructRealTime result;
    
    private StructRealTime PrepareBuilder() {
      if (resultIsReadOnly) {
        StructRealTime original = result;
        result = new StructRealTime();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override StructRealTime MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::StructRealTime.Descriptor; }
    }
    
    public override StructRealTime DefaultInstanceForType {
      get { return global::StructRealTime.DefaultInstance; }
    }
    
    public override StructRealTime BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is StructRealTime) {
        return MergeFrom((StructRealTime) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(StructRealTime other) {
      if (other == global::StructRealTime.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasComputerid) {
        Computerid = other.Computerid;
      }
      if (other.HasComputer) {
        Computer = other.Computer;
      }
      if (other.HasArea) {
        Area = other.Area;
      }
      if (other.HasStatus) {
        Status = other.Status;
      }
      if (other.HasCardnumber) {
        Cardnumber = other.Cardnumber;
      }
      if (other.HasUsertype) {
        Usertype = other.Usertype;
      }
      if (other.HasBilling) {
        Billing = other.Billing;
      }
      if (other.HasVerify) {
        Verify = other.Verify;
      }
      if (other.HasBalance) {
        Balance = other.Balance;
      }
      if (other.HasRemaintime) {
        Remaintime = other.Remaintime;
      }
      if (other.HasStarttime) {
        Starttime = other.Starttime;
      }
      if (other.HasUsedtime) {
        Usedtime = other.Usedtime;
      }
      if (other.HasStoptime) {
        Stoptime = other.Stoptime;
      }
      if (other.HasMac) {
        Mac = other.Mac;
      }
      if (other.HasIp) {
        Ip = other.Ip;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_structRealTimeFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _structRealTimeFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasComputerid = input.ReadInt32(ref result.computerid_);
            break;
          }
          case 18: {
            result.hasComputer = input.ReadString(ref result.computer_);
            break;
          }
          case 26: {
            result.hasArea = input.ReadString(ref result.area_);
            break;
          }
          case 34: {
            result.hasStatus = input.ReadString(ref result.status_);
            break;
          }
          case 42: {
            result.hasCardnumber = input.ReadString(ref result.cardnumber_);
            break;
          }
          case 50: {
            result.hasUsertype = input.ReadString(ref result.usertype_);
            break;
          }
          case 58: {
            result.hasBilling = input.ReadString(ref result.billing_);
            break;
          }
          case 66: {
            result.hasVerify = input.ReadString(ref result.verify_);
            break;
          }
          case 74: {
            result.hasBalance = input.ReadString(ref result.balance_);
            break;
          }
          case 82: {
            result.hasRemaintime = input.ReadString(ref result.remaintime_);
            break;
          }
          case 90: {
            result.hasStarttime = input.ReadString(ref result.starttime_);
            break;
          }
          case 98: {
            result.hasUsedtime = input.ReadString(ref result.usedtime_);
            break;
          }
          case 106: {
            result.hasStoptime = input.ReadString(ref result.stoptime_);
            break;
          }
          case 114: {
            result.hasMac = input.ReadString(ref result.mac_);
            break;
          }
          case 122: {
            result.hasIp = input.ReadString(ref result.ip_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasComputerid {
      get { return result.hasComputerid; }
    }
    public int Computerid {
      get { return result.Computerid; }
      set { SetComputerid(value); }
    }
    public Builder SetComputerid(int value) {
      PrepareBuilder();
      result.hasComputerid = true;
      result.computerid_ = value;
      return this;
    }
    public Builder ClearComputerid() {
      PrepareBuilder();
      result.hasComputerid = false;
      result.computerid_ = 0;
      return this;
    }
    
    public bool HasComputer {
      get { return result.hasComputer; }
    }
    public string Computer {
      get { return result.Computer; }
      set { SetComputer(value); }
    }
    public Builder SetComputer(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasComputer = true;
      result.computer_ = value;
      return this;
    }
    public Builder ClearComputer() {
      PrepareBuilder();
      result.hasComputer = false;
      result.computer_ = "";
      return this;
    }
    
    public bool HasArea {
      get { return result.hasArea; }
    }
    public string Area {
      get { return result.Area; }
      set { SetArea(value); }
    }
    public Builder SetArea(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasArea = true;
      result.area_ = value;
      return this;
    }
    public Builder ClearArea() {
      PrepareBuilder();
      result.hasArea = false;
      result.area_ = "";
      return this;
    }
    
    public bool HasStatus {
      get { return result.hasStatus; }
    }
    public string Status {
      get { return result.Status; }
      set { SetStatus(value); }
    }
    public Builder SetStatus(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = value;
      return this;
    }
    public Builder ClearStatus() {
      PrepareBuilder();
      result.hasStatus = false;
      result.status_ = "";
      return this;
    }
    
    public bool HasCardnumber {
      get { return result.hasCardnumber; }
    }
    public string Cardnumber {
      get { return result.Cardnumber; }
      set { SetCardnumber(value); }
    }
    public Builder SetCardnumber(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCardnumber = true;
      result.cardnumber_ = value;
      return this;
    }
    public Builder ClearCardnumber() {
      PrepareBuilder();
      result.hasCardnumber = false;
      result.cardnumber_ = "";
      return this;
    }
    
    public bool HasUsertype {
      get { return result.hasUsertype; }
    }
    public string Usertype {
      get { return result.Usertype; }
      set { SetUsertype(value); }
    }
    public Builder SetUsertype(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasUsertype = true;
      result.usertype_ = value;
      return this;
    }
    public Builder ClearUsertype() {
      PrepareBuilder();
      result.hasUsertype = false;
      result.usertype_ = "";
      return this;
    }
    
    public bool HasBilling {
      get { return result.hasBilling; }
    }
    public string Billing {
      get { return result.Billing; }
      set { SetBilling(value); }
    }
    public Builder SetBilling(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasBilling = true;
      result.billing_ = value;
      return this;
    }
    public Builder ClearBilling() {
      PrepareBuilder();
      result.hasBilling = false;
      result.billing_ = "";
      return this;
    }
    
    public bool HasVerify {
      get { return result.hasVerify; }
    }
    public string Verify {
      get { return result.Verify; }
      set { SetVerify(value); }
    }
    public Builder SetVerify(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasVerify = true;
      result.verify_ = value;
      return this;
    }
    public Builder ClearVerify() {
      PrepareBuilder();
      result.hasVerify = false;
      result.verify_ = "";
      return this;
    }
    
    public bool HasBalance {
      get { return result.hasBalance; }
    }
    public string Balance {
      get { return result.Balance; }
      set { SetBalance(value); }
    }
    public Builder SetBalance(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasBalance = true;
      result.balance_ = value;
      return this;
    }
    public Builder ClearBalance() {
      PrepareBuilder();
      result.hasBalance = false;
      result.balance_ = "";
      return this;
    }
    
    public bool HasRemaintime {
      get { return result.hasRemaintime; }
    }
    public string Remaintime {
      get { return result.Remaintime; }
      set { SetRemaintime(value); }
    }
    public Builder SetRemaintime(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasRemaintime = true;
      result.remaintime_ = value;
      return this;
    }
    public Builder ClearRemaintime() {
      PrepareBuilder();
      result.hasRemaintime = false;
      result.remaintime_ = "";
      return this;
    }
    
    public bool HasStarttime {
      get { return result.hasStarttime; }
    }
    public string Starttime {
      get { return result.Starttime; }
      set { SetStarttime(value); }
    }
    public Builder SetStarttime(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasStarttime = true;
      result.starttime_ = value;
      return this;
    }
    public Builder ClearStarttime() {
      PrepareBuilder();
      result.hasStarttime = false;
      result.starttime_ = "";
      return this;
    }
    
    public bool HasUsedtime {
      get { return result.hasUsedtime; }
    }
    public string Usedtime {
      get { return result.Usedtime; }
      set { SetUsedtime(value); }
    }
    public Builder SetUsedtime(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasUsedtime = true;
      result.usedtime_ = value;
      return this;
    }
    public Builder ClearUsedtime() {
      PrepareBuilder();
      result.hasUsedtime = false;
      result.usedtime_ = "";
      return this;
    }
    
    public bool HasStoptime {
      get { return result.hasStoptime; }
    }
    public string Stoptime {
      get { return result.Stoptime; }
      set { SetStoptime(value); }
    }
    public Builder SetStoptime(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasStoptime = true;
      result.stoptime_ = value;
      return this;
    }
    public Builder ClearStoptime() {
      PrepareBuilder();
      result.hasStoptime = false;
      result.stoptime_ = "";
      return this;
    }
    
    public bool HasMac {
      get { return result.hasMac; }
    }
    public string Mac {
      get { return result.Mac; }
      set { SetMac(value); }
    }
    public Builder SetMac(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasMac = true;
      result.mac_ = value;
      return this;
    }
    public Builder ClearMac() {
      PrepareBuilder();
      result.hasMac = false;
      result.mac_ = "";
      return this;
    }
    
    public bool HasIp {
      get { return result.hasIp; }
    }
    public string Ip {
      get { return result.Ip; }
      set { SetIp(value); }
    }
    public Builder SetIp(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasIp = true;
      result.ip_ = value;
      return this;
    }
    public Builder ClearIp() {
      PrepareBuilder();
      result.hasIp = false;
      result.ip_ = "";
      return this;
    }
  }
  static StructRealTime() {
    object.ReferenceEquals(global::BaseStruct.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class StructCard : pb::GeneratedMessage<StructCard, StructCard.Builder> {
  private StructCard() { }
  private static readonly StructCard defaultInstance = new StructCard().MakeReadOnly();
  private static readonly string[] _structCardFieldNames = new string[] { "address", "birthday", "gender", "headUrl", "name", "nation", "number", "organization", "vld" };
  private static readonly uint[] _structCardFieldTags = new uint[] { 58, 42, 16, 74, 10, 26, 34, 66, 50 };
  public static StructCard DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override StructCard DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override StructCard ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::BaseStruct.internal__static_StructCard__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<StructCard, StructCard.Builder> InternalFieldAccessors {
    get { return global::BaseStruct.internal__static_StructCard__FieldAccessorTable; }
  }
  
  public const int NameFieldNumber = 1;
  private bool hasName;
  private string name_ = "";
  public bool HasName {
    get { return hasName; }
  }
  public string Name {
    get { return name_; }
  }
  
  public const int GenderFieldNumber = 2;
  private bool hasGender;
  private int gender_;
  public bool HasGender {
    get { return hasGender; }
  }
  public int Gender {
    get { return gender_; }
  }
  
  public const int NationFieldNumber = 3;
  private bool hasNation;
  private string nation_ = "";
  public bool HasNation {
    get { return hasNation; }
  }
  public string Nation {
    get { return nation_; }
  }
  
  public const int NumberFieldNumber = 4;
  private bool hasNumber;
  private string number_ = "";
  public bool HasNumber {
    get { return hasNumber; }
  }
  public string Number {
    get { return number_; }
  }
  
  public const int BirthdayFieldNumber = 5;
  private bool hasBirthday;
  private string birthday_ = "";
  public bool HasBirthday {
    get { return hasBirthday; }
  }
  public string Birthday {
    get { return birthday_; }
  }
  
  public const int VldFieldNumber = 6;
  private bool hasVld;
  private string vld_ = "";
  public bool HasVld {
    get { return hasVld; }
  }
  public string Vld {
    get { return vld_; }
  }
  
  public const int AddressFieldNumber = 7;
  private bool hasAddress;
  private string address_ = "";
  public bool HasAddress {
    get { return hasAddress; }
  }
  public string Address {
    get { return address_; }
  }
  
  public const int OrganizationFieldNumber = 8;
  private bool hasOrganization;
  private string organization_ = "";
  public bool HasOrganization {
    get { return hasOrganization; }
  }
  public string Organization {
    get { return organization_; }
  }
  
  public const int HeadUrlFieldNumber = 9;
  private bool hasHeadUrl;
  private string headUrl_ = "";
  public bool HasHeadUrl {
    get { return hasHeadUrl; }
  }
  public string HeadUrl {
    get { return headUrl_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasName) return false;
      if (!hasGender) return false;
      if (!hasNation) return false;
      if (!hasNumber) return false;
      if (!hasBirthday) return false;
      if (!hasVld) return false;
      if (!hasAddress) return false;
      if (!hasOrganization) return false;
      if (!hasHeadUrl) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _structCardFieldNames;
    if (hasName) {
      output.WriteString(1, field_names[4], Name);
    }
    if (hasGender) {
      output.WriteInt32(2, field_names[2], Gender);
    }
    if (hasNation) {
      output.WriteString(3, field_names[5], Nation);
    }
    if (hasNumber) {
      output.WriteString(4, field_names[6], Number);
    }
    if (hasBirthday) {
      output.WriteString(5, field_names[1], Birthday);
    }
    if (hasVld) {
      output.WriteString(6, field_names[8], Vld);
    }
    if (hasAddress) {
      output.WriteString(7, field_names[0], Address);
    }
    if (hasOrganization) {
      output.WriteString(8, field_names[7], Organization);
    }
    if (hasHeadUrl) {
      output.WriteString(9, field_names[3], HeadUrl);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasName) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Name);
    }
    if (hasGender) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Gender);
    }
    if (hasNation) {
      size += pb::CodedOutputStream.ComputeStringSize(3, Nation);
    }
    if (hasNumber) {
      size += pb::CodedOutputStream.ComputeStringSize(4, Number);
    }
    if (hasBirthday) {
      size += pb::CodedOutputStream.ComputeStringSize(5, Birthday);
    }
    if (hasVld) {
      size += pb::CodedOutputStream.ComputeStringSize(6, Vld);
    }
    if (hasAddress) {
      size += pb::CodedOutputStream.ComputeStringSize(7, Address);
    }
    if (hasOrganization) {
      size += pb::CodedOutputStream.ComputeStringSize(8, Organization);
    }
    if (hasHeadUrl) {
      size += pb::CodedOutputStream.ComputeStringSize(9, HeadUrl);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static StructCard ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static StructCard ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static StructCard ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static StructCard ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static StructCard ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static StructCard ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static StructCard ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static StructCard ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static StructCard ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static StructCard ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private StructCard MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(StructCard prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<StructCard, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(StructCard cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private StructCard result;
    
    private StructCard PrepareBuilder() {
      if (resultIsReadOnly) {
        StructCard original = result;
        result = new StructCard();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override StructCard MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::StructCard.Descriptor; }
    }
    
    public override StructCard DefaultInstanceForType {
      get { return global::StructCard.DefaultInstance; }
    }
    
    public override StructCard BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is StructCard) {
        return MergeFrom((StructCard) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(StructCard other) {
      if (other == global::StructCard.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasGender) {
        Gender = other.Gender;
      }
      if (other.HasNation) {
        Nation = other.Nation;
      }
      if (other.HasNumber) {
        Number = other.Number;
      }
      if (other.HasBirthday) {
        Birthday = other.Birthday;
      }
      if (other.HasVld) {
        Vld = other.Vld;
      }
      if (other.HasAddress) {
        Address = other.Address;
      }
      if (other.HasOrganization) {
        Organization = other.Organization;
      }
      if (other.HasHeadUrl) {
        HeadUrl = other.HeadUrl;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_structCardFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _structCardFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasName = input.ReadString(ref result.name_);
            break;
          }
          case 16: {
            result.hasGender = input.ReadInt32(ref result.gender_);
            break;
          }
          case 26: {
            result.hasNation = input.ReadString(ref result.nation_);
            break;
          }
          case 34: {
            result.hasNumber = input.ReadString(ref result.number_);
            break;
          }
          case 42: {
            result.hasBirthday = input.ReadString(ref result.birthday_);
            break;
          }
          case 50: {
            result.hasVld = input.ReadString(ref result.vld_);
            break;
          }
          case 58: {
            result.hasAddress = input.ReadString(ref result.address_);
            break;
          }
          case 66: {
            result.hasOrganization = input.ReadString(ref result.organization_);
            break;
          }
          case 74: {
            result.hasHeadUrl = input.ReadString(ref result.headUrl_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasName {
      get { return result.hasName; }
    }
    public string Name {
      get { return result.Name; }
      set { SetName(value); }
    }
    public Builder SetName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasName = true;
      result.name_ = value;
      return this;
    }
    public Builder ClearName() {
      PrepareBuilder();
      result.hasName = false;
      result.name_ = "";
      return this;
    }
    
    public bool HasGender {
      get { return result.hasGender; }
    }
    public int Gender {
      get { return result.Gender; }
      set { SetGender(value); }
    }
    public Builder SetGender(int value) {
      PrepareBuilder();
      result.hasGender = true;
      result.gender_ = value;
      return this;
    }
    public Builder ClearGender() {
      PrepareBuilder();
      result.hasGender = false;
      result.gender_ = 0;
      return this;
    }
    
    public bool HasNation {
      get { return result.hasNation; }
    }
    public string Nation {
      get { return result.Nation; }
      set { SetNation(value); }
    }
    public Builder SetNation(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasNation = true;
      result.nation_ = value;
      return this;
    }
    public Builder ClearNation() {
      PrepareBuilder();
      result.hasNation = false;
      result.nation_ = "";
      return this;
    }
    
    public bool HasNumber {
      get { return result.hasNumber; }
    }
    public string Number {
      get { return result.Number; }
      set { SetNumber(value); }
    }
    public Builder SetNumber(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasNumber = true;
      result.number_ = value;
      return this;
    }
    public Builder ClearNumber() {
      PrepareBuilder();
      result.hasNumber = false;
      result.number_ = "";
      return this;
    }
    
    public bool HasBirthday {
      get { return result.hasBirthday; }
    }
    public string Birthday {
      get { return result.Birthday; }
      set { SetBirthday(value); }
    }
    public Builder SetBirthday(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasBirthday = true;
      result.birthday_ = value;
      return this;
    }
    public Builder ClearBirthday() {
      PrepareBuilder();
      result.hasBirthday = false;
      result.birthday_ = "";
      return this;
    }
    
    public bool HasVld {
      get { return result.hasVld; }
    }
    public string Vld {
      get { return result.Vld; }
      set { SetVld(value); }
    }
    public Builder SetVld(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasVld = true;
      result.vld_ = value;
      return this;
    }
    public Builder ClearVld() {
      PrepareBuilder();
      result.hasVld = false;
      result.vld_ = "";
      return this;
    }
    
    public bool HasAddress {
      get { return result.hasAddress; }
    }
    public string Address {
      get { return result.Address; }
      set { SetAddress(value); }
    }
    public Builder SetAddress(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasAddress = true;
      result.address_ = value;
      return this;
    }
    public Builder ClearAddress() {
      PrepareBuilder();
      result.hasAddress = false;
      result.address_ = "";
      return this;
    }
    
    public bool HasOrganization {
      get { return result.hasOrganization; }
    }
    public string Organization {
      get { return result.Organization; }
      set { SetOrganization(value); }
    }
    public Builder SetOrganization(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasOrganization = true;
      result.organization_ = value;
      return this;
    }
    public Builder ClearOrganization() {
      PrepareBuilder();
      result.hasOrganization = false;
      result.organization_ = "";
      return this;
    }
    
    public bool HasHeadUrl {
      get { return result.hasHeadUrl; }
    }
    public string HeadUrl {
      get { return result.HeadUrl; }
      set { SetHeadUrl(value); }
    }
    public Builder SetHeadUrl(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasHeadUrl = true;
      result.headUrl_ = value;
      return this;
    }
    public Builder ClearHeadUrl() {
      PrepareBuilder();
      result.hasHeadUrl = false;
      result.headUrl_ = "";
      return this;
    }
  }
  static StructCard() {
    object.ReferenceEquals(global::BaseStruct.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class StructMember : pb::GeneratedMessage<StructMember, StructMember.Builder> {
  private StructMember() { }
  private static readonly StructMember defaultInstance = new StructMember().MakeReadOnly();
  private static readonly string[] _structMemberFieldNames = new string[] { "balance", "cardnumber", "gender", "integal", "lasttime", "memberid", "membertype", "name", "opentime", "phone", "status", "totalBonus", "totalRecharge", "usedIntegal", "verify" };
  private static readonly uint[] _structMemberFieldTags = new uint[] { 72, 18, 26, 96, 66, 8, 40, 34, 58, 50, 112, 88, 80, 104, 120 };
  public static StructMember DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override StructMember DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override StructMember ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::BaseStruct.internal__static_StructMember__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<StructMember, StructMember.Builder> InternalFieldAccessors {
    get { return global::BaseStruct.internal__static_StructMember__FieldAccessorTable; }
  }
  
  public const int MemberidFieldNumber = 1;
  private bool hasMemberid;
  private int memberid_;
  public bool HasMemberid {
    get { return hasMemberid; }
  }
  public int Memberid {
    get { return memberid_; }
  }
  
  public const int CardnumberFieldNumber = 2;
  private bool hasCardnumber;
  private string cardnumber_ = "";
  public bool HasCardnumber {
    get { return hasCardnumber; }
  }
  public string Cardnumber {
    get { return cardnumber_; }
  }
  
  public const int GenderFieldNumber = 3;
  private bool hasGender;
  private string gender_ = "";
  public bool HasGender {
    get { return hasGender; }
  }
  public string Gender {
    get { return gender_; }
  }
  
  public const int NameFieldNumber = 4;
  private bool hasName;
  private string name_ = "";
  public bool HasName {
    get { return hasName; }
  }
  public string Name {
    get { return name_; }
  }
  
  public const int MembertypeFieldNumber = 5;
  private bool hasMembertype;
  private int membertype_;
  public bool HasMembertype {
    get { return hasMembertype; }
  }
  public int Membertype {
    get { return membertype_; }
  }
  
  public const int PhoneFieldNumber = 6;
  private bool hasPhone;
  private string phone_ = "";
  public bool HasPhone {
    get { return hasPhone; }
  }
  public string Phone {
    get { return phone_; }
  }
  
  public const int OpentimeFieldNumber = 7;
  private bool hasOpentime;
  private string opentime_ = "";
  public bool HasOpentime {
    get { return hasOpentime; }
  }
  public string Opentime {
    get { return opentime_; }
  }
  
  public const int LasttimeFieldNumber = 8;
  private bool hasLasttime;
  private string lasttime_ = "";
  public bool HasLasttime {
    get { return hasLasttime; }
  }
  public string Lasttime {
    get { return lasttime_; }
  }
  
  public const int BalanceFieldNumber = 9;
  private bool hasBalance;
  private int balance_;
  public bool HasBalance {
    get { return hasBalance; }
  }
  public int Balance {
    get { return balance_; }
  }
  
  public const int TotalRechargeFieldNumber = 10;
  private bool hasTotalRecharge;
  private int totalRecharge_;
  public bool HasTotalRecharge {
    get { return hasTotalRecharge; }
  }
  public int TotalRecharge {
    get { return totalRecharge_; }
  }
  
  public const int TotalBonusFieldNumber = 11;
  private bool hasTotalBonus;
  private int totalBonus_;
  public bool HasTotalBonus {
    get { return hasTotalBonus; }
  }
  public int TotalBonus {
    get { return totalBonus_; }
  }
  
  public const int IntegalFieldNumber = 12;
  private bool hasIntegal;
  private int integal_;
  public bool HasIntegal {
    get { return hasIntegal; }
  }
  public int Integal {
    get { return integal_; }
  }
  
  public const int UsedIntegalFieldNumber = 13;
  private bool hasUsedIntegal;
  private int usedIntegal_;
  public bool HasUsedIntegal {
    get { return hasUsedIntegal; }
  }
  public int UsedIntegal {
    get { return usedIntegal_; }
  }
  
  public const int StatusFieldNumber = 14;
  private bool hasStatus;
  private int status_;
  public bool HasStatus {
    get { return hasStatus; }
  }
  public int Status {
    get { return status_; }
  }
  
  public const int VerifyFieldNumber = 15;
  private bool hasVerify;
  private int verify_;
  public bool HasVerify {
    get { return hasVerify; }
  }
  public int Verify {
    get { return verify_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasMemberid) return false;
      if (!hasCardnumber) return false;
      if (!hasGender) return false;
      if (!hasName) return false;
      if (!hasMembertype) return false;
      if (!hasPhone) return false;
      if (!hasOpentime) return false;
      if (!hasLasttime) return false;
      if (!hasBalance) return false;
      if (!hasTotalRecharge) return false;
      if (!hasTotalBonus) return false;
      if (!hasIntegal) return false;
      if (!hasUsedIntegal) return false;
      if (!hasStatus) return false;
      if (!hasVerify) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _structMemberFieldNames;
    if (hasMemberid) {
      output.WriteInt32(1, field_names[5], Memberid);
    }
    if (hasCardnumber) {
      output.WriteString(2, field_names[1], Cardnumber);
    }
    if (hasGender) {
      output.WriteString(3, field_names[2], Gender);
    }
    if (hasName) {
      output.WriteString(4, field_names[7], Name);
    }
    if (hasMembertype) {
      output.WriteInt32(5, field_names[6], Membertype);
    }
    if (hasPhone) {
      output.WriteString(6, field_names[9], Phone);
    }
    if (hasOpentime) {
      output.WriteString(7, field_names[8], Opentime);
    }
    if (hasLasttime) {
      output.WriteString(8, field_names[4], Lasttime);
    }
    if (hasBalance) {
      output.WriteInt32(9, field_names[0], Balance);
    }
    if (hasTotalRecharge) {
      output.WriteInt32(10, field_names[12], TotalRecharge);
    }
    if (hasTotalBonus) {
      output.WriteInt32(11, field_names[11], TotalBonus);
    }
    if (hasIntegal) {
      output.WriteInt32(12, field_names[3], Integal);
    }
    if (hasUsedIntegal) {
      output.WriteInt32(13, field_names[13], UsedIntegal);
    }
    if (hasStatus) {
      output.WriteInt32(14, field_names[10], Status);
    }
    if (hasVerify) {
      output.WriteInt32(15, field_names[14], Verify);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasMemberid) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Memberid);
    }
    if (hasCardnumber) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Cardnumber);
    }
    if (hasGender) {
      size += pb::CodedOutputStream.ComputeStringSize(3, Gender);
    }
    if (hasName) {
      size += pb::CodedOutputStream.ComputeStringSize(4, Name);
    }
    if (hasMembertype) {
      size += pb::CodedOutputStream.ComputeInt32Size(5, Membertype);
    }
    if (hasPhone) {
      size += pb::CodedOutputStream.ComputeStringSize(6, Phone);
    }
    if (hasOpentime) {
      size += pb::CodedOutputStream.ComputeStringSize(7, Opentime);
    }
    if (hasLasttime) {
      size += pb::CodedOutputStream.ComputeStringSize(8, Lasttime);
    }
    if (hasBalance) {
      size += pb::CodedOutputStream.ComputeInt32Size(9, Balance);
    }
    if (hasTotalRecharge) {
      size += pb::CodedOutputStream.ComputeInt32Size(10, TotalRecharge);
    }
    if (hasTotalBonus) {
      size += pb::CodedOutputStream.ComputeInt32Size(11, TotalBonus);
    }
    if (hasIntegal) {
      size += pb::CodedOutputStream.ComputeInt32Size(12, Integal);
    }
    if (hasUsedIntegal) {
      size += pb::CodedOutputStream.ComputeInt32Size(13, UsedIntegal);
    }
    if (hasStatus) {
      size += pb::CodedOutputStream.ComputeInt32Size(14, Status);
    }
    if (hasVerify) {
      size += pb::CodedOutputStream.ComputeInt32Size(15, Verify);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static StructMember ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static StructMember ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static StructMember ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static StructMember ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static StructMember ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static StructMember ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static StructMember ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static StructMember ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static StructMember ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static StructMember ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private StructMember MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(StructMember prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<StructMember, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(StructMember cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private StructMember result;
    
    private StructMember PrepareBuilder() {
      if (resultIsReadOnly) {
        StructMember original = result;
        result = new StructMember();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override StructMember MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::StructMember.Descriptor; }
    }
    
    public override StructMember DefaultInstanceForType {
      get { return global::StructMember.DefaultInstance; }
    }
    
    public override StructMember BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is StructMember) {
        return MergeFrom((StructMember) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(StructMember other) {
      if (other == global::StructMember.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasMemberid) {
        Memberid = other.Memberid;
      }
      if (other.HasCardnumber) {
        Cardnumber = other.Cardnumber;
      }
      if (other.HasGender) {
        Gender = other.Gender;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasMembertype) {
        Membertype = other.Membertype;
      }
      if (other.HasPhone) {
        Phone = other.Phone;
      }
      if (other.HasOpentime) {
        Opentime = other.Opentime;
      }
      if (other.HasLasttime) {
        Lasttime = other.Lasttime;
      }
      if (other.HasBalance) {
        Balance = other.Balance;
      }
      if (other.HasTotalRecharge) {
        TotalRecharge = other.TotalRecharge;
      }
      if (other.HasTotalBonus) {
        TotalBonus = other.TotalBonus;
      }
      if (other.HasIntegal) {
        Integal = other.Integal;
      }
      if (other.HasUsedIntegal) {
        UsedIntegal = other.UsedIntegal;
      }
      if (other.HasStatus) {
        Status = other.Status;
      }
      if (other.HasVerify) {
        Verify = other.Verify;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_structMemberFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _structMemberFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasMemberid = input.ReadInt32(ref result.memberid_);
            break;
          }
          case 18: {
            result.hasCardnumber = input.ReadString(ref result.cardnumber_);
            break;
          }
          case 26: {
            result.hasGender = input.ReadString(ref result.gender_);
            break;
          }
          case 34: {
            result.hasName = input.ReadString(ref result.name_);
            break;
          }
          case 40: {
            result.hasMembertype = input.ReadInt32(ref result.membertype_);
            break;
          }
          case 50: {
            result.hasPhone = input.ReadString(ref result.phone_);
            break;
          }
          case 58: {
            result.hasOpentime = input.ReadString(ref result.opentime_);
            break;
          }
          case 66: {
            result.hasLasttime = input.ReadString(ref result.lasttime_);
            break;
          }
          case 72: {
            result.hasBalance = input.ReadInt32(ref result.balance_);
            break;
          }
          case 80: {
            result.hasTotalRecharge = input.ReadInt32(ref result.totalRecharge_);
            break;
          }
          case 88: {
            result.hasTotalBonus = input.ReadInt32(ref result.totalBonus_);
            break;
          }
          case 96: {
            result.hasIntegal = input.ReadInt32(ref result.integal_);
            break;
          }
          case 104: {
            result.hasUsedIntegal = input.ReadInt32(ref result.usedIntegal_);
            break;
          }
          case 112: {
            result.hasStatus = input.ReadInt32(ref result.status_);
            break;
          }
          case 120: {
            result.hasVerify = input.ReadInt32(ref result.verify_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasMemberid {
      get { return result.hasMemberid; }
    }
    public int Memberid {
      get { return result.Memberid; }
      set { SetMemberid(value); }
    }
    public Builder SetMemberid(int value) {
      PrepareBuilder();
      result.hasMemberid = true;
      result.memberid_ = value;
      return this;
    }
    public Builder ClearMemberid() {
      PrepareBuilder();
      result.hasMemberid = false;
      result.memberid_ = 0;
      return this;
    }
    
    public bool HasCardnumber {
      get { return result.hasCardnumber; }
    }
    public string Cardnumber {
      get { return result.Cardnumber; }
      set { SetCardnumber(value); }
    }
    public Builder SetCardnumber(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCardnumber = true;
      result.cardnumber_ = value;
      return this;
    }
    public Builder ClearCardnumber() {
      PrepareBuilder();
      result.hasCardnumber = false;
      result.cardnumber_ = "";
      return this;
    }
    
    public bool HasGender {
      get { return result.hasGender; }
    }
    public string Gender {
      get { return result.Gender; }
      set { SetGender(value); }
    }
    public Builder SetGender(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasGender = true;
      result.gender_ = value;
      return this;
    }
    public Builder ClearGender() {
      PrepareBuilder();
      result.hasGender = false;
      result.gender_ = "";
      return this;
    }
    
    public bool HasName {
      get { return result.hasName; }
    }
    public string Name {
      get { return result.Name; }
      set { SetName(value); }
    }
    public Builder SetName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasName = true;
      result.name_ = value;
      return this;
    }
    public Builder ClearName() {
      PrepareBuilder();
      result.hasName = false;
      result.name_ = "";
      return this;
    }
    
    public bool HasMembertype {
      get { return result.hasMembertype; }
    }
    public int Membertype {
      get { return result.Membertype; }
      set { SetMembertype(value); }
    }
    public Builder SetMembertype(int value) {
      PrepareBuilder();
      result.hasMembertype = true;
      result.membertype_ = value;
      return this;
    }
    public Builder ClearMembertype() {
      PrepareBuilder();
      result.hasMembertype = false;
      result.membertype_ = 0;
      return this;
    }
    
    public bool HasPhone {
      get { return result.hasPhone; }
    }
    public string Phone {
      get { return result.Phone; }
      set { SetPhone(value); }
    }
    public Builder SetPhone(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPhone = true;
      result.phone_ = value;
      return this;
    }
    public Builder ClearPhone() {
      PrepareBuilder();
      result.hasPhone = false;
      result.phone_ = "";
      return this;
    }
    
    public bool HasOpentime {
      get { return result.hasOpentime; }
    }
    public string Opentime {
      get { return result.Opentime; }
      set { SetOpentime(value); }
    }
    public Builder SetOpentime(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasOpentime = true;
      result.opentime_ = value;
      return this;
    }
    public Builder ClearOpentime() {
      PrepareBuilder();
      result.hasOpentime = false;
      result.opentime_ = "";
      return this;
    }
    
    public bool HasLasttime {
      get { return result.hasLasttime; }
    }
    public string Lasttime {
      get { return result.Lasttime; }
      set { SetLasttime(value); }
    }
    public Builder SetLasttime(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasLasttime = true;
      result.lasttime_ = value;
      return this;
    }
    public Builder ClearLasttime() {
      PrepareBuilder();
      result.hasLasttime = false;
      result.lasttime_ = "";
      return this;
    }
    
    public bool HasBalance {
      get { return result.hasBalance; }
    }
    public int Balance {
      get { return result.Balance; }
      set { SetBalance(value); }
    }
    public Builder SetBalance(int value) {
      PrepareBuilder();
      result.hasBalance = true;
      result.balance_ = value;
      return this;
    }
    public Builder ClearBalance() {
      PrepareBuilder();
      result.hasBalance = false;
      result.balance_ = 0;
      return this;
    }
    
    public bool HasTotalRecharge {
      get { return result.hasTotalRecharge; }
    }
    public int TotalRecharge {
      get { return result.TotalRecharge; }
      set { SetTotalRecharge(value); }
    }
    public Builder SetTotalRecharge(int value) {
      PrepareBuilder();
      result.hasTotalRecharge = true;
      result.totalRecharge_ = value;
      return this;
    }
    public Builder ClearTotalRecharge() {
      PrepareBuilder();
      result.hasTotalRecharge = false;
      result.totalRecharge_ = 0;
      return this;
    }
    
    public bool HasTotalBonus {
      get { return result.hasTotalBonus; }
    }
    public int TotalBonus {
      get { return result.TotalBonus; }
      set { SetTotalBonus(value); }
    }
    public Builder SetTotalBonus(int value) {
      PrepareBuilder();
      result.hasTotalBonus = true;
      result.totalBonus_ = value;
      return this;
    }
    public Builder ClearTotalBonus() {
      PrepareBuilder();
      result.hasTotalBonus = false;
      result.totalBonus_ = 0;
      return this;
    }
    
    public bool HasIntegal {
      get { return result.hasIntegal; }
    }
    public int Integal {
      get { return result.Integal; }
      set { SetIntegal(value); }
    }
    public Builder SetIntegal(int value) {
      PrepareBuilder();
      result.hasIntegal = true;
      result.integal_ = value;
      return this;
    }
    public Builder ClearIntegal() {
      PrepareBuilder();
      result.hasIntegal = false;
      result.integal_ = 0;
      return this;
    }
    
    public bool HasUsedIntegal {
      get { return result.hasUsedIntegal; }
    }
    public int UsedIntegal {
      get { return result.UsedIntegal; }
      set { SetUsedIntegal(value); }
    }
    public Builder SetUsedIntegal(int value) {
      PrepareBuilder();
      result.hasUsedIntegal = true;
      result.usedIntegal_ = value;
      return this;
    }
    public Builder ClearUsedIntegal() {
      PrepareBuilder();
      result.hasUsedIntegal = false;
      result.usedIntegal_ = 0;
      return this;
    }
    
    public bool HasStatus {
      get { return result.hasStatus; }
    }
    public int Status {
      get { return result.Status; }
      set { SetStatus(value); }
    }
    public Builder SetStatus(int value) {
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = value;
      return this;
    }
    public Builder ClearStatus() {
      PrepareBuilder();
      result.hasStatus = false;
      result.status_ = 0;
      return this;
    }
    
    public bool HasVerify {
      get { return result.hasVerify; }
    }
    public int Verify {
      get { return result.Verify; }
      set { SetVerify(value); }
    }
    public Builder SetVerify(int value) {
      PrepareBuilder();
      result.hasVerify = true;
      result.verify_ = value;
      return this;
    }
    public Builder ClearVerify() {
      PrepareBuilder();
      result.hasVerify = false;
      result.verify_ = 0;
      return this;
    }
  }
  static StructMember() {
    object.ReferenceEquals(global::BaseStruct.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class StructPage : pb::GeneratedMessage<StructPage, StructPage.Builder> {
  private StructPage() { }
  private static readonly StructPage defaultInstance = new StructPage().MakeReadOnly();
  private static readonly string[] _structPageFieldNames = new string[] { "fieldname", "order", "pagebegin", "pagesize" };
  private static readonly uint[] _structPageFieldTags = new uint[] { 24, 32, 16, 8 };
  public static StructPage DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override StructPage DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override StructPage ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::BaseStruct.internal__static_StructPage__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<StructPage, StructPage.Builder> InternalFieldAccessors {
    get { return global::BaseStruct.internal__static_StructPage__FieldAccessorTable; }
  }
  
  public const int PagesizeFieldNumber = 1;
  private bool hasPagesize;
  private int pagesize_;
  public bool HasPagesize {
    get { return hasPagesize; }
  }
  public int Pagesize {
    get { return pagesize_; }
  }
  
  public const int PagebeginFieldNumber = 2;
  private bool hasPagebegin;
  private int pagebegin_;
  public bool HasPagebegin {
    get { return hasPagebegin; }
  }
  public int Pagebegin {
    get { return pagebegin_; }
  }
  
  public const int FieldnameFieldNumber = 3;
  private bool hasFieldname;
  private int fieldname_;
  public bool HasFieldname {
    get { return hasFieldname; }
  }
  public int Fieldname {
    get { return fieldname_; }
  }
  
  public const int OrderFieldNumber = 4;
  private bool hasOrder;
  private int order_;
  public bool HasOrder {
    get { return hasOrder; }
  }
  public int Order {
    get { return order_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasPagesize) return false;
      if (!hasPagebegin) return false;
      if (!hasFieldname) return false;
      if (!hasOrder) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _structPageFieldNames;
    if (hasPagesize) {
      output.WriteInt32(1, field_names[3], Pagesize);
    }
    if (hasPagebegin) {
      output.WriteInt32(2, field_names[2], Pagebegin);
    }
    if (hasFieldname) {
      output.WriteInt32(3, field_names[0], Fieldname);
    }
    if (hasOrder) {
      output.WriteInt32(4, field_names[1], Order);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPagesize) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Pagesize);
    }
    if (hasPagebegin) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Pagebegin);
    }
    if (hasFieldname) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, Fieldname);
    }
    if (hasOrder) {
      size += pb::CodedOutputStream.ComputeInt32Size(4, Order);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static StructPage ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static StructPage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static StructPage ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static StructPage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static StructPage ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static StructPage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static StructPage ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static StructPage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static StructPage ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static StructPage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private StructPage MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(StructPage prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<StructPage, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(StructPage cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private StructPage result;
    
    private StructPage PrepareBuilder() {
      if (resultIsReadOnly) {
        StructPage original = result;
        result = new StructPage();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override StructPage MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::StructPage.Descriptor; }
    }
    
    public override StructPage DefaultInstanceForType {
      get { return global::StructPage.DefaultInstance; }
    }
    
    public override StructPage BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is StructPage) {
        return MergeFrom((StructPage) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(StructPage other) {
      if (other == global::StructPage.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPagesize) {
        Pagesize = other.Pagesize;
      }
      if (other.HasPagebegin) {
        Pagebegin = other.Pagebegin;
      }
      if (other.HasFieldname) {
        Fieldname = other.Fieldname;
      }
      if (other.HasOrder) {
        Order = other.Order;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_structPageFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _structPageFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPagesize = input.ReadInt32(ref result.pagesize_);
            break;
          }
          case 16: {
            result.hasPagebegin = input.ReadInt32(ref result.pagebegin_);
            break;
          }
          case 24: {
            result.hasFieldname = input.ReadInt32(ref result.fieldname_);
            break;
          }
          case 32: {
            result.hasOrder = input.ReadInt32(ref result.order_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPagesize {
      get { return result.hasPagesize; }
    }
    public int Pagesize {
      get { return result.Pagesize; }
      set { SetPagesize(value); }
    }
    public Builder SetPagesize(int value) {
      PrepareBuilder();
      result.hasPagesize = true;
      result.pagesize_ = value;
      return this;
    }
    public Builder ClearPagesize() {
      PrepareBuilder();
      result.hasPagesize = false;
      result.pagesize_ = 0;
      return this;
    }
    
    public bool HasPagebegin {
      get { return result.hasPagebegin; }
    }
    public int Pagebegin {
      get { return result.Pagebegin; }
      set { SetPagebegin(value); }
    }
    public Builder SetPagebegin(int value) {
      PrepareBuilder();
      result.hasPagebegin = true;
      result.pagebegin_ = value;
      return this;
    }
    public Builder ClearPagebegin() {
      PrepareBuilder();
      result.hasPagebegin = false;
      result.pagebegin_ = 0;
      return this;
    }
    
    public bool HasFieldname {
      get { return result.hasFieldname; }
    }
    public int Fieldname {
      get { return result.Fieldname; }
      set { SetFieldname(value); }
    }
    public Builder SetFieldname(int value) {
      PrepareBuilder();
      result.hasFieldname = true;
      result.fieldname_ = value;
      return this;
    }
    public Builder ClearFieldname() {
      PrepareBuilder();
      result.hasFieldname = false;
      result.fieldname_ = 0;
      return this;
    }
    
    public bool HasOrder {
      get { return result.hasOrder; }
    }
    public int Order {
      get { return result.Order; }
      set { SetOrder(value); }
    }
    public Builder SetOrder(int value) {
      PrepareBuilder();
      result.hasOrder = true;
      result.order_ = value;
      return this;
    }
    public Builder ClearOrder() {
      PrepareBuilder();
      result.hasOrder = false;
      result.order_ = 0;
      return this;
    }
  }
  static StructPage() {
    object.ReferenceEquals(global::BaseStruct.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class StructUserArea : pb::GeneratedMessage<StructUserArea, StructUserArea.Builder> {
  private StructUserArea() { }
  private static readonly StructUserArea defaultInstance = new StructUserArea().MakeReadOnly();
  private static readonly string[] _structUserAreaFieldNames = new string[] { "areatype", "index", "nightInterval", "nightPrice", "ordinaryInterval", "ordinaryPrice", "usertype" };
  private static readonly uint[] _structUserAreaFieldTags = new uint[] { 16, 56, 48, 40, 32, 24, 8 };
  public static StructUserArea DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override StructUserArea DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override StructUserArea ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::BaseStruct.internal__static_StructUserArea__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<StructUserArea, StructUserArea.Builder> InternalFieldAccessors {
    get { return global::BaseStruct.internal__static_StructUserArea__FieldAccessorTable; }
  }
  
  public const int UsertypeFieldNumber = 1;
  private bool hasUsertype;
  private int usertype_;
  public bool HasUsertype {
    get { return hasUsertype; }
  }
  public int Usertype {
    get { return usertype_; }
  }
  
  public const int AreatypeFieldNumber = 2;
  private bool hasAreatype;
  private int areatype_;
  public bool HasAreatype {
    get { return hasAreatype; }
  }
  public int Areatype {
    get { return areatype_; }
  }
  
  public const int OrdinaryPriceFieldNumber = 3;
  private bool hasOrdinaryPrice;
  private int ordinaryPrice_;
  public bool HasOrdinaryPrice {
    get { return hasOrdinaryPrice; }
  }
  public int OrdinaryPrice {
    get { return ordinaryPrice_; }
  }
  
  public const int OrdinaryIntervalFieldNumber = 4;
  private bool hasOrdinaryInterval;
  private int ordinaryInterval_;
  public bool HasOrdinaryInterval {
    get { return hasOrdinaryInterval; }
  }
  public int OrdinaryInterval {
    get { return ordinaryInterval_; }
  }
  
  public const int NightPriceFieldNumber = 5;
  private bool hasNightPrice;
  private int nightPrice_;
  public bool HasNightPrice {
    get { return hasNightPrice; }
  }
  public int NightPrice {
    get { return nightPrice_; }
  }
  
  public const int NightIntervalFieldNumber = 6;
  private bool hasNightInterval;
  private int nightInterval_;
  public bool HasNightInterval {
    get { return hasNightInterval; }
  }
  public int NightInterval {
    get { return nightInterval_; }
  }
  
  public const int IndexFieldNumber = 7;
  private bool hasIndex;
  private int index_;
  public bool HasIndex {
    get { return hasIndex; }
  }
  public int Index {
    get { return index_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasUsertype) return false;
      if (!hasAreatype) return false;
      if (!hasOrdinaryPrice) return false;
      if (!hasOrdinaryInterval) return false;
      if (!hasNightPrice) return false;
      if (!hasNightInterval) return false;
      if (!hasIndex) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _structUserAreaFieldNames;
    if (hasUsertype) {
      output.WriteInt32(1, field_names[6], Usertype);
    }
    if (hasAreatype) {
      output.WriteInt32(2, field_names[0], Areatype);
    }
    if (hasOrdinaryPrice) {
      output.WriteInt32(3, field_names[5], OrdinaryPrice);
    }
    if (hasOrdinaryInterval) {
      output.WriteInt32(4, field_names[4], OrdinaryInterval);
    }
    if (hasNightPrice) {
      output.WriteInt32(5, field_names[3], NightPrice);
    }
    if (hasNightInterval) {
      output.WriteInt32(6, field_names[2], NightInterval);
    }
    if (hasIndex) {
      output.WriteInt32(7, field_names[1], Index);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasUsertype) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Usertype);
    }
    if (hasAreatype) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Areatype);
    }
    if (hasOrdinaryPrice) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, OrdinaryPrice);
    }
    if (hasOrdinaryInterval) {
      size += pb::CodedOutputStream.ComputeInt32Size(4, OrdinaryInterval);
    }
    if (hasNightPrice) {
      size += pb::CodedOutputStream.ComputeInt32Size(5, NightPrice);
    }
    if (hasNightInterval) {
      size += pb::CodedOutputStream.ComputeInt32Size(6, NightInterval);
    }
    if (hasIndex) {
      size += pb::CodedOutputStream.ComputeInt32Size(7, Index);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static StructUserArea ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static StructUserArea ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static StructUserArea ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static StructUserArea ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static StructUserArea ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static StructUserArea ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static StructUserArea ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static StructUserArea ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static StructUserArea ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static StructUserArea ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private StructUserArea MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(StructUserArea prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<StructUserArea, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(StructUserArea cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private StructUserArea result;
    
    private StructUserArea PrepareBuilder() {
      if (resultIsReadOnly) {
        StructUserArea original = result;
        result = new StructUserArea();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override StructUserArea MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::StructUserArea.Descriptor; }
    }
    
    public override StructUserArea DefaultInstanceForType {
      get { return global::StructUserArea.DefaultInstance; }
    }
    
    public override StructUserArea BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is StructUserArea) {
        return MergeFrom((StructUserArea) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(StructUserArea other) {
      if (other == global::StructUserArea.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasUsertype) {
        Usertype = other.Usertype;
      }
      if (other.HasAreatype) {
        Areatype = other.Areatype;
      }
      if (other.HasOrdinaryPrice) {
        OrdinaryPrice = other.OrdinaryPrice;
      }
      if (other.HasOrdinaryInterval) {
        OrdinaryInterval = other.OrdinaryInterval;
      }
      if (other.HasNightPrice) {
        NightPrice = other.NightPrice;
      }
      if (other.HasNightInterval) {
        NightInterval = other.NightInterval;
      }
      if (other.HasIndex) {
        Index = other.Index;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_structUserAreaFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _structUserAreaFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasUsertype = input.ReadInt32(ref result.usertype_);
            break;
          }
          case 16: {
            result.hasAreatype = input.ReadInt32(ref result.areatype_);
            break;
          }
          case 24: {
            result.hasOrdinaryPrice = input.ReadInt32(ref result.ordinaryPrice_);
            break;
          }
          case 32: {
            result.hasOrdinaryInterval = input.ReadInt32(ref result.ordinaryInterval_);
            break;
          }
          case 40: {
            result.hasNightPrice = input.ReadInt32(ref result.nightPrice_);
            break;
          }
          case 48: {
            result.hasNightInterval = input.ReadInt32(ref result.nightInterval_);
            break;
          }
          case 56: {
            result.hasIndex = input.ReadInt32(ref result.index_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasUsertype {
      get { return result.hasUsertype; }
    }
    public int Usertype {
      get { return result.Usertype; }
      set { SetUsertype(value); }
    }
    public Builder SetUsertype(int value) {
      PrepareBuilder();
      result.hasUsertype = true;
      result.usertype_ = value;
      return this;
    }
    public Builder ClearUsertype() {
      PrepareBuilder();
      result.hasUsertype = false;
      result.usertype_ = 0;
      return this;
    }
    
    public bool HasAreatype {
      get { return result.hasAreatype; }
    }
    public int Areatype {
      get { return result.Areatype; }
      set { SetAreatype(value); }
    }
    public Builder SetAreatype(int value) {
      PrepareBuilder();
      result.hasAreatype = true;
      result.areatype_ = value;
      return this;
    }
    public Builder ClearAreatype() {
      PrepareBuilder();
      result.hasAreatype = false;
      result.areatype_ = 0;
      return this;
    }
    
    public bool HasOrdinaryPrice {
      get { return result.hasOrdinaryPrice; }
    }
    public int OrdinaryPrice {
      get { return result.OrdinaryPrice; }
      set { SetOrdinaryPrice(value); }
    }
    public Builder SetOrdinaryPrice(int value) {
      PrepareBuilder();
      result.hasOrdinaryPrice = true;
      result.ordinaryPrice_ = value;
      return this;
    }
    public Builder ClearOrdinaryPrice() {
      PrepareBuilder();
      result.hasOrdinaryPrice = false;
      result.ordinaryPrice_ = 0;
      return this;
    }
    
    public bool HasOrdinaryInterval {
      get { return result.hasOrdinaryInterval; }
    }
    public int OrdinaryInterval {
      get { return result.OrdinaryInterval; }
      set { SetOrdinaryInterval(value); }
    }
    public Builder SetOrdinaryInterval(int value) {
      PrepareBuilder();
      result.hasOrdinaryInterval = true;
      result.ordinaryInterval_ = value;
      return this;
    }
    public Builder ClearOrdinaryInterval() {
      PrepareBuilder();
      result.hasOrdinaryInterval = false;
      result.ordinaryInterval_ = 0;
      return this;
    }
    
    public bool HasNightPrice {
      get { return result.hasNightPrice; }
    }
    public int NightPrice {
      get { return result.NightPrice; }
      set { SetNightPrice(value); }
    }
    public Builder SetNightPrice(int value) {
      PrepareBuilder();
      result.hasNightPrice = true;
      result.nightPrice_ = value;
      return this;
    }
    public Builder ClearNightPrice() {
      PrepareBuilder();
      result.hasNightPrice = false;
      result.nightPrice_ = 0;
      return this;
    }
    
    public bool HasNightInterval {
      get { return result.hasNightInterval; }
    }
    public int NightInterval {
      get { return result.NightInterval; }
      set { SetNightInterval(value); }
    }
    public Builder SetNightInterval(int value) {
      PrepareBuilder();
      result.hasNightInterval = true;
      result.nightInterval_ = value;
      return this;
    }
    public Builder ClearNightInterval() {
      PrepareBuilder();
      result.hasNightInterval = false;
      result.nightInterval_ = 0;
      return this;
    }
    
    public bool HasIndex {
      get { return result.hasIndex; }
    }
    public int Index {
      get { return result.Index; }
      set { SetIndex(value); }
    }
    public Builder SetIndex(int value) {
      PrepareBuilder();
      result.hasIndex = true;
      result.index_ = value;
      return this;
    }
    public Builder ClearIndex() {
      PrepareBuilder();
      result.hasIndex = false;
      result.index_ = 0;
      return this;
    }
  }
  static StructUserArea() {
    object.ReferenceEquals(global::BaseStruct.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class StructBillSetting : pb::GeneratedMessage<StructBillSetting, StructBillSetting.Builder> {
  private StructBillSetting() { }
  private static readonly StructBillSetting defaultInstance = new StructBillSetting().MakeReadOnly();
  private static readonly string[] _structBillSettingFieldNames = new string[] { "day0", "day1", "day2", "day3", "day4", "day5", "day6" };
  private static readonly uint[] _structBillSettingFieldTags = new uint[] { 8, 16, 24, 32, 40, 48, 56 };
  public static StructBillSetting DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override StructBillSetting DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override StructBillSetting ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::BaseStruct.internal__static_StructBillSetting__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<StructBillSetting, StructBillSetting.Builder> InternalFieldAccessors {
    get { return global::BaseStruct.internal__static_StructBillSetting__FieldAccessorTable; }
  }
  
  public const int Day0FieldNumber = 1;
  private bool hasDay0;
  private int day0_;
  public bool HasDay0 {
    get { return hasDay0; }
  }
  public int Day0 {
    get { return day0_; }
  }
  
  public const int Day1FieldNumber = 2;
  private bool hasDay1;
  private int day1_;
  public bool HasDay1 {
    get { return hasDay1; }
  }
  public int Day1 {
    get { return day1_; }
  }
  
  public const int Day2FieldNumber = 3;
  private bool hasDay2;
  private int day2_;
  public bool HasDay2 {
    get { return hasDay2; }
  }
  public int Day2 {
    get { return day2_; }
  }
  
  public const int Day3FieldNumber = 4;
  private bool hasDay3;
  private int day3_;
  public bool HasDay3 {
    get { return hasDay3; }
  }
  public int Day3 {
    get { return day3_; }
  }
  
  public const int Day4FieldNumber = 5;
  private bool hasDay4;
  private int day4_;
  public bool HasDay4 {
    get { return hasDay4; }
  }
  public int Day4 {
    get { return day4_; }
  }
  
  public const int Day5FieldNumber = 6;
  private bool hasDay5;
  private int day5_;
  public bool HasDay5 {
    get { return hasDay5; }
  }
  public int Day5 {
    get { return day5_; }
  }
  
  public const int Day6FieldNumber = 7;
  private bool hasDay6;
  private int day6_;
  public bool HasDay6 {
    get { return hasDay6; }
  }
  public int Day6 {
    get { return day6_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasDay0) return false;
      if (!hasDay1) return false;
      if (!hasDay2) return false;
      if (!hasDay3) return false;
      if (!hasDay4) return false;
      if (!hasDay5) return false;
      if (!hasDay6) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _structBillSettingFieldNames;
    if (hasDay0) {
      output.WriteInt32(1, field_names[0], Day0);
    }
    if (hasDay1) {
      output.WriteInt32(2, field_names[1], Day1);
    }
    if (hasDay2) {
      output.WriteInt32(3, field_names[2], Day2);
    }
    if (hasDay3) {
      output.WriteInt32(4, field_names[3], Day3);
    }
    if (hasDay4) {
      output.WriteInt32(5, field_names[4], Day4);
    }
    if (hasDay5) {
      output.WriteInt32(6, field_names[5], Day5);
    }
    if (hasDay6) {
      output.WriteInt32(7, field_names[6], Day6);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasDay0) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Day0);
    }
    if (hasDay1) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Day1);
    }
    if (hasDay2) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, Day2);
    }
    if (hasDay3) {
      size += pb::CodedOutputStream.ComputeInt32Size(4, Day3);
    }
    if (hasDay4) {
      size += pb::CodedOutputStream.ComputeInt32Size(5, Day4);
    }
    if (hasDay5) {
      size += pb::CodedOutputStream.ComputeInt32Size(6, Day5);
    }
    if (hasDay6) {
      size += pb::CodedOutputStream.ComputeInt32Size(7, Day6);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static StructBillSetting ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static StructBillSetting ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static StructBillSetting ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static StructBillSetting ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static StructBillSetting ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static StructBillSetting ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static StructBillSetting ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static StructBillSetting ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static StructBillSetting ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static StructBillSetting ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private StructBillSetting MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(StructBillSetting prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<StructBillSetting, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(StructBillSetting cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private StructBillSetting result;
    
    private StructBillSetting PrepareBuilder() {
      if (resultIsReadOnly) {
        StructBillSetting original = result;
        result = new StructBillSetting();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override StructBillSetting MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::StructBillSetting.Descriptor; }
    }
    
    public override StructBillSetting DefaultInstanceForType {
      get { return global::StructBillSetting.DefaultInstance; }
    }
    
    public override StructBillSetting BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is StructBillSetting) {
        return MergeFrom((StructBillSetting) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(StructBillSetting other) {
      if (other == global::StructBillSetting.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasDay0) {
        Day0 = other.Day0;
      }
      if (other.HasDay1) {
        Day1 = other.Day1;
      }
      if (other.HasDay2) {
        Day2 = other.Day2;
      }
      if (other.HasDay3) {
        Day3 = other.Day3;
      }
      if (other.HasDay4) {
        Day4 = other.Day4;
      }
      if (other.HasDay5) {
        Day5 = other.Day5;
      }
      if (other.HasDay6) {
        Day6 = other.Day6;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_structBillSettingFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _structBillSettingFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasDay0 = input.ReadInt32(ref result.day0_);
            break;
          }
          case 16: {
            result.hasDay1 = input.ReadInt32(ref result.day1_);
            break;
          }
          case 24: {
            result.hasDay2 = input.ReadInt32(ref result.day2_);
            break;
          }
          case 32: {
            result.hasDay3 = input.ReadInt32(ref result.day3_);
            break;
          }
          case 40: {
            result.hasDay4 = input.ReadInt32(ref result.day4_);
            break;
          }
          case 48: {
            result.hasDay5 = input.ReadInt32(ref result.day5_);
            break;
          }
          case 56: {
            result.hasDay6 = input.ReadInt32(ref result.day6_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasDay0 {
      get { return result.hasDay0; }
    }
    public int Day0 {
      get { return result.Day0; }
      set { SetDay0(value); }
    }
    public Builder SetDay0(int value) {
      PrepareBuilder();
      result.hasDay0 = true;
      result.day0_ = value;
      return this;
    }
    public Builder ClearDay0() {
      PrepareBuilder();
      result.hasDay0 = false;
      result.day0_ = 0;
      return this;
    }
    
    public bool HasDay1 {
      get { return result.hasDay1; }
    }
    public int Day1 {
      get { return result.Day1; }
      set { SetDay1(value); }
    }
    public Builder SetDay1(int value) {
      PrepareBuilder();
      result.hasDay1 = true;
      result.day1_ = value;
      return this;
    }
    public Builder ClearDay1() {
      PrepareBuilder();
      result.hasDay1 = false;
      result.day1_ = 0;
      return this;
    }
    
    public bool HasDay2 {
      get { return result.hasDay2; }
    }
    public int Day2 {
      get { return result.Day2; }
      set { SetDay2(value); }
    }
    public Builder SetDay2(int value) {
      PrepareBuilder();
      result.hasDay2 = true;
      result.day2_ = value;
      return this;
    }
    public Builder ClearDay2() {
      PrepareBuilder();
      result.hasDay2 = false;
      result.day2_ = 0;
      return this;
    }
    
    public bool HasDay3 {
      get { return result.hasDay3; }
    }
    public int Day3 {
      get { return result.Day3; }
      set { SetDay3(value); }
    }
    public Builder SetDay3(int value) {
      PrepareBuilder();
      result.hasDay3 = true;
      result.day3_ = value;
      return this;
    }
    public Builder ClearDay3() {
      PrepareBuilder();
      result.hasDay3 = false;
      result.day3_ = 0;
      return this;
    }
    
    public bool HasDay4 {
      get { return result.hasDay4; }
    }
    public int Day4 {
      get { return result.Day4; }
      set { SetDay4(value); }
    }
    public Builder SetDay4(int value) {
      PrepareBuilder();
      result.hasDay4 = true;
      result.day4_ = value;
      return this;
    }
    public Builder ClearDay4() {
      PrepareBuilder();
      result.hasDay4 = false;
      result.day4_ = 0;
      return this;
    }
    
    public bool HasDay5 {
      get { return result.hasDay5; }
    }
    public int Day5 {
      get { return result.Day5; }
      set { SetDay5(value); }
    }
    public Builder SetDay5(int value) {
      PrepareBuilder();
      result.hasDay5 = true;
      result.day5_ = value;
      return this;
    }
    public Builder ClearDay5() {
      PrepareBuilder();
      result.hasDay5 = false;
      result.day5_ = 0;
      return this;
    }
    
    public bool HasDay6 {
      get { return result.hasDay6; }
    }
    public int Day6 {
      get { return result.Day6; }
      set { SetDay6(value); }
    }
    public Builder SetDay6(int value) {
      PrepareBuilder();
      result.hasDay6 = true;
      result.day6_ = value;
      return this;
    }
    public Builder ClearDay6() {
      PrepareBuilder();
      result.hasDay6 = false;
      result.day6_ = 0;
      return this;
    }
  }
  static StructBillSetting() {
    object.ReferenceEquals(global::BaseStruct.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class StructDictItem : pb::GeneratedMessage<StructDictItem, StructDictItem.Builder> {
  private StructDictItem() { }
  private static readonly StructDictItem defaultInstance = new StructDictItem().MakeReadOnly();
  private static readonly string[] _structDictItemFieldNames = new string[] { "code", "id", "item" };
  private static readonly uint[] _structDictItemFieldTags = new uint[] { 16, 8, 26 };
  public static StructDictItem DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override StructDictItem DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override StructDictItem ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::BaseStruct.internal__static_StructDictItem__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<StructDictItem, StructDictItem.Builder> InternalFieldAccessors {
    get { return global::BaseStruct.internal__static_StructDictItem__FieldAccessorTable; }
  }
  
  public const int IdFieldNumber = 1;
  private bool hasId;
  private int id_;
  public bool HasId {
    get { return hasId; }
  }
  public int Id {
    get { return id_; }
  }
  
  public const int CodeFieldNumber = 2;
  private bool hasCode;
  private int code_;
  public bool HasCode {
    get { return hasCode; }
  }
  public int Code {
    get { return code_; }
  }
  
  public const int ItemFieldNumber = 3;
  private pbc::PopsicleList<string> item_ = new pbc::PopsicleList<string>();
  public scg::IList<string> ItemList {
    get { return pbc::Lists.AsReadOnly(item_); }
  }
  public int ItemCount {
    get { return item_.Count; }
  }
  public string GetItem(int index) {
    return item_[index];
  }
  
  public override bool IsInitialized {
    get {
      if (!hasId) return false;
      if (!hasCode) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _structDictItemFieldNames;
    if (hasId) {
      output.WriteInt32(1, field_names[1], Id);
    }
    if (hasCode) {
      output.WriteInt32(2, field_names[0], Code);
    }
    if (item_.Count > 0) {
      output.WriteStringArray(3, field_names[2], item_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasId) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
    }
    if (hasCode) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Code);
    }
    {
      int dataSize = 0;
      foreach (string element in ItemList) {
        dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
      }
      size += dataSize;
      size += 1 * item_.Count;
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static StructDictItem ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static StructDictItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static StructDictItem ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static StructDictItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static StructDictItem ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static StructDictItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static StructDictItem ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static StructDictItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static StructDictItem ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static StructDictItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private StructDictItem MakeReadOnly() {
    item_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(StructDictItem prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<StructDictItem, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(StructDictItem cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private StructDictItem result;
    
    private StructDictItem PrepareBuilder() {
      if (resultIsReadOnly) {
        StructDictItem original = result;
        result = new StructDictItem();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override StructDictItem MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::StructDictItem.Descriptor; }
    }
    
    public override StructDictItem DefaultInstanceForType {
      get { return global::StructDictItem.DefaultInstance; }
    }
    
    public override StructDictItem BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is StructDictItem) {
        return MergeFrom((StructDictItem) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(StructDictItem other) {
      if (other == global::StructDictItem.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasCode) {
        Code = other.Code;
      }
      if (other.item_.Count != 0) {
        result.item_.Add(other.item_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_structDictItemFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _structDictItemFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasId = input.ReadInt32(ref result.id_);
            break;
          }
          case 16: {
            result.hasCode = input.ReadInt32(ref result.code_);
            break;
          }
          case 26: {
            input.ReadStringArray(tag, field_name, result.item_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasId {
      get { return result.hasId; }
    }
    public int Id {
      get { return result.Id; }
      set { SetId(value); }
    }
    public Builder SetId(int value) {
      PrepareBuilder();
      result.hasId = true;
      result.id_ = value;
      return this;
    }
    public Builder ClearId() {
      PrepareBuilder();
      result.hasId = false;
      result.id_ = 0;
      return this;
    }
    
    public bool HasCode {
      get { return result.hasCode; }
    }
    public int Code {
      get { return result.Code; }
      set { SetCode(value); }
    }
    public Builder SetCode(int value) {
      PrepareBuilder();
      result.hasCode = true;
      result.code_ = value;
      return this;
    }
    public Builder ClearCode() {
      PrepareBuilder();
      result.hasCode = false;
      result.code_ = 0;
      return this;
    }
    
    public pbc::IPopsicleList<string> ItemList {
      get { return PrepareBuilder().item_; }
    }
    public int ItemCount {
      get { return result.ItemCount; }
    }
    public string GetItem(int index) {
      return result.GetItem(index);
    }
    public Builder SetItem(int index, string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.item_[index] = value;
      return this;
    }
    public Builder AddItem(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.item_.Add(value);
      return this;
    }
    public Builder AddRangeItem(scg::IEnumerable<string> values) {
      PrepareBuilder();
      result.item_.Add(values);
      return this;
    }
    public Builder ClearItem() {
      PrepareBuilder();
      result.item_.Clear();
      return this;
    }
  }
  static StructDictItem() {
    object.ReferenceEquals(global::BaseStruct.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class StructGoods : pb::GeneratedMessage<StructGoods, StructGoods.Builder> {
  private StructGoods() { }
  private static readonly StructGoods defaultInstance = new StructGoods().MakeReadOnly();
  private static readonly string[] _structGoodsFieldNames = new string[] { "category", "count", "goodsId", "goodsImg", "goodsName", "hide", "integal", "price", "useIntegal" };
  private static readonly uint[] _structGoodsFieldTags = new uint[] { 32, 72, 8, 26, 18, 56, 64, 42, 48 };
  public static StructGoods DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override StructGoods DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override StructGoods ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::BaseStruct.internal__static_StructGoods__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<StructGoods, StructGoods.Builder> InternalFieldAccessors {
    get { return global::BaseStruct.internal__static_StructGoods__FieldAccessorTable; }
  }
  
  public const int GoodsIdFieldNumber = 1;
  private bool hasGoodsId;
  private int goodsId_;
  public bool HasGoodsId {
    get { return hasGoodsId; }
  }
  public int GoodsId {
    get { return goodsId_; }
  }
  
  public const int GoodsNameFieldNumber = 2;
  private bool hasGoodsName;
  private string goodsName_ = "";
  public bool HasGoodsName {
    get { return hasGoodsName; }
  }
  public string GoodsName {
    get { return goodsName_; }
  }
  
  public const int GoodsImgFieldNumber = 3;
  private bool hasGoodsImg;
  private string goodsImg_ = "";
  public bool HasGoodsImg {
    get { return hasGoodsImg; }
  }
  public string GoodsImg {
    get { return goodsImg_; }
  }
  
  public const int CategoryFieldNumber = 4;
  private bool hasCategory;
  private int category_;
  public bool HasCategory {
    get { return hasCategory; }
  }
  public int Category {
    get { return category_; }
  }
  
  public const int PriceFieldNumber = 5;
  private bool hasPrice;
  private string price_ = "";
  public bool HasPrice {
    get { return hasPrice; }
  }
  public string Price {
    get { return price_; }
  }
  
  public const int UseIntegalFieldNumber = 6;
  private bool hasUseIntegal;
  private bool useIntegal_;
  public bool HasUseIntegal {
    get { return hasUseIntegal; }
  }
  public bool UseIntegal {
    get { return useIntegal_; }
  }
  
  public const int HideFieldNumber = 7;
  private bool hasHide;
  private bool hide_;
  public bool HasHide {
    get { return hasHide; }
  }
  public bool Hide {
    get { return hide_; }
  }
  
  public const int IntegalFieldNumber = 8;
  private bool hasIntegal;
  private int integal_;
  public bool HasIntegal {
    get { return hasIntegal; }
  }
  public int Integal {
    get { return integal_; }
  }
  
  public const int CountFieldNumber = 9;
  private bool hasCount;
  private int count_;
  public bool HasCount {
    get { return hasCount; }
  }
  public int Count {
    get { return count_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasGoodsId) return false;
      if (!hasGoodsName) return false;
      if (!hasGoodsImg) return false;
      if (!hasCategory) return false;
      if (!hasPrice) return false;
      if (!hasUseIntegal) return false;
      if (!hasHide) return false;
      if (!hasIntegal) return false;
      if (!hasCount) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _structGoodsFieldNames;
    if (hasGoodsId) {
      output.WriteInt32(1, field_names[2], GoodsId);
    }
    if (hasGoodsName) {
      output.WriteString(2, field_names[4], GoodsName);
    }
    if (hasGoodsImg) {
      output.WriteString(3, field_names[3], GoodsImg);
    }
    if (hasCategory) {
      output.WriteInt32(4, field_names[0], Category);
    }
    if (hasPrice) {
      output.WriteString(5, field_names[7], Price);
    }
    if (hasUseIntegal) {
      output.WriteBool(6, field_names[8], UseIntegal);
    }
    if (hasHide) {
      output.WriteBool(7, field_names[5], Hide);
    }
    if (hasIntegal) {
      output.WriteInt32(8, field_names[6], Integal);
    }
    if (hasCount) {
      output.WriteInt32(9, field_names[1], Count);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasGoodsId) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, GoodsId);
    }
    if (hasGoodsName) {
      size += pb::CodedOutputStream.ComputeStringSize(2, GoodsName);
    }
    if (hasGoodsImg) {
      size += pb::CodedOutputStream.ComputeStringSize(3, GoodsImg);
    }
    if (hasCategory) {
      size += pb::CodedOutputStream.ComputeInt32Size(4, Category);
    }
    if (hasPrice) {
      size += pb::CodedOutputStream.ComputeStringSize(5, Price);
    }
    if (hasUseIntegal) {
      size += pb::CodedOutputStream.ComputeBoolSize(6, UseIntegal);
    }
    if (hasHide) {
      size += pb::CodedOutputStream.ComputeBoolSize(7, Hide);
    }
    if (hasIntegal) {
      size += pb::CodedOutputStream.ComputeInt32Size(8, Integal);
    }
    if (hasCount) {
      size += pb::CodedOutputStream.ComputeInt32Size(9, Count);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static StructGoods ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static StructGoods ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static StructGoods ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static StructGoods ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static StructGoods ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static StructGoods ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static StructGoods ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static StructGoods ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static StructGoods ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static StructGoods ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private StructGoods MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(StructGoods prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<StructGoods, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(StructGoods cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private StructGoods result;
    
    private StructGoods PrepareBuilder() {
      if (resultIsReadOnly) {
        StructGoods original = result;
        result = new StructGoods();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override StructGoods MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::StructGoods.Descriptor; }
    }
    
    public override StructGoods DefaultInstanceForType {
      get { return global::StructGoods.DefaultInstance; }
    }
    
    public override StructGoods BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is StructGoods) {
        return MergeFrom((StructGoods) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(StructGoods other) {
      if (other == global::StructGoods.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasGoodsId) {
        GoodsId = other.GoodsId;
      }
      if (other.HasGoodsName) {
        GoodsName = other.GoodsName;
      }
      if (other.HasGoodsImg) {
        GoodsImg = other.GoodsImg;
      }
      if (other.HasCategory) {
        Category = other.Category;
      }
      if (other.HasPrice) {
        Price = other.Price;
      }
      if (other.HasUseIntegal) {
        UseIntegal = other.UseIntegal;
      }
      if (other.HasHide) {
        Hide = other.Hide;
      }
      if (other.HasIntegal) {
        Integal = other.Integal;
      }
      if (other.HasCount) {
        Count = other.Count;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_structGoodsFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _structGoodsFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasGoodsId = input.ReadInt32(ref result.goodsId_);
            break;
          }
          case 18: {
            result.hasGoodsName = input.ReadString(ref result.goodsName_);
            break;
          }
          case 26: {
            result.hasGoodsImg = input.ReadString(ref result.goodsImg_);
            break;
          }
          case 32: {
            result.hasCategory = input.ReadInt32(ref result.category_);
            break;
          }
          case 42: {
            result.hasPrice = input.ReadString(ref result.price_);
            break;
          }
          case 48: {
            result.hasUseIntegal = input.ReadBool(ref result.useIntegal_);
            break;
          }
          case 56: {
            result.hasHide = input.ReadBool(ref result.hide_);
            break;
          }
          case 64: {
            result.hasIntegal = input.ReadInt32(ref result.integal_);
            break;
          }
          case 72: {
            result.hasCount = input.ReadInt32(ref result.count_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasGoodsId {
      get { return result.hasGoodsId; }
    }
    public int GoodsId {
      get { return result.GoodsId; }
      set { SetGoodsId(value); }
    }
    public Builder SetGoodsId(int value) {
      PrepareBuilder();
      result.hasGoodsId = true;
      result.goodsId_ = value;
      return this;
    }
    public Builder ClearGoodsId() {
      PrepareBuilder();
      result.hasGoodsId = false;
      result.goodsId_ = 0;
      return this;
    }
    
    public bool HasGoodsName {
      get { return result.hasGoodsName; }
    }
    public string GoodsName {
      get { return result.GoodsName; }
      set { SetGoodsName(value); }
    }
    public Builder SetGoodsName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasGoodsName = true;
      result.goodsName_ = value;
      return this;
    }
    public Builder ClearGoodsName() {
      PrepareBuilder();
      result.hasGoodsName = false;
      result.goodsName_ = "";
      return this;
    }
    
    public bool HasGoodsImg {
      get { return result.hasGoodsImg; }
    }
    public string GoodsImg {
      get { return result.GoodsImg; }
      set { SetGoodsImg(value); }
    }
    public Builder SetGoodsImg(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasGoodsImg = true;
      result.goodsImg_ = value;
      return this;
    }
    public Builder ClearGoodsImg() {
      PrepareBuilder();
      result.hasGoodsImg = false;
      result.goodsImg_ = "";
      return this;
    }
    
    public bool HasCategory {
      get { return result.hasCategory; }
    }
    public int Category {
      get { return result.Category; }
      set { SetCategory(value); }
    }
    public Builder SetCategory(int value) {
      PrepareBuilder();
      result.hasCategory = true;
      result.category_ = value;
      return this;
    }
    public Builder ClearCategory() {
      PrepareBuilder();
      result.hasCategory = false;
      result.category_ = 0;
      return this;
    }
    
    public bool HasPrice {
      get { return result.hasPrice; }
    }
    public string Price {
      get { return result.Price; }
      set { SetPrice(value); }
    }
    public Builder SetPrice(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPrice = true;
      result.price_ = value;
      return this;
    }
    public Builder ClearPrice() {
      PrepareBuilder();
      result.hasPrice = false;
      result.price_ = "";
      return this;
    }
    
    public bool HasUseIntegal {
      get { return result.hasUseIntegal; }
    }
    public bool UseIntegal {
      get { return result.UseIntegal; }
      set { SetUseIntegal(value); }
    }
    public Builder SetUseIntegal(bool value) {
      PrepareBuilder();
      result.hasUseIntegal = true;
      result.useIntegal_ = value;
      return this;
    }
    public Builder ClearUseIntegal() {
      PrepareBuilder();
      result.hasUseIntegal = false;
      result.useIntegal_ = false;
      return this;
    }
    
    public bool HasHide {
      get { return result.hasHide; }
    }
    public bool Hide {
      get { return result.Hide; }
      set { SetHide(value); }
    }
    public Builder SetHide(bool value) {
      PrepareBuilder();
      result.hasHide = true;
      result.hide_ = value;
      return this;
    }
    public Builder ClearHide() {
      PrepareBuilder();
      result.hasHide = false;
      result.hide_ = false;
      return this;
    }
    
    public bool HasIntegal {
      get { return result.hasIntegal; }
    }
    public int Integal {
      get { return result.Integal; }
      set { SetIntegal(value); }
    }
    public Builder SetIntegal(int value) {
      PrepareBuilder();
      result.hasIntegal = true;
      result.integal_ = value;
      return this;
    }
    public Builder ClearIntegal() {
      PrepareBuilder();
      result.hasIntegal = false;
      result.integal_ = 0;
      return this;
    }
    
    public bool HasCount {
      get { return result.hasCount; }
    }
    public int Count {
      get { return result.Count; }
      set { SetCount(value); }
    }
    public Builder SetCount(int value) {
      PrepareBuilder();
      result.hasCount = true;
      result.count_ = value;
      return this;
    }
    public Builder ClearCount() {
      PrepareBuilder();
      result.hasCount = false;
      result.count_ = 0;
      return this;
    }
  }
  static StructGoods() {
    object.ReferenceEquals(global::BaseStruct.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class StructSale : pb::GeneratedMessage<StructSale, StructSale.Builder> {
  private StructSale() { }
  private static readonly StructSale defaultInstance = new StructSale().MakeReadOnly();
  private static readonly string[] _structSaleFieldNames = new string[] { "addtime", "areaname", "cardnumber", "goodsname", "money", "num", "orderid", "paymode", "username" };
  private static readonly uint[] _structSaleFieldTags = new uint[] { 66, 34, 26, 42, 56, 48, 8, 74, 18 };
  public static StructSale DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override StructSale DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override StructSale ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::BaseStruct.internal__static_StructSale__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<StructSale, StructSale.Builder> InternalFieldAccessors {
    get { return global::BaseStruct.internal__static_StructSale__FieldAccessorTable; }
  }
  
  public const int OrderidFieldNumber = 1;
  private bool hasOrderid;
  private int orderid_;
  public bool HasOrderid {
    get { return hasOrderid; }
  }
  public int Orderid {
    get { return orderid_; }
  }
  
  public const int UsernameFieldNumber = 2;
  private bool hasUsername;
  private string username_ = "";
  public bool HasUsername {
    get { return hasUsername; }
  }
  public string Username {
    get { return username_; }
  }
  
  public const int CardnumberFieldNumber = 3;
  private bool hasCardnumber;
  private string cardnumber_ = "";
  public bool HasCardnumber {
    get { return hasCardnumber; }
  }
  public string Cardnumber {
    get { return cardnumber_; }
  }
  
  public const int AreanameFieldNumber = 4;
  private bool hasAreaname;
  private string areaname_ = "";
  public bool HasAreaname {
    get { return hasAreaname; }
  }
  public string Areaname {
    get { return areaname_; }
  }
  
  public const int GoodsnameFieldNumber = 5;
  private bool hasGoodsname;
  private string goodsname_ = "";
  public bool HasGoodsname {
    get { return hasGoodsname; }
  }
  public string Goodsname {
    get { return goodsname_; }
  }
  
  public const int NumFieldNumber = 6;
  private bool hasNum;
  private int num_;
  public bool HasNum {
    get { return hasNum; }
  }
  public int Num {
    get { return num_; }
  }
  
  public const int MoneyFieldNumber = 7;
  private bool hasMoney;
  private int money_;
  public bool HasMoney {
    get { return hasMoney; }
  }
  public int Money {
    get { return money_; }
  }
  
  public const int AddtimeFieldNumber = 8;
  private bool hasAddtime;
  private string addtime_ = "";
  public bool HasAddtime {
    get { return hasAddtime; }
  }
  public string Addtime {
    get { return addtime_; }
  }
  
  public const int PaymodeFieldNumber = 9;
  private bool hasPaymode;
  private string paymode_ = "";
  public bool HasPaymode {
    get { return hasPaymode; }
  }
  public string Paymode {
    get { return paymode_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasOrderid) return false;
      if (!hasUsername) return false;
      if (!hasCardnumber) return false;
      if (!hasAreaname) return false;
      if (!hasGoodsname) return false;
      if (!hasNum) return false;
      if (!hasMoney) return false;
      if (!hasAddtime) return false;
      if (!hasPaymode) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _structSaleFieldNames;
    if (hasOrderid) {
      output.WriteInt32(1, field_names[6], Orderid);
    }
    if (hasUsername) {
      output.WriteString(2, field_names[8], Username);
    }
    if (hasCardnumber) {
      output.WriteString(3, field_names[2], Cardnumber);
    }
    if (hasAreaname) {
      output.WriteString(4, field_names[1], Areaname);
    }
    if (hasGoodsname) {
      output.WriteString(5, field_names[3], Goodsname);
    }
    if (hasNum) {
      output.WriteInt32(6, field_names[5], Num);
    }
    if (hasMoney) {
      output.WriteInt32(7, field_names[4], Money);
    }
    if (hasAddtime) {
      output.WriteString(8, field_names[0], Addtime);
    }
    if (hasPaymode) {
      output.WriteString(9, field_names[7], Paymode);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasOrderid) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Orderid);
    }
    if (hasUsername) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Username);
    }
    if (hasCardnumber) {
      size += pb::CodedOutputStream.ComputeStringSize(3, Cardnumber);
    }
    if (hasAreaname) {
      size += pb::CodedOutputStream.ComputeStringSize(4, Areaname);
    }
    if (hasGoodsname) {
      size += pb::CodedOutputStream.ComputeStringSize(5, Goodsname);
    }
    if (hasNum) {
      size += pb::CodedOutputStream.ComputeInt32Size(6, Num);
    }
    if (hasMoney) {
      size += pb::CodedOutputStream.ComputeInt32Size(7, Money);
    }
    if (hasAddtime) {
      size += pb::CodedOutputStream.ComputeStringSize(8, Addtime);
    }
    if (hasPaymode) {
      size += pb::CodedOutputStream.ComputeStringSize(9, Paymode);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static StructSale ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static StructSale ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static StructSale ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static StructSale ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static StructSale ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static StructSale ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static StructSale ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static StructSale ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static StructSale ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static StructSale ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private StructSale MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(StructSale prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<StructSale, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(StructSale cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private StructSale result;
    
    private StructSale PrepareBuilder() {
      if (resultIsReadOnly) {
        StructSale original = result;
        result = new StructSale();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override StructSale MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::StructSale.Descriptor; }
    }
    
    public override StructSale DefaultInstanceForType {
      get { return global::StructSale.DefaultInstance; }
    }
    
    public override StructSale BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is StructSale) {
        return MergeFrom((StructSale) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(StructSale other) {
      if (other == global::StructSale.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasOrderid) {
        Orderid = other.Orderid;
      }
      if (other.HasUsername) {
        Username = other.Username;
      }
      if (other.HasCardnumber) {
        Cardnumber = other.Cardnumber;
      }
      if (other.HasAreaname) {
        Areaname = other.Areaname;
      }
      if (other.HasGoodsname) {
        Goodsname = other.Goodsname;
      }
      if (other.HasNum) {
        Num = other.Num;
      }
      if (other.HasMoney) {
        Money = other.Money;
      }
      if (other.HasAddtime) {
        Addtime = other.Addtime;
      }
      if (other.HasPaymode) {
        Paymode = other.Paymode;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_structSaleFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _structSaleFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasOrderid = input.ReadInt32(ref result.orderid_);
            break;
          }
          case 18: {
            result.hasUsername = input.ReadString(ref result.username_);
            break;
          }
          case 26: {
            result.hasCardnumber = input.ReadString(ref result.cardnumber_);
            break;
          }
          case 34: {
            result.hasAreaname = input.ReadString(ref result.areaname_);
            break;
          }
          case 42: {
            result.hasGoodsname = input.ReadString(ref result.goodsname_);
            break;
          }
          case 48: {
            result.hasNum = input.ReadInt32(ref result.num_);
            break;
          }
          case 56: {
            result.hasMoney = input.ReadInt32(ref result.money_);
            break;
          }
          case 66: {
            result.hasAddtime = input.ReadString(ref result.addtime_);
            break;
          }
          case 74: {
            result.hasPaymode = input.ReadString(ref result.paymode_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasOrderid {
      get { return result.hasOrderid; }
    }
    public int Orderid {
      get { return result.Orderid; }
      set { SetOrderid(value); }
    }
    public Builder SetOrderid(int value) {
      PrepareBuilder();
      result.hasOrderid = true;
      result.orderid_ = value;
      return this;
    }
    public Builder ClearOrderid() {
      PrepareBuilder();
      result.hasOrderid = false;
      result.orderid_ = 0;
      return this;
    }
    
    public bool HasUsername {
      get { return result.hasUsername; }
    }
    public string Username {
      get { return result.Username; }
      set { SetUsername(value); }
    }
    public Builder SetUsername(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasUsername = true;
      result.username_ = value;
      return this;
    }
    public Builder ClearUsername() {
      PrepareBuilder();
      result.hasUsername = false;
      result.username_ = "";
      return this;
    }
    
    public bool HasCardnumber {
      get { return result.hasCardnumber; }
    }
    public string Cardnumber {
      get { return result.Cardnumber; }
      set { SetCardnumber(value); }
    }
    public Builder SetCardnumber(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCardnumber = true;
      result.cardnumber_ = value;
      return this;
    }
    public Builder ClearCardnumber() {
      PrepareBuilder();
      result.hasCardnumber = false;
      result.cardnumber_ = "";
      return this;
    }
    
    public bool HasAreaname {
      get { return result.hasAreaname; }
    }
    public string Areaname {
      get { return result.Areaname; }
      set { SetAreaname(value); }
    }
    public Builder SetAreaname(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasAreaname = true;
      result.areaname_ = value;
      return this;
    }
    public Builder ClearAreaname() {
      PrepareBuilder();
      result.hasAreaname = false;
      result.areaname_ = "";
      return this;
    }
    
    public bool HasGoodsname {
      get { return result.hasGoodsname; }
    }
    public string Goodsname {
      get { return result.Goodsname; }
      set { SetGoodsname(value); }
    }
    public Builder SetGoodsname(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasGoodsname = true;
      result.goodsname_ = value;
      return this;
    }
    public Builder ClearGoodsname() {
      PrepareBuilder();
      result.hasGoodsname = false;
      result.goodsname_ = "";
      return this;
    }
    
    public bool HasNum {
      get { return result.hasNum; }
    }
    public int Num {
      get { return result.Num; }
      set { SetNum(value); }
    }
    public Builder SetNum(int value) {
      PrepareBuilder();
      result.hasNum = true;
      result.num_ = value;
      return this;
    }
    public Builder ClearNum() {
      PrepareBuilder();
      result.hasNum = false;
      result.num_ = 0;
      return this;
    }
    
    public bool HasMoney {
      get { return result.hasMoney; }
    }
    public int Money {
      get { return result.Money; }
      set { SetMoney(value); }
    }
    public Builder SetMoney(int value) {
      PrepareBuilder();
      result.hasMoney = true;
      result.money_ = value;
      return this;
    }
    public Builder ClearMoney() {
      PrepareBuilder();
      result.hasMoney = false;
      result.money_ = 0;
      return this;
    }
    
    public bool HasAddtime {
      get { return result.hasAddtime; }
    }
    public string Addtime {
      get { return result.Addtime; }
      set { SetAddtime(value); }
    }
    public Builder SetAddtime(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasAddtime = true;
      result.addtime_ = value;
      return this;
    }
    public Builder ClearAddtime() {
      PrepareBuilder();
      result.hasAddtime = false;
      result.addtime_ = "";
      return this;
    }
    
    public bool HasPaymode {
      get { return result.hasPaymode; }
    }
    public string Paymode {
      get { return result.Paymode; }
      set { SetPaymode(value); }
    }
    public Builder SetPaymode(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPaymode = true;
      result.paymode_ = value;
      return this;
    }
    public Builder ClearPaymode() {
      PrepareBuilder();
      result.hasPaymode = false;
      result.paymode_ = "";
      return this;
    }
  }
  static StructSale() {
    object.ReferenceEquals(global::BaseStruct.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class StructSaleTop : pb::GeneratedMessage<StructSaleTop, StructSaleTop.Builder> {
  private StructSaleTop() { }
  private static readonly StructSaleTop defaultInstance = new StructSaleTop().MakeReadOnly();
  private static readonly string[] _structSaleTopFieldNames = new string[] { "category", "goodsname", "money", "num" };
  private static readonly uint[] _structSaleTopFieldTags = new uint[] { 8, 18, 32, 24 };
  public static StructSaleTop DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override StructSaleTop DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override StructSaleTop ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::BaseStruct.internal__static_StructSaleTop__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<StructSaleTop, StructSaleTop.Builder> InternalFieldAccessors {
    get { return global::BaseStruct.internal__static_StructSaleTop__FieldAccessorTable; }
  }
  
  public const int CategoryFieldNumber = 1;
  private bool hasCategory;
  private int category_;
  public bool HasCategory {
    get { return hasCategory; }
  }
  public int Category {
    get { return category_; }
  }
  
  public const int GoodsnameFieldNumber = 2;
  private bool hasGoodsname;
  private string goodsname_ = "";
  public bool HasGoodsname {
    get { return hasGoodsname; }
  }
  public string Goodsname {
    get { return goodsname_; }
  }
  
  public const int NumFieldNumber = 3;
  private bool hasNum;
  private int num_;
  public bool HasNum {
    get { return hasNum; }
  }
  public int Num {
    get { return num_; }
  }
  
  public const int MoneyFieldNumber = 4;
  private bool hasMoney;
  private int money_;
  public bool HasMoney {
    get { return hasMoney; }
  }
  public int Money {
    get { return money_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasCategory) return false;
      if (!hasGoodsname) return false;
      if (!hasNum) return false;
      if (!hasMoney) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _structSaleTopFieldNames;
    if (hasCategory) {
      output.WriteInt32(1, field_names[0], Category);
    }
    if (hasGoodsname) {
      output.WriteString(2, field_names[1], Goodsname);
    }
    if (hasNum) {
      output.WriteInt32(3, field_names[3], Num);
    }
    if (hasMoney) {
      output.WriteInt32(4, field_names[2], Money);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasCategory) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Category);
    }
    if (hasGoodsname) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Goodsname);
    }
    if (hasNum) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, Num);
    }
    if (hasMoney) {
      size += pb::CodedOutputStream.ComputeInt32Size(4, Money);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static StructSaleTop ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static StructSaleTop ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static StructSaleTop ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static StructSaleTop ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static StructSaleTop ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static StructSaleTop ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static StructSaleTop ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static StructSaleTop ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static StructSaleTop ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static StructSaleTop ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private StructSaleTop MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(StructSaleTop prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<StructSaleTop, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(StructSaleTop cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private StructSaleTop result;
    
    private StructSaleTop PrepareBuilder() {
      if (resultIsReadOnly) {
        StructSaleTop original = result;
        result = new StructSaleTop();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override StructSaleTop MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::StructSaleTop.Descriptor; }
    }
    
    public override StructSaleTop DefaultInstanceForType {
      get { return global::StructSaleTop.DefaultInstance; }
    }
    
    public override StructSaleTop BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is StructSaleTop) {
        return MergeFrom((StructSaleTop) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(StructSaleTop other) {
      if (other == global::StructSaleTop.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasCategory) {
        Category = other.Category;
      }
      if (other.HasGoodsname) {
        Goodsname = other.Goodsname;
      }
      if (other.HasNum) {
        Num = other.Num;
      }
      if (other.HasMoney) {
        Money = other.Money;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_structSaleTopFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _structSaleTopFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasCategory = input.ReadInt32(ref result.category_);
            break;
          }
          case 18: {
            result.hasGoodsname = input.ReadString(ref result.goodsname_);
            break;
          }
          case 24: {
            result.hasNum = input.ReadInt32(ref result.num_);
            break;
          }
          case 32: {
            result.hasMoney = input.ReadInt32(ref result.money_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasCategory {
      get { return result.hasCategory; }
    }
    public int Category {
      get { return result.Category; }
      set { SetCategory(value); }
    }
    public Builder SetCategory(int value) {
      PrepareBuilder();
      result.hasCategory = true;
      result.category_ = value;
      return this;
    }
    public Builder ClearCategory() {
      PrepareBuilder();
      result.hasCategory = false;
      result.category_ = 0;
      return this;
    }
    
    public bool HasGoodsname {
      get { return result.hasGoodsname; }
    }
    public string Goodsname {
      get { return result.Goodsname; }
      set { SetGoodsname(value); }
    }
    public Builder SetGoodsname(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasGoodsname = true;
      result.goodsname_ = value;
      return this;
    }
    public Builder ClearGoodsname() {
      PrepareBuilder();
      result.hasGoodsname = false;
      result.goodsname_ = "";
      return this;
    }
    
    public bool HasNum {
      get { return result.hasNum; }
    }
    public int Num {
      get { return result.Num; }
      set { SetNum(value); }
    }
    public Builder SetNum(int value) {
      PrepareBuilder();
      result.hasNum = true;
      result.num_ = value;
      return this;
    }
    public Builder ClearNum() {
      PrepareBuilder();
      result.hasNum = false;
      result.num_ = 0;
      return this;
    }
    
    public bool HasMoney {
      get { return result.hasMoney; }
    }
    public int Money {
      get { return result.Money; }
      set { SetMoney(value); }
    }
    public Builder SetMoney(int value) {
      PrepareBuilder();
      result.hasMoney = true;
      result.money_ = value;
      return this;
    }
    public Builder ClearMoney() {
      PrepareBuilder();
      result.hasMoney = false;
      result.money_ = 0;
      return this;
    }
  }
  static StructSaleTop() {
    object.ReferenceEquals(global::BaseStruct.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class StructStock : pb::GeneratedMessage<StructStock, StructStock.Builder> {
  private StructStock() { }
  private static readonly StructStock defaultInstance = new StructStock().MakeReadOnly();
  private static readonly string[] _structStockFieldNames = new string[] { "category", "goodsname", "num", "price" };
  private static readonly uint[] _structStockFieldTags = new uint[] { 16, 10, 32, 26 };
  public static StructStock DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override StructStock DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override StructStock ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::BaseStruct.internal__static_StructStock__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<StructStock, StructStock.Builder> InternalFieldAccessors {
    get { return global::BaseStruct.internal__static_StructStock__FieldAccessorTable; }
  }
  
  public const int GoodsnameFieldNumber = 1;
  private bool hasGoodsname;
  private string goodsname_ = "";
  public bool HasGoodsname {
    get { return hasGoodsname; }
  }
  public string Goodsname {
    get { return goodsname_; }
  }
  
  public const int CategoryFieldNumber = 2;
  private bool hasCategory;
  private int category_;
  public bool HasCategory {
    get { return hasCategory; }
  }
  public int Category {
    get { return category_; }
  }
  
  public const int PriceFieldNumber = 3;
  private bool hasPrice;
  private string price_ = "";
  public bool HasPrice {
    get { return hasPrice; }
  }
  public string Price {
    get { return price_; }
  }
  
  public const int NumFieldNumber = 4;
  private bool hasNum;
  private int num_;
  public bool HasNum {
    get { return hasNum; }
  }
  public int Num {
    get { return num_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasGoodsname) return false;
      if (!hasCategory) return false;
      if (!hasPrice) return false;
      if (!hasNum) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _structStockFieldNames;
    if (hasGoodsname) {
      output.WriteString(1, field_names[1], Goodsname);
    }
    if (hasCategory) {
      output.WriteInt32(2, field_names[0], Category);
    }
    if (hasPrice) {
      output.WriteString(3, field_names[3], Price);
    }
    if (hasNum) {
      output.WriteInt32(4, field_names[2], Num);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasGoodsname) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Goodsname);
    }
    if (hasCategory) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Category);
    }
    if (hasPrice) {
      size += pb::CodedOutputStream.ComputeStringSize(3, Price);
    }
    if (hasNum) {
      size += pb::CodedOutputStream.ComputeInt32Size(4, Num);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static StructStock ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static StructStock ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static StructStock ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static StructStock ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static StructStock ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static StructStock ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static StructStock ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static StructStock ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static StructStock ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static StructStock ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private StructStock MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(StructStock prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<StructStock, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(StructStock cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private StructStock result;
    
    private StructStock PrepareBuilder() {
      if (resultIsReadOnly) {
        StructStock original = result;
        result = new StructStock();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override StructStock MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::StructStock.Descriptor; }
    }
    
    public override StructStock DefaultInstanceForType {
      get { return global::StructStock.DefaultInstance; }
    }
    
    public override StructStock BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is StructStock) {
        return MergeFrom((StructStock) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(StructStock other) {
      if (other == global::StructStock.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasGoodsname) {
        Goodsname = other.Goodsname;
      }
      if (other.HasCategory) {
        Category = other.Category;
      }
      if (other.HasPrice) {
        Price = other.Price;
      }
      if (other.HasNum) {
        Num = other.Num;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_structStockFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _structStockFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasGoodsname = input.ReadString(ref result.goodsname_);
            break;
          }
          case 16: {
            result.hasCategory = input.ReadInt32(ref result.category_);
            break;
          }
          case 26: {
            result.hasPrice = input.ReadString(ref result.price_);
            break;
          }
          case 32: {
            result.hasNum = input.ReadInt32(ref result.num_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasGoodsname {
      get { return result.hasGoodsname; }
    }
    public string Goodsname {
      get { return result.Goodsname; }
      set { SetGoodsname(value); }
    }
    public Builder SetGoodsname(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasGoodsname = true;
      result.goodsname_ = value;
      return this;
    }
    public Builder ClearGoodsname() {
      PrepareBuilder();
      result.hasGoodsname = false;
      result.goodsname_ = "";
      return this;
    }
    
    public bool HasCategory {
      get { return result.hasCategory; }
    }
    public int Category {
      get { return result.Category; }
      set { SetCategory(value); }
    }
    public Builder SetCategory(int value) {
      PrepareBuilder();
      result.hasCategory = true;
      result.category_ = value;
      return this;
    }
    public Builder ClearCategory() {
      PrepareBuilder();
      result.hasCategory = false;
      result.category_ = 0;
      return this;
    }
    
    public bool HasPrice {
      get { return result.hasPrice; }
    }
    public string Price {
      get { return result.Price; }
      set { SetPrice(value); }
    }
    public Builder SetPrice(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPrice = true;
      result.price_ = value;
      return this;
    }
    public Builder ClearPrice() {
      PrepareBuilder();
      result.hasPrice = false;
      result.price_ = "";
      return this;
    }
    
    public bool HasNum {
      get { return result.hasNum; }
    }
    public int Num {
      get { return result.Num; }
      set { SetNum(value); }
    }
    public Builder SetNum(int value) {
      PrepareBuilder();
      result.hasNum = true;
      result.num_ = value;
      return this;
    }
    public Builder ClearNum() {
      PrepareBuilder();
      result.hasNum = false;
      result.num_ = 0;
      return this;
    }
  }
  static StructStock() {
    object.ReferenceEquals(global::BaseStruct.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class StructOrder : pb::GeneratedMessage<StructOrder, StructOrder.Builder> {
  private StructOrder() { }
  private static readonly StructOrder defaultInstance = new StructOrder().MakeReadOnly();
  private static readonly string[] _structOrderFieldNames = new string[] { "addtime", "areaname", "cardnumber", "money", "operator", "orderid", "payid", "paymode", "proctime", "status", "username" };
  private static readonly uint[] _structOrderFieldTags = new uint[] { 50, 34, 26, 40, 66, 8, 90, 82, 58, 74, 18 };
  public static StructOrder DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override StructOrder DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override StructOrder ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::BaseStruct.internal__static_StructOrder__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<StructOrder, StructOrder.Builder> InternalFieldAccessors {
    get { return global::BaseStruct.internal__static_StructOrder__FieldAccessorTable; }
  }
  
  public const int OrderidFieldNumber = 1;
  private bool hasOrderid;
  private int orderid_;
  public bool HasOrderid {
    get { return hasOrderid; }
  }
  public int Orderid {
    get { return orderid_; }
  }
  
  public const int UsernameFieldNumber = 2;
  private bool hasUsername;
  private string username_ = "";
  public bool HasUsername {
    get { return hasUsername; }
  }
  public string Username {
    get { return username_; }
  }
  
  public const int CardnumberFieldNumber = 3;
  private bool hasCardnumber;
  private string cardnumber_ = "";
  public bool HasCardnumber {
    get { return hasCardnumber; }
  }
  public string Cardnumber {
    get { return cardnumber_; }
  }
  
  public const int AreanameFieldNumber = 4;
  private bool hasAreaname;
  private string areaname_ = "";
  public bool HasAreaname {
    get { return hasAreaname; }
  }
  public string Areaname {
    get { return areaname_; }
  }
  
  public const int MoneyFieldNumber = 5;
  private bool hasMoney;
  private int money_;
  public bool HasMoney {
    get { return hasMoney; }
  }
  public int Money {
    get { return money_; }
  }
  
  public const int AddtimeFieldNumber = 6;
  private bool hasAddtime;
  private string addtime_ = "";
  public bool HasAddtime {
    get { return hasAddtime; }
  }
  public string Addtime {
    get { return addtime_; }
  }
  
  public const int ProctimeFieldNumber = 7;
  private bool hasProctime;
  private string proctime_ = "";
  public bool HasProctime {
    get { return hasProctime; }
  }
  public string Proctime {
    get { return proctime_; }
  }
  
  public const int OperatorFieldNumber = 8;
  private bool hasOperator;
  private string operator_ = "";
  public bool HasOperator {
    get { return hasOperator; }
  }
  public string Operator {
    get { return operator_; }
  }
  
  public const int StatusFieldNumber = 9;
  private bool hasStatus;
  private string status_ = "";
  public bool HasStatus {
    get { return hasStatus; }
  }
  public string Status {
    get { return status_; }
  }
  
  public const int PaymodeFieldNumber = 10;
  private bool hasPaymode;
  private string paymode_ = "";
  public bool HasPaymode {
    get { return hasPaymode; }
  }
  public string Paymode {
    get { return paymode_; }
  }
  
  public const int PayidFieldNumber = 11;
  private bool hasPayid;
  private string payid_ = "";
  public bool HasPayid {
    get { return hasPayid; }
  }
  public string Payid {
    get { return payid_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasOrderid) return false;
      if (!hasUsername) return false;
      if (!hasCardnumber) return false;
      if (!hasAreaname) return false;
      if (!hasMoney) return false;
      if (!hasAddtime) return false;
      if (!hasProctime) return false;
      if (!hasOperator) return false;
      if (!hasStatus) return false;
      if (!hasPaymode) return false;
      if (!hasPayid) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _structOrderFieldNames;
    if (hasOrderid) {
      output.WriteInt32(1, field_names[5], Orderid);
    }
    if (hasUsername) {
      output.WriteString(2, field_names[10], Username);
    }
    if (hasCardnumber) {
      output.WriteString(3, field_names[2], Cardnumber);
    }
    if (hasAreaname) {
      output.WriteString(4, field_names[1], Areaname);
    }
    if (hasMoney) {
      output.WriteInt32(5, field_names[3], Money);
    }
    if (hasAddtime) {
      output.WriteString(6, field_names[0], Addtime);
    }
    if (hasProctime) {
      output.WriteString(7, field_names[8], Proctime);
    }
    if (hasOperator) {
      output.WriteString(8, field_names[4], Operator);
    }
    if (hasStatus) {
      output.WriteString(9, field_names[9], Status);
    }
    if (hasPaymode) {
      output.WriteString(10, field_names[7], Paymode);
    }
    if (hasPayid) {
      output.WriteString(11, field_names[6], Payid);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasOrderid) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Orderid);
    }
    if (hasUsername) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Username);
    }
    if (hasCardnumber) {
      size += pb::CodedOutputStream.ComputeStringSize(3, Cardnumber);
    }
    if (hasAreaname) {
      size += pb::CodedOutputStream.ComputeStringSize(4, Areaname);
    }
    if (hasMoney) {
      size += pb::CodedOutputStream.ComputeInt32Size(5, Money);
    }
    if (hasAddtime) {
      size += pb::CodedOutputStream.ComputeStringSize(6, Addtime);
    }
    if (hasProctime) {
      size += pb::CodedOutputStream.ComputeStringSize(7, Proctime);
    }
    if (hasOperator) {
      size += pb::CodedOutputStream.ComputeStringSize(8, Operator);
    }
    if (hasStatus) {
      size += pb::CodedOutputStream.ComputeStringSize(9, Status);
    }
    if (hasPaymode) {
      size += pb::CodedOutputStream.ComputeStringSize(10, Paymode);
    }
    if (hasPayid) {
      size += pb::CodedOutputStream.ComputeStringSize(11, Payid);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static StructOrder ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static StructOrder ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static StructOrder ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static StructOrder ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static StructOrder ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static StructOrder ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static StructOrder ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static StructOrder ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static StructOrder ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static StructOrder ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private StructOrder MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(StructOrder prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<StructOrder, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(StructOrder cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private StructOrder result;
    
    private StructOrder PrepareBuilder() {
      if (resultIsReadOnly) {
        StructOrder original = result;
        result = new StructOrder();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override StructOrder MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::StructOrder.Descriptor; }
    }
    
    public override StructOrder DefaultInstanceForType {
      get { return global::StructOrder.DefaultInstance; }
    }
    
    public override StructOrder BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is StructOrder) {
        return MergeFrom((StructOrder) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(StructOrder other) {
      if (other == global::StructOrder.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasOrderid) {
        Orderid = other.Orderid;
      }
      if (other.HasUsername) {
        Username = other.Username;
      }
      if (other.HasCardnumber) {
        Cardnumber = other.Cardnumber;
      }
      if (other.HasAreaname) {
        Areaname = other.Areaname;
      }
      if (other.HasMoney) {
        Money = other.Money;
      }
      if (other.HasAddtime) {
        Addtime = other.Addtime;
      }
      if (other.HasProctime) {
        Proctime = other.Proctime;
      }
      if (other.HasOperator) {
        Operator = other.Operator;
      }
      if (other.HasStatus) {
        Status = other.Status;
      }
      if (other.HasPaymode) {
        Paymode = other.Paymode;
      }
      if (other.HasPayid) {
        Payid = other.Payid;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_structOrderFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _structOrderFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasOrderid = input.ReadInt32(ref result.orderid_);
            break;
          }
          case 18: {
            result.hasUsername = input.ReadString(ref result.username_);
            break;
          }
          case 26: {
            result.hasCardnumber = input.ReadString(ref result.cardnumber_);
            break;
          }
          case 34: {
            result.hasAreaname = input.ReadString(ref result.areaname_);
            break;
          }
          case 40: {
            result.hasMoney = input.ReadInt32(ref result.money_);
            break;
          }
          case 50: {
            result.hasAddtime = input.ReadString(ref result.addtime_);
            break;
          }
          case 58: {
            result.hasProctime = input.ReadString(ref result.proctime_);
            break;
          }
          case 66: {
            result.hasOperator = input.ReadString(ref result.operator_);
            break;
          }
          case 74: {
            result.hasStatus = input.ReadString(ref result.status_);
            break;
          }
          case 82: {
            result.hasPaymode = input.ReadString(ref result.paymode_);
            break;
          }
          case 90: {
            result.hasPayid = input.ReadString(ref result.payid_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasOrderid {
      get { return result.hasOrderid; }
    }
    public int Orderid {
      get { return result.Orderid; }
      set { SetOrderid(value); }
    }
    public Builder SetOrderid(int value) {
      PrepareBuilder();
      result.hasOrderid = true;
      result.orderid_ = value;
      return this;
    }
    public Builder ClearOrderid() {
      PrepareBuilder();
      result.hasOrderid = false;
      result.orderid_ = 0;
      return this;
    }
    
    public bool HasUsername {
      get { return result.hasUsername; }
    }
    public string Username {
      get { return result.Username; }
      set { SetUsername(value); }
    }
    public Builder SetUsername(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasUsername = true;
      result.username_ = value;
      return this;
    }
    public Builder ClearUsername() {
      PrepareBuilder();
      result.hasUsername = false;
      result.username_ = "";
      return this;
    }
    
    public bool HasCardnumber {
      get { return result.hasCardnumber; }
    }
    public string Cardnumber {
      get { return result.Cardnumber; }
      set { SetCardnumber(value); }
    }
    public Builder SetCardnumber(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCardnumber = true;
      result.cardnumber_ = value;
      return this;
    }
    public Builder ClearCardnumber() {
      PrepareBuilder();
      result.hasCardnumber = false;
      result.cardnumber_ = "";
      return this;
    }
    
    public bool HasAreaname {
      get { return result.hasAreaname; }
    }
    public string Areaname {
      get { return result.Areaname; }
      set { SetAreaname(value); }
    }
    public Builder SetAreaname(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasAreaname = true;
      result.areaname_ = value;
      return this;
    }
    public Builder ClearAreaname() {
      PrepareBuilder();
      result.hasAreaname = false;
      result.areaname_ = "";
      return this;
    }
    
    public bool HasMoney {
      get { return result.hasMoney; }
    }
    public int Money {
      get { return result.Money; }
      set { SetMoney(value); }
    }
    public Builder SetMoney(int value) {
      PrepareBuilder();
      result.hasMoney = true;
      result.money_ = value;
      return this;
    }
    public Builder ClearMoney() {
      PrepareBuilder();
      result.hasMoney = false;
      result.money_ = 0;
      return this;
    }
    
    public bool HasAddtime {
      get { return result.hasAddtime; }
    }
    public string Addtime {
      get { return result.Addtime; }
      set { SetAddtime(value); }
    }
    public Builder SetAddtime(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasAddtime = true;
      result.addtime_ = value;
      return this;
    }
    public Builder ClearAddtime() {
      PrepareBuilder();
      result.hasAddtime = false;
      result.addtime_ = "";
      return this;
    }
    
    public bool HasProctime {
      get { return result.hasProctime; }
    }
    public string Proctime {
      get { return result.Proctime; }
      set { SetProctime(value); }
    }
    public Builder SetProctime(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasProctime = true;
      result.proctime_ = value;
      return this;
    }
    public Builder ClearProctime() {
      PrepareBuilder();
      result.hasProctime = false;
      result.proctime_ = "";
      return this;
    }
    
    public bool HasOperator {
      get { return result.hasOperator; }
    }
    public string Operator {
      get { return result.Operator; }
      set { SetOperator(value); }
    }
    public Builder SetOperator(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasOperator = true;
      result.operator_ = value;
      return this;
    }
    public Builder ClearOperator() {
      PrepareBuilder();
      result.hasOperator = false;
      result.operator_ = "";
      return this;
    }
    
    public bool HasStatus {
      get { return result.hasStatus; }
    }
    public string Status {
      get { return result.Status; }
      set { SetStatus(value); }
    }
    public Builder SetStatus(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = value;
      return this;
    }
    public Builder ClearStatus() {
      PrepareBuilder();
      result.hasStatus = false;
      result.status_ = "";
      return this;
    }
    
    public bool HasPaymode {
      get { return result.hasPaymode; }
    }
    public string Paymode {
      get { return result.Paymode; }
      set { SetPaymode(value); }
    }
    public Builder SetPaymode(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPaymode = true;
      result.paymode_ = value;
      return this;
    }
    public Builder ClearPaymode() {
      PrepareBuilder();
      result.hasPaymode = false;
      result.paymode_ = "";
      return this;
    }
    
    public bool HasPayid {
      get { return result.hasPayid; }
    }
    public string Payid {
      get { return result.Payid; }
      set { SetPayid(value); }
    }
    public Builder SetPayid(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPayid = true;
      result.payid_ = value;
      return this;
    }
    public Builder ClearPayid() {
      PrepareBuilder();
      result.hasPayid = false;
      result.payid_ = "";
      return this;
    }
  }
  static StructOrder() {
    object.ReferenceEquals(global::BaseStruct.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class StructOrderDetail : pb::GeneratedMessage<StructOrderDetail, StructOrderDetail.Builder> {
  private StructOrderDetail() { }
  private static readonly StructOrderDetail defaultInstance = new StructOrderDetail().MakeReadOnly();
  private static readonly string[] _structOrderDetailFieldNames = new string[] { "category", "goodsname", "num", "price" };
  private static readonly uint[] _structOrderDetailFieldTags = new uint[] { 16, 10, 32, 26 };
  public static StructOrderDetail DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override StructOrderDetail DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override StructOrderDetail ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::BaseStruct.internal__static_StructOrderDetail__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<StructOrderDetail, StructOrderDetail.Builder> InternalFieldAccessors {
    get { return global::BaseStruct.internal__static_StructOrderDetail__FieldAccessorTable; }
  }
  
  public const int GoodsnameFieldNumber = 1;
  private bool hasGoodsname;
  private string goodsname_ = "";
  public bool HasGoodsname {
    get { return hasGoodsname; }
  }
  public string Goodsname {
    get { return goodsname_; }
  }
  
  public const int CategoryFieldNumber = 2;
  private bool hasCategory;
  private int category_;
  public bool HasCategory {
    get { return hasCategory; }
  }
  public int Category {
    get { return category_; }
  }
  
  public const int PriceFieldNumber = 3;
  private bool hasPrice;
  private string price_ = "";
  public bool HasPrice {
    get { return hasPrice; }
  }
  public string Price {
    get { return price_; }
  }
  
  public const int NumFieldNumber = 4;
  private bool hasNum;
  private int num_;
  public bool HasNum {
    get { return hasNum; }
  }
  public int Num {
    get { return num_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasGoodsname) return false;
      if (!hasCategory) return false;
      if (!hasPrice) return false;
      if (!hasNum) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _structOrderDetailFieldNames;
    if (hasGoodsname) {
      output.WriteString(1, field_names[1], Goodsname);
    }
    if (hasCategory) {
      output.WriteInt32(2, field_names[0], Category);
    }
    if (hasPrice) {
      output.WriteString(3, field_names[3], Price);
    }
    if (hasNum) {
      output.WriteInt32(4, field_names[2], Num);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasGoodsname) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Goodsname);
    }
    if (hasCategory) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Category);
    }
    if (hasPrice) {
      size += pb::CodedOutputStream.ComputeStringSize(3, Price);
    }
    if (hasNum) {
      size += pb::CodedOutputStream.ComputeInt32Size(4, Num);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static StructOrderDetail ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static StructOrderDetail ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static StructOrderDetail ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static StructOrderDetail ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static StructOrderDetail ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static StructOrderDetail ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static StructOrderDetail ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static StructOrderDetail ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static StructOrderDetail ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static StructOrderDetail ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private StructOrderDetail MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(StructOrderDetail prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<StructOrderDetail, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(StructOrderDetail cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private StructOrderDetail result;
    
    private StructOrderDetail PrepareBuilder() {
      if (resultIsReadOnly) {
        StructOrderDetail original = result;
        result = new StructOrderDetail();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override StructOrderDetail MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::StructOrderDetail.Descriptor; }
    }
    
    public override StructOrderDetail DefaultInstanceForType {
      get { return global::StructOrderDetail.DefaultInstance; }
    }
    
    public override StructOrderDetail BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is StructOrderDetail) {
        return MergeFrom((StructOrderDetail) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(StructOrderDetail other) {
      if (other == global::StructOrderDetail.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasGoodsname) {
        Goodsname = other.Goodsname;
      }
      if (other.HasCategory) {
        Category = other.Category;
      }
      if (other.HasPrice) {
        Price = other.Price;
      }
      if (other.HasNum) {
        Num = other.Num;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_structOrderDetailFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _structOrderDetailFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasGoodsname = input.ReadString(ref result.goodsname_);
            break;
          }
          case 16: {
            result.hasCategory = input.ReadInt32(ref result.category_);
            break;
          }
          case 26: {
            result.hasPrice = input.ReadString(ref result.price_);
            break;
          }
          case 32: {
            result.hasNum = input.ReadInt32(ref result.num_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasGoodsname {
      get { return result.hasGoodsname; }
    }
    public string Goodsname {
      get { return result.Goodsname; }
      set { SetGoodsname(value); }
    }
    public Builder SetGoodsname(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasGoodsname = true;
      result.goodsname_ = value;
      return this;
    }
    public Builder ClearGoodsname() {
      PrepareBuilder();
      result.hasGoodsname = false;
      result.goodsname_ = "";
      return this;
    }
    
    public bool HasCategory {
      get { return result.hasCategory; }
    }
    public int Category {
      get { return result.Category; }
      set { SetCategory(value); }
    }
    public Builder SetCategory(int value) {
      PrepareBuilder();
      result.hasCategory = true;
      result.category_ = value;
      return this;
    }
    public Builder ClearCategory() {
      PrepareBuilder();
      result.hasCategory = false;
      result.category_ = 0;
      return this;
    }
    
    public bool HasPrice {
      get { return result.hasPrice; }
    }
    public string Price {
      get { return result.Price; }
      set { SetPrice(value); }
    }
    public Builder SetPrice(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPrice = true;
      result.price_ = value;
      return this;
    }
    public Builder ClearPrice() {
      PrepareBuilder();
      result.hasPrice = false;
      result.price_ = "";
      return this;
    }
    
    public bool HasNum {
      get { return result.hasNum; }
    }
    public int Num {
      get { return result.Num; }
      set { SetNum(value); }
    }
    public Builder SetNum(int value) {
      PrepareBuilder();
      result.hasNum = true;
      result.num_ = value;
      return this;
    }
    public Builder ClearNum() {
      PrepareBuilder();
      result.hasNum = false;
      result.num_ = 0;
      return this;
    }
  }
  static StructOrderDetail() {
    object.ReferenceEquals(global::BaseStruct.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class StructComment : pb::GeneratedMessage<StructComment, StructComment.Builder> {
  private StructComment() { }
  private static readonly StructComment defaultInstance = new StructComment().MakeReadOnly();
  private static readonly string[] _structCommentFieldNames = new string[] { "addtime", "bonus", "cardnumber", "customer", "detail", "device", "environment", "point", "service", "staff" };
  private static readonly uint[] _structCommentFieldTags = new uint[] { 10, 32, 26, 18, 82, 72, 56, 48, 64, 42 };
  public static StructComment DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override StructComment DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override StructComment ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::BaseStruct.internal__static_StructComment__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<StructComment, StructComment.Builder> InternalFieldAccessors {
    get { return global::BaseStruct.internal__static_StructComment__FieldAccessorTable; }
  }
  
  public const int AddtimeFieldNumber = 1;
  private bool hasAddtime;
  private string addtime_ = "";
  public bool HasAddtime {
    get { return hasAddtime; }
  }
  public string Addtime {
    get { return addtime_; }
  }
  
  public const int CustomerFieldNumber = 2;
  private bool hasCustomer;
  private string customer_ = "";
  public bool HasCustomer {
    get { return hasCustomer; }
  }
  public string Customer {
    get { return customer_; }
  }
  
  public const int CardnumberFieldNumber = 3;
  private bool hasCardnumber;
  private string cardnumber_ = "";
  public bool HasCardnumber {
    get { return hasCardnumber; }
  }
  public string Cardnumber {
    get { return cardnumber_; }
  }
  
  public const int BonusFieldNumber = 4;
  private bool hasBonus;
  private int bonus_;
  public bool HasBonus {
    get { return hasBonus; }
  }
  public int Bonus {
    get { return bonus_; }
  }
  
  public const int StaffFieldNumber = 5;
  private bool hasStaff;
  private string staff_ = "";
  public bool HasStaff {
    get { return hasStaff; }
  }
  public string Staff {
    get { return staff_; }
  }
  
  public const int PointFieldNumber = 6;
  private bool hasPoint;
  private int point_;
  public bool HasPoint {
    get { return hasPoint; }
  }
  public int Point {
    get { return point_; }
  }
  
  public const int EnvironmentFieldNumber = 7;
  private bool hasEnvironment;
  private int environment_;
  public bool HasEnvironment {
    get { return hasEnvironment; }
  }
  public int Environment {
    get { return environment_; }
  }
  
  public const int ServiceFieldNumber = 8;
  private bool hasService;
  private int service_;
  public bool HasService {
    get { return hasService; }
  }
  public int Service {
    get { return service_; }
  }
  
  public const int DeviceFieldNumber = 9;
  private bool hasDevice;
  private int device_;
  public bool HasDevice {
    get { return hasDevice; }
  }
  public int Device {
    get { return device_; }
  }
  
  public const int DetailFieldNumber = 10;
  private bool hasDetail;
  private string detail_ = "";
  public bool HasDetail {
    get { return hasDetail; }
  }
  public string Detail {
    get { return detail_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasAddtime) return false;
      if (!hasCustomer) return false;
      if (!hasCardnumber) return false;
      if (!hasBonus) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _structCommentFieldNames;
    if (hasAddtime) {
      output.WriteString(1, field_names[0], Addtime);
    }
    if (hasCustomer) {
      output.WriteString(2, field_names[3], Customer);
    }
    if (hasCardnumber) {
      output.WriteString(3, field_names[2], Cardnumber);
    }
    if (hasBonus) {
      output.WriteInt32(4, field_names[1], Bonus);
    }
    if (hasStaff) {
      output.WriteString(5, field_names[9], Staff);
    }
    if (hasPoint) {
      output.WriteInt32(6, field_names[7], Point);
    }
    if (hasEnvironment) {
      output.WriteInt32(7, field_names[6], Environment);
    }
    if (hasService) {
      output.WriteInt32(8, field_names[8], Service);
    }
    if (hasDevice) {
      output.WriteInt32(9, field_names[5], Device);
    }
    if (hasDetail) {
      output.WriteString(10, field_names[4], Detail);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasAddtime) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Addtime);
    }
    if (hasCustomer) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Customer);
    }
    if (hasCardnumber) {
      size += pb::CodedOutputStream.ComputeStringSize(3, Cardnumber);
    }
    if (hasBonus) {
      size += pb::CodedOutputStream.ComputeInt32Size(4, Bonus);
    }
    if (hasStaff) {
      size += pb::CodedOutputStream.ComputeStringSize(5, Staff);
    }
    if (hasPoint) {
      size += pb::CodedOutputStream.ComputeInt32Size(6, Point);
    }
    if (hasEnvironment) {
      size += pb::CodedOutputStream.ComputeInt32Size(7, Environment);
    }
    if (hasService) {
      size += pb::CodedOutputStream.ComputeInt32Size(8, Service);
    }
    if (hasDevice) {
      size += pb::CodedOutputStream.ComputeInt32Size(9, Device);
    }
    if (hasDetail) {
      size += pb::CodedOutputStream.ComputeStringSize(10, Detail);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static StructComment ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static StructComment ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static StructComment ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static StructComment ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static StructComment ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static StructComment ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static StructComment ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static StructComment ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static StructComment ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static StructComment ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private StructComment MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(StructComment prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<StructComment, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(StructComment cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private StructComment result;
    
    private StructComment PrepareBuilder() {
      if (resultIsReadOnly) {
        StructComment original = result;
        result = new StructComment();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override StructComment MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::StructComment.Descriptor; }
    }
    
    public override StructComment DefaultInstanceForType {
      get { return global::StructComment.DefaultInstance; }
    }
    
    public override StructComment BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is StructComment) {
        return MergeFrom((StructComment) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(StructComment other) {
      if (other == global::StructComment.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasAddtime) {
        Addtime = other.Addtime;
      }
      if (other.HasCustomer) {
        Customer = other.Customer;
      }
      if (other.HasCardnumber) {
        Cardnumber = other.Cardnumber;
      }
      if (other.HasBonus) {
        Bonus = other.Bonus;
      }
      if (other.HasStaff) {
        Staff = other.Staff;
      }
      if (other.HasPoint) {
        Point = other.Point;
      }
      if (other.HasEnvironment) {
        Environment = other.Environment;
      }
      if (other.HasService) {
        Service = other.Service;
      }
      if (other.HasDevice) {
        Device = other.Device;
      }
      if (other.HasDetail) {
        Detail = other.Detail;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_structCommentFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _structCommentFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasAddtime = input.ReadString(ref result.addtime_);
            break;
          }
          case 18: {
            result.hasCustomer = input.ReadString(ref result.customer_);
            break;
          }
          case 26: {
            result.hasCardnumber = input.ReadString(ref result.cardnumber_);
            break;
          }
          case 32: {
            result.hasBonus = input.ReadInt32(ref result.bonus_);
            break;
          }
          case 42: {
            result.hasStaff = input.ReadString(ref result.staff_);
            break;
          }
          case 48: {
            result.hasPoint = input.ReadInt32(ref result.point_);
            break;
          }
          case 56: {
            result.hasEnvironment = input.ReadInt32(ref result.environment_);
            break;
          }
          case 64: {
            result.hasService = input.ReadInt32(ref result.service_);
            break;
          }
          case 72: {
            result.hasDevice = input.ReadInt32(ref result.device_);
            break;
          }
          case 82: {
            result.hasDetail = input.ReadString(ref result.detail_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasAddtime {
      get { return result.hasAddtime; }
    }
    public string Addtime {
      get { return result.Addtime; }
      set { SetAddtime(value); }
    }
    public Builder SetAddtime(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasAddtime = true;
      result.addtime_ = value;
      return this;
    }
    public Builder ClearAddtime() {
      PrepareBuilder();
      result.hasAddtime = false;
      result.addtime_ = "";
      return this;
    }
    
    public bool HasCustomer {
      get { return result.hasCustomer; }
    }
    public string Customer {
      get { return result.Customer; }
      set { SetCustomer(value); }
    }
    public Builder SetCustomer(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCustomer = true;
      result.customer_ = value;
      return this;
    }
    public Builder ClearCustomer() {
      PrepareBuilder();
      result.hasCustomer = false;
      result.customer_ = "";
      return this;
    }
    
    public bool HasCardnumber {
      get { return result.hasCardnumber; }
    }
    public string Cardnumber {
      get { return result.Cardnumber; }
      set { SetCardnumber(value); }
    }
    public Builder SetCardnumber(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCardnumber = true;
      result.cardnumber_ = value;
      return this;
    }
    public Builder ClearCardnumber() {
      PrepareBuilder();
      result.hasCardnumber = false;
      result.cardnumber_ = "";
      return this;
    }
    
    public bool HasBonus {
      get { return result.hasBonus; }
    }
    public int Bonus {
      get { return result.Bonus; }
      set { SetBonus(value); }
    }
    public Builder SetBonus(int value) {
      PrepareBuilder();
      result.hasBonus = true;
      result.bonus_ = value;
      return this;
    }
    public Builder ClearBonus() {
      PrepareBuilder();
      result.hasBonus = false;
      result.bonus_ = 0;
      return this;
    }
    
    public bool HasStaff {
      get { return result.hasStaff; }
    }
    public string Staff {
      get { return result.Staff; }
      set { SetStaff(value); }
    }
    public Builder SetStaff(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasStaff = true;
      result.staff_ = value;
      return this;
    }
    public Builder ClearStaff() {
      PrepareBuilder();
      result.hasStaff = false;
      result.staff_ = "";
      return this;
    }
    
    public bool HasPoint {
      get { return result.hasPoint; }
    }
    public int Point {
      get { return result.Point; }
      set { SetPoint(value); }
    }
    public Builder SetPoint(int value) {
      PrepareBuilder();
      result.hasPoint = true;
      result.point_ = value;
      return this;
    }
    public Builder ClearPoint() {
      PrepareBuilder();
      result.hasPoint = false;
      result.point_ = 0;
      return this;
    }
    
    public bool HasEnvironment {
      get { return result.hasEnvironment; }
    }
    public int Environment {
      get { return result.Environment; }
      set { SetEnvironment(value); }
    }
    public Builder SetEnvironment(int value) {
      PrepareBuilder();
      result.hasEnvironment = true;
      result.environment_ = value;
      return this;
    }
    public Builder ClearEnvironment() {
      PrepareBuilder();
      result.hasEnvironment = false;
      result.environment_ = 0;
      return this;
    }
    
    public bool HasService {
      get { return result.hasService; }
    }
    public int Service {
      get { return result.Service; }
      set { SetService(value); }
    }
    public Builder SetService(int value) {
      PrepareBuilder();
      result.hasService = true;
      result.service_ = value;
      return this;
    }
    public Builder ClearService() {
      PrepareBuilder();
      result.hasService = false;
      result.service_ = 0;
      return this;
    }
    
    public bool HasDevice {
      get { return result.hasDevice; }
    }
    public int Device {
      get { return result.Device; }
      set { SetDevice(value); }
    }
    public Builder SetDevice(int value) {
      PrepareBuilder();
      result.hasDevice = true;
      result.device_ = value;
      return this;
    }
    public Builder ClearDevice() {
      PrepareBuilder();
      result.hasDevice = false;
      result.device_ = 0;
      return this;
    }
    
    public bool HasDetail {
      get { return result.hasDetail; }
    }
    public string Detail {
      get { return result.Detail; }
      set { SetDetail(value); }
    }
    public Builder SetDetail(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasDetail = true;
      result.detail_ = value;
      return this;
    }
    public Builder ClearDetail() {
      PrepareBuilder();
      result.hasDetail = false;
      result.detail_ = "";
      return this;
    }
  }
  static StructComment() {
    object.ReferenceEquals(global::BaseStruct.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class StructPerform : pb::GeneratedMessage<StructPerform, StructPerform.Builder> {
  private StructPerform() { }
  private static readonly StructPerform defaultInstance = new StructPerform().MakeReadOnly();
  private static readonly string[] _structPerformFieldNames = new string[] { "charge", "hours", "name", "role", "sales", "satisfy" };
  private static readonly uint[] _structPerformFieldTags = new uint[] { 32, 24, 10, 18, 40, 48 };
  public static StructPerform DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override StructPerform DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override StructPerform ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::BaseStruct.internal__static_StructPerform__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<StructPerform, StructPerform.Builder> InternalFieldAccessors {
    get { return global::BaseStruct.internal__static_StructPerform__FieldAccessorTable; }
  }
  
  public const int NameFieldNumber = 1;
  private bool hasName;
  private string name_ = "";
  public bool HasName {
    get { return hasName; }
  }
  public string Name {
    get { return name_; }
  }
  
  public const int RoleFieldNumber = 2;
  private bool hasRole;
  private string role_ = "";
  public bool HasRole {
    get { return hasRole; }
  }
  public string Role {
    get { return role_; }
  }
  
  public const int HoursFieldNumber = 3;
  private bool hasHours;
  private int hours_;
  public bool HasHours {
    get { return hasHours; }
  }
  public int Hours {
    get { return hours_; }
  }
  
  public const int ChargeFieldNumber = 4;
  private bool hasCharge;
  private int charge_;
  public bool HasCharge {
    get { return hasCharge; }
  }
  public int Charge {
    get { return charge_; }
  }
  
  public const int SalesFieldNumber = 5;
  private bool hasSales;
  private int sales_;
  public bool HasSales {
    get { return hasSales; }
  }
  public int Sales {
    get { return sales_; }
  }
  
  public const int SatisfyFieldNumber = 6;
  private bool hasSatisfy;
  private int satisfy_;
  public bool HasSatisfy {
    get { return hasSatisfy; }
  }
  public int Satisfy {
    get { return satisfy_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasName) return false;
      if (!hasRole) return false;
      if (!hasHours) return false;
      if (!hasCharge) return false;
      if (!hasSales) return false;
      if (!hasSatisfy) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _structPerformFieldNames;
    if (hasName) {
      output.WriteString(1, field_names[2], Name);
    }
    if (hasRole) {
      output.WriteString(2, field_names[3], Role);
    }
    if (hasHours) {
      output.WriteInt32(3, field_names[1], Hours);
    }
    if (hasCharge) {
      output.WriteInt32(4, field_names[0], Charge);
    }
    if (hasSales) {
      output.WriteInt32(5, field_names[4], Sales);
    }
    if (hasSatisfy) {
      output.WriteInt32(6, field_names[5], Satisfy);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasName) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Name);
    }
    if (hasRole) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Role);
    }
    if (hasHours) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, Hours);
    }
    if (hasCharge) {
      size += pb::CodedOutputStream.ComputeInt32Size(4, Charge);
    }
    if (hasSales) {
      size += pb::CodedOutputStream.ComputeInt32Size(5, Sales);
    }
    if (hasSatisfy) {
      size += pb::CodedOutputStream.ComputeInt32Size(6, Satisfy);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static StructPerform ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static StructPerform ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static StructPerform ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static StructPerform ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static StructPerform ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static StructPerform ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static StructPerform ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static StructPerform ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static StructPerform ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static StructPerform ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private StructPerform MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(StructPerform prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<StructPerform, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(StructPerform cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private StructPerform result;
    
    private StructPerform PrepareBuilder() {
      if (resultIsReadOnly) {
        StructPerform original = result;
        result = new StructPerform();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override StructPerform MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::StructPerform.Descriptor; }
    }
    
    public override StructPerform DefaultInstanceForType {
      get { return global::StructPerform.DefaultInstance; }
    }
    
    public override StructPerform BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is StructPerform) {
        return MergeFrom((StructPerform) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(StructPerform other) {
      if (other == global::StructPerform.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasRole) {
        Role = other.Role;
      }
      if (other.HasHours) {
        Hours = other.Hours;
      }
      if (other.HasCharge) {
        Charge = other.Charge;
      }
      if (other.HasSales) {
        Sales = other.Sales;
      }
      if (other.HasSatisfy) {
        Satisfy = other.Satisfy;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_structPerformFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _structPerformFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasName = input.ReadString(ref result.name_);
            break;
          }
          case 18: {
            result.hasRole = input.ReadString(ref result.role_);
            break;
          }
          case 24: {
            result.hasHours = input.ReadInt32(ref result.hours_);
            break;
          }
          case 32: {
            result.hasCharge = input.ReadInt32(ref result.charge_);
            break;
          }
          case 40: {
            result.hasSales = input.ReadInt32(ref result.sales_);
            break;
          }
          case 48: {
            result.hasSatisfy = input.ReadInt32(ref result.satisfy_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasName {
      get { return result.hasName; }
    }
    public string Name {
      get { return result.Name; }
      set { SetName(value); }
    }
    public Builder SetName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasName = true;
      result.name_ = value;
      return this;
    }
    public Builder ClearName() {
      PrepareBuilder();
      result.hasName = false;
      result.name_ = "";
      return this;
    }
    
    public bool HasRole {
      get { return result.hasRole; }
    }
    public string Role {
      get { return result.Role; }
      set { SetRole(value); }
    }
    public Builder SetRole(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasRole = true;
      result.role_ = value;
      return this;
    }
    public Builder ClearRole() {
      PrepareBuilder();
      result.hasRole = false;
      result.role_ = "";
      return this;
    }
    
    public bool HasHours {
      get { return result.hasHours; }
    }
    public int Hours {
      get { return result.Hours; }
      set { SetHours(value); }
    }
    public Builder SetHours(int value) {
      PrepareBuilder();
      result.hasHours = true;
      result.hours_ = value;
      return this;
    }
    public Builder ClearHours() {
      PrepareBuilder();
      result.hasHours = false;
      result.hours_ = 0;
      return this;
    }
    
    public bool HasCharge {
      get { return result.hasCharge; }
    }
    public int Charge {
      get { return result.Charge; }
      set { SetCharge(value); }
    }
    public Builder SetCharge(int value) {
      PrepareBuilder();
      result.hasCharge = true;
      result.charge_ = value;
      return this;
    }
    public Builder ClearCharge() {
      PrepareBuilder();
      result.hasCharge = false;
      result.charge_ = 0;
      return this;
    }
    
    public bool HasSales {
      get { return result.hasSales; }
    }
    public int Sales {
      get { return result.Sales; }
      set { SetSales(value); }
    }
    public Builder SetSales(int value) {
      PrepareBuilder();
      result.hasSales = true;
      result.sales_ = value;
      return this;
    }
    public Builder ClearSales() {
      PrepareBuilder();
      result.hasSales = false;
      result.sales_ = 0;
      return this;
    }
    
    public bool HasSatisfy {
      get { return result.hasSatisfy; }
    }
    public int Satisfy {
      get { return result.Satisfy; }
      set { SetSatisfy(value); }
    }
    public Builder SetSatisfy(int value) {
      PrepareBuilder();
      result.hasSatisfy = true;
      result.satisfy_ = value;
      return this;
    }
    public Builder ClearSatisfy() {
      PrepareBuilder();
      result.hasSatisfy = false;
      result.satisfy_ = 0;
      return this;
    }
  }
  static StructPerform() {
    object.ReferenceEquals(global::BaseStruct.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class StructLog : pb::GeneratedMessage<StructLog, StructLog.Builder> {
  private StructLog() { }
  private static readonly StructLog defaultInstance = new StructLog().MakeReadOnly();
  private static readonly string[] _structLogFieldNames = new string[] { "addtime", "ip", "operation", "operator", "status" };
  private static readonly uint[] _structLogFieldTags = new uint[] { 34, 26, 18, 10, 42 };
  public static StructLog DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override StructLog DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override StructLog ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::BaseStruct.internal__static_StructLog__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<StructLog, StructLog.Builder> InternalFieldAccessors {
    get { return global::BaseStruct.internal__static_StructLog__FieldAccessorTable; }
  }
  
  public const int OperatorFieldNumber = 1;
  private bool hasOperator;
  private string operator_ = "";
  public bool HasOperator {
    get { return hasOperator; }
  }
  public string Operator {
    get { return operator_; }
  }
  
  public const int OperationFieldNumber = 2;
  private bool hasOperation;
  private string operation_ = "";
  public bool HasOperation {
    get { return hasOperation; }
  }
  public string Operation {
    get { return operation_; }
  }
  
  public const int IpFieldNumber = 3;
  private bool hasIp;
  private string ip_ = "";
  public bool HasIp {
    get { return hasIp; }
  }
  public string Ip {
    get { return ip_; }
  }
  
  public const int AddtimeFieldNumber = 4;
  private bool hasAddtime;
  private string addtime_ = "";
  public bool HasAddtime {
    get { return hasAddtime; }
  }
  public string Addtime {
    get { return addtime_; }
  }
  
  public const int StatusFieldNumber = 5;
  private bool hasStatus;
  private string status_ = "";
  public bool HasStatus {
    get { return hasStatus; }
  }
  public string Status {
    get { return status_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasOperator) return false;
      if (!hasOperation) return false;
      if (!hasIp) return false;
      if (!hasAddtime) return false;
      if (!hasStatus) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _structLogFieldNames;
    if (hasOperator) {
      output.WriteString(1, field_names[3], Operator);
    }
    if (hasOperation) {
      output.WriteString(2, field_names[2], Operation);
    }
    if (hasIp) {
      output.WriteString(3, field_names[1], Ip);
    }
    if (hasAddtime) {
      output.WriteString(4, field_names[0], Addtime);
    }
    if (hasStatus) {
      output.WriteString(5, field_names[4], Status);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasOperator) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Operator);
    }
    if (hasOperation) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Operation);
    }
    if (hasIp) {
      size += pb::CodedOutputStream.ComputeStringSize(3, Ip);
    }
    if (hasAddtime) {
      size += pb::CodedOutputStream.ComputeStringSize(4, Addtime);
    }
    if (hasStatus) {
      size += pb::CodedOutputStream.ComputeStringSize(5, Status);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static StructLog ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static StructLog ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static StructLog ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static StructLog ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static StructLog ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static StructLog ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static StructLog ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static StructLog ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static StructLog ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static StructLog ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private StructLog MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(StructLog prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<StructLog, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(StructLog cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private StructLog result;
    
    private StructLog PrepareBuilder() {
      if (resultIsReadOnly) {
        StructLog original = result;
        result = new StructLog();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override StructLog MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::StructLog.Descriptor; }
    }
    
    public override StructLog DefaultInstanceForType {
      get { return global::StructLog.DefaultInstance; }
    }
    
    public override StructLog BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is StructLog) {
        return MergeFrom((StructLog) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(StructLog other) {
      if (other == global::StructLog.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasOperator) {
        Operator = other.Operator;
      }
      if (other.HasOperation) {
        Operation = other.Operation;
      }
      if (other.HasIp) {
        Ip = other.Ip;
      }
      if (other.HasAddtime) {
        Addtime = other.Addtime;
      }
      if (other.HasStatus) {
        Status = other.Status;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_structLogFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _structLogFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasOperator = input.ReadString(ref result.operator_);
            break;
          }
          case 18: {
            result.hasOperation = input.ReadString(ref result.operation_);
            break;
          }
          case 26: {
            result.hasIp = input.ReadString(ref result.ip_);
            break;
          }
          case 34: {
            result.hasAddtime = input.ReadString(ref result.addtime_);
            break;
          }
          case 42: {
            result.hasStatus = input.ReadString(ref result.status_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasOperator {
      get { return result.hasOperator; }
    }
    public string Operator {
      get { return result.Operator; }
      set { SetOperator(value); }
    }
    public Builder SetOperator(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasOperator = true;
      result.operator_ = value;
      return this;
    }
    public Builder ClearOperator() {
      PrepareBuilder();
      result.hasOperator = false;
      result.operator_ = "";
      return this;
    }
    
    public bool HasOperation {
      get { return result.hasOperation; }
    }
    public string Operation {
      get { return result.Operation; }
      set { SetOperation(value); }
    }
    public Builder SetOperation(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasOperation = true;
      result.operation_ = value;
      return this;
    }
    public Builder ClearOperation() {
      PrepareBuilder();
      result.hasOperation = false;
      result.operation_ = "";
      return this;
    }
    
    public bool HasIp {
      get { return result.hasIp; }
    }
    public string Ip {
      get { return result.Ip; }
      set { SetIp(value); }
    }
    public Builder SetIp(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasIp = true;
      result.ip_ = value;
      return this;
    }
    public Builder ClearIp() {
      PrepareBuilder();
      result.hasIp = false;
      result.ip_ = "";
      return this;
    }
    
    public bool HasAddtime {
      get { return result.hasAddtime; }
    }
    public string Addtime {
      get { return result.Addtime; }
      set { SetAddtime(value); }
    }
    public Builder SetAddtime(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasAddtime = true;
      result.addtime_ = value;
      return this;
    }
    public Builder ClearAddtime() {
      PrepareBuilder();
      result.hasAddtime = false;
      result.addtime_ = "";
      return this;
    }
    
    public bool HasStatus {
      get { return result.hasStatus; }
    }
    public string Status {
      get { return result.Status; }
      set { SetStatus(value); }
    }
    public Builder SetStatus(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = value;
      return this;
    }
    public Builder ClearStatus() {
      PrepareBuilder();
      result.hasStatus = false;
      result.status_ = "";
      return this;
    }
  }
  static StructLog() {
    object.ReferenceEquals(global::BaseStruct.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class StructAreaTotal : pb::GeneratedMessage<StructAreaTotal, StructAreaTotal.Builder> {
  private StructAreaTotal() { }
  private static readonly StructAreaTotal defaultInstance = new StructAreaTotal().MakeReadOnly();
  private static readonly string[] _structAreaTotalFieldNames = new string[] { "amount", "areaname" };
  private static readonly uint[] _structAreaTotalFieldTags = new uint[] { 16, 10 };
  public static StructAreaTotal DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override StructAreaTotal DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override StructAreaTotal ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::BaseStruct.internal__static_StructAreaTotal__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<StructAreaTotal, StructAreaTotal.Builder> InternalFieldAccessors {
    get { return global::BaseStruct.internal__static_StructAreaTotal__FieldAccessorTable; }
  }
  
  public const int AreanameFieldNumber = 1;
  private bool hasAreaname;
  private string areaname_ = "";
  public bool HasAreaname {
    get { return hasAreaname; }
  }
  public string Areaname {
    get { return areaname_; }
  }
  
  public const int AmountFieldNumber = 2;
  private bool hasAmount;
  private int amount_;
  public bool HasAmount {
    get { return hasAmount; }
  }
  public int Amount {
    get { return amount_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasAreaname) return false;
      if (!hasAmount) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _structAreaTotalFieldNames;
    if (hasAreaname) {
      output.WriteString(1, field_names[1], Areaname);
    }
    if (hasAmount) {
      output.WriteInt32(2, field_names[0], Amount);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasAreaname) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Areaname);
    }
    if (hasAmount) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Amount);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static StructAreaTotal ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static StructAreaTotal ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static StructAreaTotal ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static StructAreaTotal ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static StructAreaTotal ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static StructAreaTotal ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static StructAreaTotal ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static StructAreaTotal ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static StructAreaTotal ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static StructAreaTotal ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private StructAreaTotal MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(StructAreaTotal prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<StructAreaTotal, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(StructAreaTotal cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private StructAreaTotal result;
    
    private StructAreaTotal PrepareBuilder() {
      if (resultIsReadOnly) {
        StructAreaTotal original = result;
        result = new StructAreaTotal();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override StructAreaTotal MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::StructAreaTotal.Descriptor; }
    }
    
    public override StructAreaTotal DefaultInstanceForType {
      get { return global::StructAreaTotal.DefaultInstance; }
    }
    
    public override StructAreaTotal BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is StructAreaTotal) {
        return MergeFrom((StructAreaTotal) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(StructAreaTotal other) {
      if (other == global::StructAreaTotal.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasAreaname) {
        Areaname = other.Areaname;
      }
      if (other.HasAmount) {
        Amount = other.Amount;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_structAreaTotalFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _structAreaTotalFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasAreaname = input.ReadString(ref result.areaname_);
            break;
          }
          case 16: {
            result.hasAmount = input.ReadInt32(ref result.amount_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasAreaname {
      get { return result.hasAreaname; }
    }
    public string Areaname {
      get { return result.Areaname; }
      set { SetAreaname(value); }
    }
    public Builder SetAreaname(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasAreaname = true;
      result.areaname_ = value;
      return this;
    }
    public Builder ClearAreaname() {
      PrepareBuilder();
      result.hasAreaname = false;
      result.areaname_ = "";
      return this;
    }
    
    public bool HasAmount {
      get { return result.hasAmount; }
    }
    public int Amount {
      get { return result.Amount; }
      set { SetAmount(value); }
    }
    public Builder SetAmount(int value) {
      PrepareBuilder();
      result.hasAmount = true;
      result.amount_ = value;
      return this;
    }
    public Builder ClearAmount() {
      PrepareBuilder();
      result.hasAmount = false;
      result.amount_ = 0;
      return this;
    }
  }
  static StructAreaTotal() {
    object.ReferenceEquals(global::BaseStruct.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class StructEarn : pb::GeneratedMessage<StructEarn, StructEarn.Builder> {
  private StructEarn() { }
  private static readonly StructEarn defaultInstance = new StructEarn().MakeReadOnly();
  private static readonly string[] _structEarnFieldNames = new string[] { "alipay_charge", "alipay_sale", "area_total", "cash_charge", "cash_sale", "datetime", "tenpay_charge", "tenpay_sale" };
  private static readonly uint[] _structEarnFieldTags = new uint[] { 16, 24, 66, 48, 56, 8, 32, 40 };
  public static StructEarn DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override StructEarn DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override StructEarn ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::BaseStruct.internal__static_StructEarn__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<StructEarn, StructEarn.Builder> InternalFieldAccessors {
    get { return global::BaseStruct.internal__static_StructEarn__FieldAccessorTable; }
  }
  
  public const int DatetimeFieldNumber = 1;
  private bool hasDatetime;
  private int datetime_;
  public bool HasDatetime {
    get { return hasDatetime; }
  }
  public int Datetime {
    get { return datetime_; }
  }
  
  public const int AlipayChargeFieldNumber = 2;
  private bool hasAlipayCharge;
  private int alipayCharge_;
  public bool HasAlipayCharge {
    get { return hasAlipayCharge; }
  }
  public int AlipayCharge {
    get { return alipayCharge_; }
  }
  
  public const int AlipaySaleFieldNumber = 3;
  private bool hasAlipaySale;
  private int alipaySale_;
  public bool HasAlipaySale {
    get { return hasAlipaySale; }
  }
  public int AlipaySale {
    get { return alipaySale_; }
  }
  
  public const int TenpayChargeFieldNumber = 4;
  private bool hasTenpayCharge;
  private int tenpayCharge_;
  public bool HasTenpayCharge {
    get { return hasTenpayCharge; }
  }
  public int TenpayCharge {
    get { return tenpayCharge_; }
  }
  
  public const int TenpaySaleFieldNumber = 5;
  private bool hasTenpaySale;
  private int tenpaySale_;
  public bool HasTenpaySale {
    get { return hasTenpaySale; }
  }
  public int TenpaySale {
    get { return tenpaySale_; }
  }
  
  public const int CashChargeFieldNumber = 6;
  private bool hasCashCharge;
  private int cashCharge_;
  public bool HasCashCharge {
    get { return hasCashCharge; }
  }
  public int CashCharge {
    get { return cashCharge_; }
  }
  
  public const int CashSaleFieldNumber = 7;
  private bool hasCashSale;
  private int cashSale_;
  public bool HasCashSale {
    get { return hasCashSale; }
  }
  public int CashSale {
    get { return cashSale_; }
  }
  
  public const int AreaTotalFieldNumber = 8;
  private pbc::PopsicleList<global::StructAreaTotal> areaTotal_ = new pbc::PopsicleList<global::StructAreaTotal>();
  public scg::IList<global::StructAreaTotal> AreaTotalList {
    get { return areaTotal_; }
  }
  public int AreaTotalCount {
    get { return areaTotal_.Count; }
  }
  public global::StructAreaTotal GetAreaTotal(int index) {
    return areaTotal_[index];
  }
  
  public override bool IsInitialized {
    get {
      if (!hasDatetime) return false;
      if (!hasAlipayCharge) return false;
      if (!hasAlipaySale) return false;
      if (!hasTenpayCharge) return false;
      if (!hasTenpaySale) return false;
      if (!hasCashCharge) return false;
      if (!hasCashSale) return false;
      foreach (global::StructAreaTotal element in AreaTotalList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _structEarnFieldNames;
    if (hasDatetime) {
      output.WriteInt32(1, field_names[5], Datetime);
    }
    if (hasAlipayCharge) {
      output.WriteInt32(2, field_names[0], AlipayCharge);
    }
    if (hasAlipaySale) {
      output.WriteInt32(3, field_names[1], AlipaySale);
    }
    if (hasTenpayCharge) {
      output.WriteInt32(4, field_names[6], TenpayCharge);
    }
    if (hasTenpaySale) {
      output.WriteInt32(5, field_names[7], TenpaySale);
    }
    if (hasCashCharge) {
      output.WriteInt32(6, field_names[3], CashCharge);
    }
    if (hasCashSale) {
      output.WriteInt32(7, field_names[4], CashSale);
    }
    if (areaTotal_.Count > 0) {
      output.WriteMessageArray(8, field_names[2], areaTotal_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasDatetime) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Datetime);
    }
    if (hasAlipayCharge) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, AlipayCharge);
    }
    if (hasAlipaySale) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, AlipaySale);
    }
    if (hasTenpayCharge) {
      size += pb::CodedOutputStream.ComputeInt32Size(4, TenpayCharge);
    }
    if (hasTenpaySale) {
      size += pb::CodedOutputStream.ComputeInt32Size(5, TenpaySale);
    }
    if (hasCashCharge) {
      size += pb::CodedOutputStream.ComputeInt32Size(6, CashCharge);
    }
    if (hasCashSale) {
      size += pb::CodedOutputStream.ComputeInt32Size(7, CashSale);
    }
    foreach (global::StructAreaTotal element in AreaTotalList) {
      size += pb::CodedOutputStream.ComputeMessageSize(8, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static StructEarn ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static StructEarn ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static StructEarn ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static StructEarn ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static StructEarn ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static StructEarn ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static StructEarn ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static StructEarn ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static StructEarn ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static StructEarn ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private StructEarn MakeReadOnly() {
    areaTotal_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(StructEarn prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<StructEarn, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(StructEarn cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private StructEarn result;
    
    private StructEarn PrepareBuilder() {
      if (resultIsReadOnly) {
        StructEarn original = result;
        result = new StructEarn();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override StructEarn MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::StructEarn.Descriptor; }
    }
    
    public override StructEarn DefaultInstanceForType {
      get { return global::StructEarn.DefaultInstance; }
    }
    
    public override StructEarn BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is StructEarn) {
        return MergeFrom((StructEarn) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(StructEarn other) {
      if (other == global::StructEarn.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasDatetime) {
        Datetime = other.Datetime;
      }
      if (other.HasAlipayCharge) {
        AlipayCharge = other.AlipayCharge;
      }
      if (other.HasAlipaySale) {
        AlipaySale = other.AlipaySale;
      }
      if (other.HasTenpayCharge) {
        TenpayCharge = other.TenpayCharge;
      }
      if (other.HasTenpaySale) {
        TenpaySale = other.TenpaySale;
      }
      if (other.HasCashCharge) {
        CashCharge = other.CashCharge;
      }
      if (other.HasCashSale) {
        CashSale = other.CashSale;
      }
      if (other.areaTotal_.Count != 0) {
        result.areaTotal_.Add(other.areaTotal_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_structEarnFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _structEarnFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasDatetime = input.ReadInt32(ref result.datetime_);
            break;
          }
          case 16: {
            result.hasAlipayCharge = input.ReadInt32(ref result.alipayCharge_);
            break;
          }
          case 24: {
            result.hasAlipaySale = input.ReadInt32(ref result.alipaySale_);
            break;
          }
          case 32: {
            result.hasTenpayCharge = input.ReadInt32(ref result.tenpayCharge_);
            break;
          }
          case 40: {
            result.hasTenpaySale = input.ReadInt32(ref result.tenpaySale_);
            break;
          }
          case 48: {
            result.hasCashCharge = input.ReadInt32(ref result.cashCharge_);
            break;
          }
          case 56: {
            result.hasCashSale = input.ReadInt32(ref result.cashSale_);
            break;
          }
          case 66: {
            input.ReadMessageArray(tag, field_name, result.areaTotal_, global::StructAreaTotal.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasDatetime {
      get { return result.hasDatetime; }
    }
    public int Datetime {
      get { return result.Datetime; }
      set { SetDatetime(value); }
    }
    public Builder SetDatetime(int value) {
      PrepareBuilder();
      result.hasDatetime = true;
      result.datetime_ = value;
      return this;
    }
    public Builder ClearDatetime() {
      PrepareBuilder();
      result.hasDatetime = false;
      result.datetime_ = 0;
      return this;
    }
    
    public bool HasAlipayCharge {
      get { return result.hasAlipayCharge; }
    }
    public int AlipayCharge {
      get { return result.AlipayCharge; }
      set { SetAlipayCharge(value); }
    }
    public Builder SetAlipayCharge(int value) {
      PrepareBuilder();
      result.hasAlipayCharge = true;
      result.alipayCharge_ = value;
      return this;
    }
    public Builder ClearAlipayCharge() {
      PrepareBuilder();
      result.hasAlipayCharge = false;
      result.alipayCharge_ = 0;
      return this;
    }
    
    public bool HasAlipaySale {
      get { return result.hasAlipaySale; }
    }
    public int AlipaySale {
      get { return result.AlipaySale; }
      set { SetAlipaySale(value); }
    }
    public Builder SetAlipaySale(int value) {
      PrepareBuilder();
      result.hasAlipaySale = true;
      result.alipaySale_ = value;
      return this;
    }
    public Builder ClearAlipaySale() {
      PrepareBuilder();
      result.hasAlipaySale = false;
      result.alipaySale_ = 0;
      return this;
    }
    
    public bool HasTenpayCharge {
      get { return result.hasTenpayCharge; }
    }
    public int TenpayCharge {
      get { return result.TenpayCharge; }
      set { SetTenpayCharge(value); }
    }
    public Builder SetTenpayCharge(int value) {
      PrepareBuilder();
      result.hasTenpayCharge = true;
      result.tenpayCharge_ = value;
      return this;
    }
    public Builder ClearTenpayCharge() {
      PrepareBuilder();
      result.hasTenpayCharge = false;
      result.tenpayCharge_ = 0;
      return this;
    }
    
    public bool HasTenpaySale {
      get { return result.hasTenpaySale; }
    }
    public int TenpaySale {
      get { return result.TenpaySale; }
      set { SetTenpaySale(value); }
    }
    public Builder SetTenpaySale(int value) {
      PrepareBuilder();
      result.hasTenpaySale = true;
      result.tenpaySale_ = value;
      return this;
    }
    public Builder ClearTenpaySale() {
      PrepareBuilder();
      result.hasTenpaySale = false;
      result.tenpaySale_ = 0;
      return this;
    }
    
    public bool HasCashCharge {
      get { return result.hasCashCharge; }
    }
    public int CashCharge {
      get { return result.CashCharge; }
      set { SetCashCharge(value); }
    }
    public Builder SetCashCharge(int value) {
      PrepareBuilder();
      result.hasCashCharge = true;
      result.cashCharge_ = value;
      return this;
    }
    public Builder ClearCashCharge() {
      PrepareBuilder();
      result.hasCashCharge = false;
      result.cashCharge_ = 0;
      return this;
    }
    
    public bool HasCashSale {
      get { return result.hasCashSale; }
    }
    public int CashSale {
      get { return result.CashSale; }
      set { SetCashSale(value); }
    }
    public Builder SetCashSale(int value) {
      PrepareBuilder();
      result.hasCashSale = true;
      result.cashSale_ = value;
      return this;
    }
    public Builder ClearCashSale() {
      PrepareBuilder();
      result.hasCashSale = false;
      result.cashSale_ = 0;
      return this;
    }
    
    public pbc::IPopsicleList<global::StructAreaTotal> AreaTotalList {
      get { return PrepareBuilder().areaTotal_; }
    }
    public int AreaTotalCount {
      get { return result.AreaTotalCount; }
    }
    public global::StructAreaTotal GetAreaTotal(int index) {
      return result.GetAreaTotal(index);
    }
    public Builder SetAreaTotal(int index, global::StructAreaTotal value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.areaTotal_[index] = value;
      return this;
    }
    public Builder SetAreaTotal(int index, global::StructAreaTotal.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.areaTotal_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddAreaTotal(global::StructAreaTotal value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.areaTotal_.Add(value);
      return this;
    }
    public Builder AddAreaTotal(global::StructAreaTotal.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.areaTotal_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeAreaTotal(scg::IEnumerable<global::StructAreaTotal> values) {
      PrepareBuilder();
      result.areaTotal_.Add(values);
      return this;
    }
    public Builder ClearAreaTotal() {
      PrepareBuilder();
      result.areaTotal_.Clear();
      return this;
    }
  }
  static StructEarn() {
    object.ReferenceEquals(global::BaseStruct.Descriptor, null);
  }
}

#endregion


#endregion Designer generated code
