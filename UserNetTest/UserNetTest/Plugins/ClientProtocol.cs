// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public static partial class ClientProtocol {

  #region Extension registration
  public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
  }
  #endregion
  #region Static variables
  internal static pbd::MessageDescriptor internal__static_MessagePack__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::MessagePack, global::MessagePack.Builder> internal__static_MessagePack__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_MessageContent__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::MessageContent, global::MessageContent.Builder> internal__static_MessageContent__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSClientOpen__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSClientOpen, global::CSClientOpen.Builder> internal__static_CSClientOpen__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSClientClose__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSClientClose, global::CSClientClose.Builder> internal__static_CSClientClose__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSLogon__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSLogon, global::CSLogon.Builder> internal__static_CSLogon__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCLogon__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCLogon, global::SCLogon.Builder> internal__static_SCLogon__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSLogoff__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSLogoff, global::CSLogoff.Builder> internal__static_CSLogoff__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCLogoff__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCLogoff, global::SCLogoff.Builder> internal__static_SCLogoff__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSHungup__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSHungup, global::CSHungup.Builder> internal__static_CSHungup__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSPreCharge__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSPreCharge, global::CSPreCharge.Builder> internal__static_CSPreCharge__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCPreCharge__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCPreCharge, global::SCPreCharge.Builder> internal__static_SCPreCharge__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCToCharge__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCToCharge, global::SCToCharge.Builder> internal__static_SCToCharge__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSGoodsFind__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSGoodsFind, global::CSGoodsFind.Builder> internal__static_CSGoodsFind__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCGoodsFind__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCGoodsFind, global::SCGoodsFind.Builder> internal__static_SCGoodsFind__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSCartAdd__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSCartAdd, global::CSCartAdd.Builder> internal__static_CSCartAdd__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSCartDel__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSCartDel, global::CSCartDel.Builder> internal__static_CSCartDel__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSPreBuy__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSPreBuy, global::CSPreBuy.Builder> internal__static_CSPreBuy__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCPreBuy__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCPreBuy, global::SCPreBuy.Builder> internal__static_SCPreBuy__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCToBuy__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCToBuy, global::SCToBuy.Builder> internal__static_SCToBuy__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCSysMessage__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCSysMessage, global::SCSysMessage.Builder> internal__static_SCSysMessage__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSCommand__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSCommand, global::CSCommand.Builder> internal__static_CSCommand__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSEvaluate__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSEvaluate, global::CSEvaluate.Builder> internal__static_CSEvaluate__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCEvaluate__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCEvaluate, global::SCEvaluate.Builder> internal__static_SCEvaluate__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSVerifyCode__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSVerifyCode, global::CSVerifyCode.Builder> internal__static_CSVerifyCode__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCVerifyCode__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCVerifyCode, global::SCVerifyCode.Builder> internal__static_SCVerifyCode__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSBindMobile__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSBindMobile, global::CSBindMobile.Builder> internal__static_CSBindMobile__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCBindMobile__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCBindMobile, global::SCBindMobile.Builder> internal__static_SCBindMobile__FieldAccessorTable;
  #endregion
  #region Descriptor
  public static pbd::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbd::FileDescriptor descriptor;
  
  static ClientProtocol() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChRDbGllbnRQcm90b2NvbC5wcm90bxoQQmFzZVN0cnVjdC5wcm90byJmCgtN", 
          "ZXNzYWdlUGFjaxIRCgNjbWQYASACKA4yBC5DbWQSDwoHdmVyc2lvbhgCIAEo", 
          "BRIRCglzZXNzaW9uSWQYAyABKAUSIAoHY29udGVudBgEIAEoCzIPLk1lc3Nh", 
          "Z2VDb250ZW50IpEHCg5NZXNzYWdlQ29udGVudBITCgttZXNzYWdlVHlwZRgB", 
          "IAIoBRIhCghlcnJvclRpcBgCIAEoCzIPLlN0cnVjdEVycm9yVGlwEh0KCWNz", 
          "Q29tbWFuZBgNIAEoCzIKLkNTQ29tbWFuZBIhCgtjc0dvb2RzRmluZBhHIAEo", 
          "CzIMLkNTR29vZHNGaW5kEiEKC3NjR29vZHNGaW5kGEggASgLMgwuU0NHb29k", 
          "c0ZpbmQSJAoMY3NDbGllbnRPcGVuGMgBIAEoCzINLkNTQ2xpZW50T3BlbhIm", 
          "Cg1jc0NsaWVudENsb3NlGMkBIAEoCzIOLkNTQ2xpZW50Q2xvc2USGgoHY3NM", 
          "b2dvbhjKASABKAsyCC5DU0xvZ29uEhoKB3NjTG9nb24YywEgASgLMgguU0NM", 
          "b2dvbhIcCghjc0xvZ29mZhjMASABKAsyCS5DU0xvZ29mZhIcCghzY0xvZ29m", 
          "ZhjNASABKAsyCS5TQ0xvZ29mZhIcCghjc0h1bmd1cBjOASABKAsyCS5DU0h1", 
          "bmd1cBIiCgtjc1ByZUNoYXJnZRjPASABKAsyDC5DU1ByZUNoYXJnZRIiCgtz", 
          "Y1ByZUNoYXJnZRjQASABKAsyDC5TQ1ByZUNoYXJnZRIgCgpzY1RvQ2hhcmdl", 
          "GNEBIAEoCzILLlNDVG9DaGFyZ2USHgoJY3NDYXJ0QWRkGNMBIAEoCzIKLkNT", 
          "Q2FydEFkZBIeCgljc0NhcnREZWwY1AEgASgLMgouQ1NDYXJ0RGVsEhwKCGNz", 
          "UHJlQnV5GNUBIAEoCzIJLkNTUHJlQnV5EhwKCHNjUHJlQnV5GNYBIAEoCzIJ", 
          "LlNDUHJlQnV5EhoKB3NjVG9CdXkY1wEgASgLMgguU0NUb0J1eRIkCgxzY1N5", 
          "c01lc3NhZ2UY2AEgASgLMg0uU0NTeXNNZXNzYWdlEiAKCmNzRXZhbHVhdGUY", 
          "2gEgASgLMgsuQ1NFdmFsdWF0ZRIgCgpzY0V2YWx1YXRlGNsBIAEoCzILLlND", 
          "RXZhbHVhdGUSJAoMY3NWZXJpZnlDb2RlGNwBIAEoCzINLkNTVmVyaWZ5Q29k", 
          "ZRIkCgxzY1ZlcmlmeUNvZGUY3QEgASgLMg0uU0NWZXJpZnlDb2RlEiQKDGNz", 
          "QmluZE1vYmlsZRjeASABKAsyDS5DU0JpbmRNb2JpbGUSJAoMc2NCaW5kTW9i", 
          "aWxlGN8BIAEoCzINLlNDQmluZE1vYmlsZSIcCgxDU0NsaWVudE9wZW4SDAoE", 
          "dGV4dBgBIAIoCSIPCg1DU0NsaWVudENsb3NlIh0KB0NTTG9nb24SEgoKY2Fy", 
          "ZG51bWJlchgBIAIoCSJuCgdTQ0xvZ29uEhAKCG1lbWJlcmlkGAEgAigFEhIK", 
          "CmNhcmRudW1iZXIYAiACKAkSDAoEbmFtZRgEIAIoCRINCgVyaWdodBgFIAIo", 
          "BRIPCgdiYWxhbmNlGAkgAigFEg8KB2ludGVnYWwYDCACKAUiHgoIQ1NMb2dv", 
          "ZmYSEgoKY2FyZG51bWJlchgBIAIoCSJxCghTQ0xvZ29mZhIMCgRuYW1lGAEg", 
          "AigJEhIKCmNhcmRudW1iZXIYAiACKAkSDQoFcmlnaHQYAyACKAkSDwoHYmFs", 
          "YW5jZRgEIAIoBRIRCgl1c2VkbW9uZXkYBSACKAUSEAoIdXNlZHRpbWUYBiAC", 
          "KAUiHgoIQ1NIdW5ndXASEgoKY2FyZG51bWJlchgBIAIoCSJTCgtDU1ByZUNo", 
          "YXJnZRISCgpjYXJkbnVtYmVyGAEgAigJEg4KBmFtb3VudBgCIAIoBRIPCgdw", 
          "YXltb2RlGAMgAigFEg8KB29mZmljYWwYBCACKAUiHQoLU0NQcmVDaGFyZ2US", 
          "DgoGcXJjb2RlGAEgAigJInEKClNDVG9DaGFyZ2USDAoEbmFtZRgBIAIoCRIS", 
          "CgpjYXJkbnVtYmVyGAIgAigJEg0KBXJpZ2h0GAMgAigJEhAKCHJlY2hhcmdl", 
          "GAQgAigFEg8KB2JhbGFuY2UYBSACKAUSDwoHaW50ZWdhbBgGIAIoBSJMCgtD", 
          "U0dvb2RzRmluZBIZCgRwYWdlGAEgAigLMgsuU3RydWN0UGFnZRIQCghjYXRl", 
          "Z29yeRgCIAEoBRIQCghrZXl3b3JkcxgEIAEoCSIqCgtTQ0dvb2RzRmluZBIb", 
          "CgVnb29kcxgBIAMoCzIMLlN0cnVjdEdvb2RzIi4KCUNTQ2FydEFkZBIPCgdn", 
          "b29kc2lkGAEgAigFEhAKCGdvb2RzbnVtGAIgAigFIi4KCUNTQ2FydERlbBIP", 
          "Cgdnb29kc2lkGAEgAigFEhAKCGdvb2RzbnVtGAIgAigFIkEKCENTUHJlQnV5", 
          "EhIKCmNhcmRudW1iZXIYASACKAkSDwoHZ29vZHNpZBgCIAIoBRIQCghnb29k", 
          "c251bRgDIAIoBSIaCghTQ1ByZUJ1eRIOCgZxcmNvZGUYASACKAkihAEKB1ND", 
          "VG9CdXkSDAoEbmFtZRgBIAIoCRISCgpjYXJkbnVtYmVyGAIgAigJEg0KBXJp", 
          "Z2h0GAMgAigJEhEKCXVzZWRtb25leRgEIAIoBRITCgt1c2VkaW50ZWdhbBgF", 
          "IAIoBRIPCgdiYWxhbmNlGAYgAigFEg8KB2ludGVnYWwYByACKAUiKwoMU0NT", 
          "eXNNZXNzYWdlEgsKA2NtZBgBIAIoBRIOCgZwYXJhbXMYAiADKAkiKAoJQ1ND", 
          "b21tYW5kEgsKA2NtZBgBIAIoBRIOCgZwYXJhbXMYAiADKAkiTwoKQ1NFdmFs", 
          "dWF0ZRIRCglzdGFmZlN0YXIYASACKAUSDwoHZW52U3RhchgCIAIoBRIPCgdk", 
          "ZXZTdGFyGAMgAigFEgwKBGV2YWwYBCABKAkiHQoKU0NFdmFsdWF0ZRIPCgdp", 
          "bnRlZ2FsGAEgAigFIiMKDENTVmVyaWZ5Q29kZRITCgtwaG9uZW51bWJlchgB", 
          "IAIoCSIiCgxTQ1ZlcmlmeUNvZGUSEgoKdmVyaWZ5Y29kZRgBIAIoCSI3CgxD", 
          "U0JpbmRNb2JpbGUSEwoLcGhvbmVudW1iZXIYASACKAkSEgoKdmVyaWZ5Y29k", 
          "ZRgCIAIoCSIfCgxTQ0JpbmRNb2JpbGUSDwoHaW50ZWdhbBgBIAIoBSqKAwoD", 
          "Q21kEhAKC0NNRF9DT01NQU5EEO0HEhMKDkNNRF9HT09EU19GSU5EELsIEhQK", 
          "D0NNRF9DTElFTlRfT1BFThDQDxIVChBDTURfQ0xJRU5UX0NMT1NFENEPEhUK", 
          "EENNRF9DTElFTlRfTE9HT04Q0g8SFgoRQ01EX0NMSUVOVF9MT0dPRkYQ0w8S", 
          "FgoRQ01EX0NMSUVOVF9IVU5HVVAQ1A8SEgoNQ01EX1BSRUNIQVJHRRDVDxIR", 
          "CgxDTURfVE9DSEFSR0UQ1g8SGAoTQ01EX0NMSUVOVF9DQVJUX0FERBDYDxIY", 
          "ChNDTURfQ0xJRU5UX0NBUlRfREVMENkPEg8KCkNNRF9QUkVCVVkQ2g8SDgoJ", 
          "Q01EX1RPQlVZENsPEhoKFUNNRF9DTElFTlRfU1lTTUVTU0FHRRDcDxIYChND", 
          "TURfQ0xJRU5UX0VWQUxVQVRFEN4PEhoKFUNNRF9DTElFTlRfVkVSSUZZQ09E", 
          "RRDfDxIaChVDTURfQ0xJRU5UX0JJTkRNT0JJTEUQ4A9CLwodY29tLnNreXNv", 
        "ZnQuY29yZS5hdXRvLm1lc3NhZ2VCDkNsaWVudFByb3RvY29s"));
    pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
      descriptor = root;
      internal__static_MessagePack__Descriptor = Descriptor.MessageTypes[0];
      internal__static_MessagePack__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::MessagePack, global::MessagePack.Builder>(internal__static_MessagePack__Descriptor,
              new string[] { "Cmd", "Version", "SessionId", "Content", });
      internal__static_MessageContent__Descriptor = Descriptor.MessageTypes[1];
      internal__static_MessageContent__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::MessageContent, global::MessageContent.Builder>(internal__static_MessageContent__Descriptor,
              new string[] { "MessageType", "ErrorTip", "CsCommand", "CsGoodsFind", "ScGoodsFind", "CsClientOpen", "CsClientClose", "CsLogon", "ScLogon", "CsLogoff", "ScLogoff", "CsHungup", "CsPreCharge", "ScPreCharge", "ScToCharge", "CsCartAdd", "CsCartDel", "CsPreBuy", "ScPreBuy", "ScToBuy", "ScSysMessage", "CsEvaluate", "ScEvaluate", "CsVerifyCode", "ScVerifyCode", "CsBindMobile", "ScBindMobile", });
      internal__static_CSClientOpen__Descriptor = Descriptor.MessageTypes[2];
      internal__static_CSClientOpen__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSClientOpen, global::CSClientOpen.Builder>(internal__static_CSClientOpen__Descriptor,
              new string[] { "Text", });
      internal__static_CSClientClose__Descriptor = Descriptor.MessageTypes[3];
      internal__static_CSClientClose__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSClientClose, global::CSClientClose.Builder>(internal__static_CSClientClose__Descriptor,
              new string[] { });
      internal__static_CSLogon__Descriptor = Descriptor.MessageTypes[4];
      internal__static_CSLogon__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSLogon, global::CSLogon.Builder>(internal__static_CSLogon__Descriptor,
              new string[] { "Cardnumber", });
      internal__static_SCLogon__Descriptor = Descriptor.MessageTypes[5];
      internal__static_SCLogon__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCLogon, global::SCLogon.Builder>(internal__static_SCLogon__Descriptor,
              new string[] { "Memberid", "Cardnumber", "Name", "Right", "Balance", "Integal", });
      internal__static_CSLogoff__Descriptor = Descriptor.MessageTypes[6];
      internal__static_CSLogoff__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSLogoff, global::CSLogoff.Builder>(internal__static_CSLogoff__Descriptor,
              new string[] { "Cardnumber", });
      internal__static_SCLogoff__Descriptor = Descriptor.MessageTypes[7];
      internal__static_SCLogoff__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCLogoff, global::SCLogoff.Builder>(internal__static_SCLogoff__Descriptor,
              new string[] { "Name", "Cardnumber", "Right", "Balance", "Usedmoney", "Usedtime", });
      internal__static_CSHungup__Descriptor = Descriptor.MessageTypes[8];
      internal__static_CSHungup__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSHungup, global::CSHungup.Builder>(internal__static_CSHungup__Descriptor,
              new string[] { "Cardnumber", });
      internal__static_CSPreCharge__Descriptor = Descriptor.MessageTypes[9];
      internal__static_CSPreCharge__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSPreCharge, global::CSPreCharge.Builder>(internal__static_CSPreCharge__Descriptor,
              new string[] { "Cardnumber", "Amount", "Paymode", "Offical", });
      internal__static_SCPreCharge__Descriptor = Descriptor.MessageTypes[10];
      internal__static_SCPreCharge__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCPreCharge, global::SCPreCharge.Builder>(internal__static_SCPreCharge__Descriptor,
              new string[] { "Qrcode", });
      internal__static_SCToCharge__Descriptor = Descriptor.MessageTypes[11];
      internal__static_SCToCharge__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCToCharge, global::SCToCharge.Builder>(internal__static_SCToCharge__Descriptor,
              new string[] { "Name", "Cardnumber", "Right", "Recharge", "Balance", "Integal", });
      internal__static_CSGoodsFind__Descriptor = Descriptor.MessageTypes[12];
      internal__static_CSGoodsFind__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSGoodsFind, global::CSGoodsFind.Builder>(internal__static_CSGoodsFind__Descriptor,
              new string[] { "Page", "Category", "Keywords", });
      internal__static_SCGoodsFind__Descriptor = Descriptor.MessageTypes[13];
      internal__static_SCGoodsFind__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCGoodsFind, global::SCGoodsFind.Builder>(internal__static_SCGoodsFind__Descriptor,
              new string[] { "Goods", });
      internal__static_CSCartAdd__Descriptor = Descriptor.MessageTypes[14];
      internal__static_CSCartAdd__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSCartAdd, global::CSCartAdd.Builder>(internal__static_CSCartAdd__Descriptor,
              new string[] { "Goodsid", "Goodsnum", });
      internal__static_CSCartDel__Descriptor = Descriptor.MessageTypes[15];
      internal__static_CSCartDel__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSCartDel, global::CSCartDel.Builder>(internal__static_CSCartDel__Descriptor,
              new string[] { "Goodsid", "Goodsnum", });
      internal__static_CSPreBuy__Descriptor = Descriptor.MessageTypes[16];
      internal__static_CSPreBuy__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSPreBuy, global::CSPreBuy.Builder>(internal__static_CSPreBuy__Descriptor,
              new string[] { "Cardnumber", "Goodsid", "Goodsnum", });
      internal__static_SCPreBuy__Descriptor = Descriptor.MessageTypes[17];
      internal__static_SCPreBuy__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCPreBuy, global::SCPreBuy.Builder>(internal__static_SCPreBuy__Descriptor,
              new string[] { "Qrcode", });
      internal__static_SCToBuy__Descriptor = Descriptor.MessageTypes[18];
      internal__static_SCToBuy__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCToBuy, global::SCToBuy.Builder>(internal__static_SCToBuy__Descriptor,
              new string[] { "Name", "Cardnumber", "Right", "Usedmoney", "Usedintegal", "Balance", "Integal", });
      internal__static_SCSysMessage__Descriptor = Descriptor.MessageTypes[19];
      internal__static_SCSysMessage__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCSysMessage, global::SCSysMessage.Builder>(internal__static_SCSysMessage__Descriptor,
              new string[] { "Cmd", "Params", });
      internal__static_CSCommand__Descriptor = Descriptor.MessageTypes[20];
      internal__static_CSCommand__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSCommand, global::CSCommand.Builder>(internal__static_CSCommand__Descriptor,
              new string[] { "Cmd", "Params", });
      internal__static_CSEvaluate__Descriptor = Descriptor.MessageTypes[21];
      internal__static_CSEvaluate__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSEvaluate, global::CSEvaluate.Builder>(internal__static_CSEvaluate__Descriptor,
              new string[] { "StaffStar", "EnvStar", "DevStar", "Eval", });
      internal__static_SCEvaluate__Descriptor = Descriptor.MessageTypes[22];
      internal__static_SCEvaluate__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCEvaluate, global::SCEvaluate.Builder>(internal__static_SCEvaluate__Descriptor,
              new string[] { "Integal", });
      internal__static_CSVerifyCode__Descriptor = Descriptor.MessageTypes[23];
      internal__static_CSVerifyCode__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSVerifyCode, global::CSVerifyCode.Builder>(internal__static_CSVerifyCode__Descriptor,
              new string[] { "Phonenumber", });
      internal__static_SCVerifyCode__Descriptor = Descriptor.MessageTypes[24];
      internal__static_SCVerifyCode__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCVerifyCode, global::SCVerifyCode.Builder>(internal__static_SCVerifyCode__Descriptor,
              new string[] { "Verifycode", });
      internal__static_CSBindMobile__Descriptor = Descriptor.MessageTypes[25];
      internal__static_CSBindMobile__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSBindMobile, global::CSBindMobile.Builder>(internal__static_CSBindMobile__Descriptor,
              new string[] { "Phonenumber", "Verifycode", });
      internal__static_SCBindMobile__Descriptor = Descriptor.MessageTypes[26];
      internal__static_SCBindMobile__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCBindMobile, global::SCBindMobile.Builder>(internal__static_SCBindMobile__Descriptor,
              new string[] { "Integal", });
      return null;
    };
    pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
        new pbd::FileDescriptor[] {
        global::BaseStruct.Descriptor, 
        }, assigner);
  }
  #endregion
  
}
#region Enums
public enum Cmd {
  CMD_COMMAND = 1005,
  CMD_GOODS_FIND = 1083,
  CMD_CLIENT_OPEN = 2000,
  CMD_CLIENT_CLOSE = 2001,
  CMD_CLIENT_LOGON = 2002,
  CMD_CLIENT_LOGOFF = 2003,
  CMD_CLIENT_HUNGUP = 2004,
  CMD_PRECHARGE = 2005,
  CMD_TOCHARGE = 2006,
  CMD_CLIENT_CART_ADD = 2008,
  CMD_CLIENT_CART_DEL = 2009,
  CMD_PREBUY = 2010,
  CMD_TOBUY = 2011,
  CMD_CLIENT_SYSMESSAGE = 2012,
  CMD_CLIENT_EVALUATE = 2014,
  CMD_CLIENT_VERIFYCODE = 2015,
  CMD_CLIENT_BINDMOBILE = 2016,
}

#endregion

#region Messages
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class MessagePack : pb::GeneratedMessage<MessagePack, MessagePack.Builder> {
  private MessagePack() { }
  private static readonly MessagePack defaultInstance = new MessagePack().MakeReadOnly();
  private static readonly string[] _messagePackFieldNames = new string[] { "cmd", "content", "sessionId", "version" };
  private static readonly uint[] _messagePackFieldTags = new uint[] { 8, 34, 24, 16 };
  public static MessagePack DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override MessagePack DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override MessagePack ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::ClientProtocol.internal__static_MessagePack__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<MessagePack, MessagePack.Builder> InternalFieldAccessors {
    get { return global::ClientProtocol.internal__static_MessagePack__FieldAccessorTable; }
  }
  
  public const int CmdFieldNumber = 1;
  private bool hasCmd;
  private global::Cmd cmd_ = global::Cmd.CMD_COMMAND;
  public bool HasCmd {
    get { return hasCmd; }
  }
  public global::Cmd Cmd {
    get { return cmd_; }
  }
  
  public const int VersionFieldNumber = 2;
  private bool hasVersion;
  private int version_;
  public bool HasVersion {
    get { return hasVersion; }
  }
  public int Version {
    get { return version_; }
  }
  
  public const int SessionIdFieldNumber = 3;
  private bool hasSessionId;
  private int sessionId_;
  public bool HasSessionId {
    get { return hasSessionId; }
  }
  public int SessionId {
    get { return sessionId_; }
  }
  
  public const int ContentFieldNumber = 4;
  private bool hasContent;
  private global::MessageContent content_;
  public bool HasContent {
    get { return hasContent; }
  }
  public global::MessageContent Content {
    get { return content_ ?? global::MessageContent.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasCmd) return false;
      if (HasContent) {
        if (!Content.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _messagePackFieldNames;
    if (hasCmd) {
      output.WriteEnum(1, field_names[0], (int) Cmd, Cmd);
    }
    if (hasVersion) {
      output.WriteInt32(2, field_names[3], Version);
    }
    if (hasSessionId) {
      output.WriteInt32(3, field_names[2], SessionId);
    }
    if (hasContent) {
      output.WriteMessage(4, field_names[1], Content);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasCmd) {
      size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Cmd);
    }
    if (hasVersion) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Version);
    }
    if (hasSessionId) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, SessionId);
    }
    if (hasContent) {
      size += pb::CodedOutputStream.ComputeMessageSize(4, Content);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static MessagePack ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static MessagePack ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static MessagePack ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static MessagePack ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static MessagePack ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static MessagePack ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static MessagePack ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static MessagePack ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static MessagePack ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static MessagePack ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private MessagePack MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(MessagePack prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<MessagePack, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(MessagePack cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private MessagePack result;
    
    private MessagePack PrepareBuilder() {
      if (resultIsReadOnly) {
        MessagePack original = result;
        result = new MessagePack();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override MessagePack MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::MessagePack.Descriptor; }
    }
    
    public override MessagePack DefaultInstanceForType {
      get { return global::MessagePack.DefaultInstance; }
    }
    
    public override MessagePack BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is MessagePack) {
        return MergeFrom((MessagePack) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(MessagePack other) {
      if (other == global::MessagePack.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasCmd) {
        Cmd = other.Cmd;
      }
      if (other.HasVersion) {
        Version = other.Version;
      }
      if (other.HasSessionId) {
        SessionId = other.SessionId;
      }
      if (other.HasContent) {
        MergeContent(other.Content);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_messagePackFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _messagePackFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            object unknown;
            if(input.ReadEnum(ref result.cmd_, out unknown)) {
              result.hasCmd = true;
            } else if(unknown is int) {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              unknownFields.MergeVarintField(1, (ulong)(int)unknown);
            }
            break;
          }
          case 16: {
            result.hasVersion = input.ReadInt32(ref result.version_);
            break;
          }
          case 24: {
            result.hasSessionId = input.ReadInt32(ref result.sessionId_);
            break;
          }
          case 34: {
            global::MessageContent.Builder subBuilder = global::MessageContent.CreateBuilder();
            if (result.hasContent) {
              subBuilder.MergeFrom(Content);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Content = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasCmd {
     get { return result.hasCmd; }
    }
    public global::Cmd Cmd {
      get { return result.Cmd; }
      set { SetCmd(value); }
    }
    public Builder SetCmd(global::Cmd value) {
      PrepareBuilder();
      result.hasCmd = true;
      result.cmd_ = value;
      return this;
    }
    public Builder ClearCmd() {
      PrepareBuilder();
      result.hasCmd = false;
      result.cmd_ = global::Cmd.CMD_COMMAND;
      return this;
    }
    
    public bool HasVersion {
      get { return result.hasVersion; }
    }
    public int Version {
      get { return result.Version; }
      set { SetVersion(value); }
    }
    public Builder SetVersion(int value) {
      PrepareBuilder();
      result.hasVersion = true;
      result.version_ = value;
      return this;
    }
    public Builder ClearVersion() {
      PrepareBuilder();
      result.hasVersion = false;
      result.version_ = 0;
      return this;
    }
    
    public bool HasSessionId {
      get { return result.hasSessionId; }
    }
    public int SessionId {
      get { return result.SessionId; }
      set { SetSessionId(value); }
    }
    public Builder SetSessionId(int value) {
      PrepareBuilder();
      result.hasSessionId = true;
      result.sessionId_ = value;
      return this;
    }
    public Builder ClearSessionId() {
      PrepareBuilder();
      result.hasSessionId = false;
      result.sessionId_ = 0;
      return this;
    }
    
    public bool HasContent {
     get { return result.hasContent; }
    }
    public global::MessageContent Content {
      get { return result.Content; }
      set { SetContent(value); }
    }
    public Builder SetContent(global::MessageContent value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasContent = true;
      result.content_ = value;
      return this;
    }
    public Builder SetContent(global::MessageContent.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasContent = true;
      result.content_ = builderForValue.Build();
      return this;
    }
    public Builder MergeContent(global::MessageContent value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasContent &&
          result.content_ != global::MessageContent.DefaultInstance) {
          result.content_ = global::MessageContent.CreateBuilder(result.content_).MergeFrom(value).BuildPartial();
      } else {
        result.content_ = value;
      }
      result.hasContent = true;
      return this;
    }
    public Builder ClearContent() {
      PrepareBuilder();
      result.hasContent = false;
      result.content_ = null;
      return this;
    }
  }
  static MessagePack() {
    object.ReferenceEquals(global::ClientProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class MessageContent : pb::GeneratedMessage<MessageContent, MessageContent.Builder> {
  private MessageContent() { }
  private static readonly MessageContent defaultInstance = new MessageContent().MakeReadOnly();
  private static readonly string[] _messageContentFieldNames = new string[] { "csBindMobile", "csCartAdd", "csCartDel", "csClientClose", "csClientOpen", "csCommand", "csEvaluate", "csGoodsFind", "csHungup", "csLogoff", "csLogon", "csPreBuy", "csPreCharge", "csVerifyCode", "errorTip", "messageType", "scBindMobile", "scEvaluate", "scGoodsFind", "scLogoff", "scLogon", "scPreBuy", "scPreCharge", "scSysMessage", "scToBuy", "scToCharge", "scVerifyCode" };
  private static readonly uint[] _messageContentFieldTags = new uint[] { 1778, 1690, 1698, 1610, 1602, 106, 1746, 570, 1650, 1634, 1618, 1706, 1658, 1762, 18, 8, 1786, 1754, 578, 1642, 1626, 1714, 1666, 1730, 1722, 1674, 1770 };
  public static MessageContent DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override MessageContent DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override MessageContent ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::ClientProtocol.internal__static_MessageContent__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<MessageContent, MessageContent.Builder> InternalFieldAccessors {
    get { return global::ClientProtocol.internal__static_MessageContent__FieldAccessorTable; }
  }
  
  public const int MessageTypeFieldNumber = 1;
  private bool hasMessageType;
  private int messageType_;
  public bool HasMessageType {
    get { return hasMessageType; }
  }
  public int MessageType {
    get { return messageType_; }
  }
  
  public const int ErrorTipFieldNumber = 2;
  private bool hasErrorTip;
  private global::StructErrorTip errorTip_;
  public bool HasErrorTip {
    get { return hasErrorTip; }
  }
  public global::StructErrorTip ErrorTip {
    get { return errorTip_ ?? global::StructErrorTip.DefaultInstance; }
  }
  
  public const int CsCommandFieldNumber = 13;
  private bool hasCsCommand;
  private global::CSCommand csCommand_;
  public bool HasCsCommand {
    get { return hasCsCommand; }
  }
  public global::CSCommand CsCommand {
    get { return csCommand_ ?? global::CSCommand.DefaultInstance; }
  }
  
  public const int CsGoodsFindFieldNumber = 71;
  private bool hasCsGoodsFind;
  private global::CSGoodsFind csGoodsFind_;
  public bool HasCsGoodsFind {
    get { return hasCsGoodsFind; }
  }
  public global::CSGoodsFind CsGoodsFind {
    get { return csGoodsFind_ ?? global::CSGoodsFind.DefaultInstance; }
  }
  
  public const int ScGoodsFindFieldNumber = 72;
  private bool hasScGoodsFind;
  private global::SCGoodsFind scGoodsFind_;
  public bool HasScGoodsFind {
    get { return hasScGoodsFind; }
  }
  public global::SCGoodsFind ScGoodsFind {
    get { return scGoodsFind_ ?? global::SCGoodsFind.DefaultInstance; }
  }
  
  public const int CsClientOpenFieldNumber = 200;
  private bool hasCsClientOpen;
  private global::CSClientOpen csClientOpen_;
  public bool HasCsClientOpen {
    get { return hasCsClientOpen; }
  }
  public global::CSClientOpen CsClientOpen {
    get { return csClientOpen_ ?? global::CSClientOpen.DefaultInstance; }
  }
  
  public const int CsClientCloseFieldNumber = 201;
  private bool hasCsClientClose;
  private global::CSClientClose csClientClose_;
  public bool HasCsClientClose {
    get { return hasCsClientClose; }
  }
  public global::CSClientClose CsClientClose {
    get { return csClientClose_ ?? global::CSClientClose.DefaultInstance; }
  }
  
  public const int CsLogonFieldNumber = 202;
  private bool hasCsLogon;
  private global::CSLogon csLogon_;
  public bool HasCsLogon {
    get { return hasCsLogon; }
  }
  public global::CSLogon CsLogon {
    get { return csLogon_ ?? global::CSLogon.DefaultInstance; }
  }
  
  public const int ScLogonFieldNumber = 203;
  private bool hasScLogon;
  private global::SCLogon scLogon_;
  public bool HasScLogon {
    get { return hasScLogon; }
  }
  public global::SCLogon ScLogon {
    get { return scLogon_ ?? global::SCLogon.DefaultInstance; }
  }
  
  public const int CsLogoffFieldNumber = 204;
  private bool hasCsLogoff;
  private global::CSLogoff csLogoff_;
  public bool HasCsLogoff {
    get { return hasCsLogoff; }
  }
  public global::CSLogoff CsLogoff {
    get { return csLogoff_ ?? global::CSLogoff.DefaultInstance; }
  }
  
  public const int ScLogoffFieldNumber = 205;
  private bool hasScLogoff;
  private global::SCLogoff scLogoff_;
  public bool HasScLogoff {
    get { return hasScLogoff; }
  }
  public global::SCLogoff ScLogoff {
    get { return scLogoff_ ?? global::SCLogoff.DefaultInstance; }
  }
  
  public const int CsHungupFieldNumber = 206;
  private bool hasCsHungup;
  private global::CSHungup csHungup_;
  public bool HasCsHungup {
    get { return hasCsHungup; }
  }
  public global::CSHungup CsHungup {
    get { return csHungup_ ?? global::CSHungup.DefaultInstance; }
  }
  
  public const int CsPreChargeFieldNumber = 207;
  private bool hasCsPreCharge;
  private global::CSPreCharge csPreCharge_;
  public bool HasCsPreCharge {
    get { return hasCsPreCharge; }
  }
  public global::CSPreCharge CsPreCharge {
    get { return csPreCharge_ ?? global::CSPreCharge.DefaultInstance; }
  }
  
  public const int ScPreChargeFieldNumber = 208;
  private bool hasScPreCharge;
  private global::SCPreCharge scPreCharge_;
  public bool HasScPreCharge {
    get { return hasScPreCharge; }
  }
  public global::SCPreCharge ScPreCharge {
    get { return scPreCharge_ ?? global::SCPreCharge.DefaultInstance; }
  }
  
  public const int ScToChargeFieldNumber = 209;
  private bool hasScToCharge;
  private global::SCToCharge scToCharge_;
  public bool HasScToCharge {
    get { return hasScToCharge; }
  }
  public global::SCToCharge ScToCharge {
    get { return scToCharge_ ?? global::SCToCharge.DefaultInstance; }
  }
  
  public const int CsCartAddFieldNumber = 211;
  private bool hasCsCartAdd;
  private global::CSCartAdd csCartAdd_;
  public bool HasCsCartAdd {
    get { return hasCsCartAdd; }
  }
  public global::CSCartAdd CsCartAdd {
    get { return csCartAdd_ ?? global::CSCartAdd.DefaultInstance; }
  }
  
  public const int CsCartDelFieldNumber = 212;
  private bool hasCsCartDel;
  private global::CSCartDel csCartDel_;
  public bool HasCsCartDel {
    get { return hasCsCartDel; }
  }
  public global::CSCartDel CsCartDel {
    get { return csCartDel_ ?? global::CSCartDel.DefaultInstance; }
  }
  
  public const int CsPreBuyFieldNumber = 213;
  private bool hasCsPreBuy;
  private global::CSPreBuy csPreBuy_;
  public bool HasCsPreBuy {
    get { return hasCsPreBuy; }
  }
  public global::CSPreBuy CsPreBuy {
    get { return csPreBuy_ ?? global::CSPreBuy.DefaultInstance; }
  }
  
  public const int ScPreBuyFieldNumber = 214;
  private bool hasScPreBuy;
  private global::SCPreBuy scPreBuy_;
  public bool HasScPreBuy {
    get { return hasScPreBuy; }
  }
  public global::SCPreBuy ScPreBuy {
    get { return scPreBuy_ ?? global::SCPreBuy.DefaultInstance; }
  }
  
  public const int ScToBuyFieldNumber = 215;
  private bool hasScToBuy;
  private global::SCToBuy scToBuy_;
  public bool HasScToBuy {
    get { return hasScToBuy; }
  }
  public global::SCToBuy ScToBuy {
    get { return scToBuy_ ?? global::SCToBuy.DefaultInstance; }
  }
  
  public const int ScSysMessageFieldNumber = 216;
  private bool hasScSysMessage;
  private global::SCSysMessage scSysMessage_;
  public bool HasScSysMessage {
    get { return hasScSysMessage; }
  }
  public global::SCSysMessage ScSysMessage {
    get { return scSysMessage_ ?? global::SCSysMessage.DefaultInstance; }
  }
  
  public const int CsEvaluateFieldNumber = 218;
  private bool hasCsEvaluate;
  private global::CSEvaluate csEvaluate_;
  public bool HasCsEvaluate {
    get { return hasCsEvaluate; }
  }
  public global::CSEvaluate CsEvaluate {
    get { return csEvaluate_ ?? global::CSEvaluate.DefaultInstance; }
  }
  
  public const int ScEvaluateFieldNumber = 219;
  private bool hasScEvaluate;
  private global::SCEvaluate scEvaluate_;
  public bool HasScEvaluate {
    get { return hasScEvaluate; }
  }
  public global::SCEvaluate ScEvaluate {
    get { return scEvaluate_ ?? global::SCEvaluate.DefaultInstance; }
  }
  
  public const int CsVerifyCodeFieldNumber = 220;
  private bool hasCsVerifyCode;
  private global::CSVerifyCode csVerifyCode_;
  public bool HasCsVerifyCode {
    get { return hasCsVerifyCode; }
  }
  public global::CSVerifyCode CsVerifyCode {
    get { return csVerifyCode_ ?? global::CSVerifyCode.DefaultInstance; }
  }
  
  public const int ScVerifyCodeFieldNumber = 221;
  private bool hasScVerifyCode;
  private global::SCVerifyCode scVerifyCode_;
  public bool HasScVerifyCode {
    get { return hasScVerifyCode; }
  }
  public global::SCVerifyCode ScVerifyCode {
    get { return scVerifyCode_ ?? global::SCVerifyCode.DefaultInstance; }
  }
  
  public const int CsBindMobileFieldNumber = 222;
  private bool hasCsBindMobile;
  private global::CSBindMobile csBindMobile_;
  public bool HasCsBindMobile {
    get { return hasCsBindMobile; }
  }
  public global::CSBindMobile CsBindMobile {
    get { return csBindMobile_ ?? global::CSBindMobile.DefaultInstance; }
  }
  
  public const int ScBindMobileFieldNumber = 223;
  private bool hasScBindMobile;
  private global::SCBindMobile scBindMobile_;
  public bool HasScBindMobile {
    get { return hasScBindMobile; }
  }
  public global::SCBindMobile ScBindMobile {
    get { return scBindMobile_ ?? global::SCBindMobile.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasMessageType) return false;
      if (HasErrorTip) {
        if (!ErrorTip.IsInitialized) return false;
      }
      if (HasCsCommand) {
        if (!CsCommand.IsInitialized) return false;
      }
      if (HasCsGoodsFind) {
        if (!CsGoodsFind.IsInitialized) return false;
      }
      if (HasScGoodsFind) {
        if (!ScGoodsFind.IsInitialized) return false;
      }
      if (HasCsClientOpen) {
        if (!CsClientOpen.IsInitialized) return false;
      }
      if (HasCsLogon) {
        if (!CsLogon.IsInitialized) return false;
      }
      if (HasScLogon) {
        if (!ScLogon.IsInitialized) return false;
      }
      if (HasCsLogoff) {
        if (!CsLogoff.IsInitialized) return false;
      }
      if (HasScLogoff) {
        if (!ScLogoff.IsInitialized) return false;
      }
      if (HasCsHungup) {
        if (!CsHungup.IsInitialized) return false;
      }
      if (HasCsPreCharge) {
        if (!CsPreCharge.IsInitialized) return false;
      }
      if (HasScPreCharge) {
        if (!ScPreCharge.IsInitialized) return false;
      }
      if (HasScToCharge) {
        if (!ScToCharge.IsInitialized) return false;
      }
      if (HasCsCartAdd) {
        if (!CsCartAdd.IsInitialized) return false;
      }
      if (HasCsCartDel) {
        if (!CsCartDel.IsInitialized) return false;
      }
      if (HasCsPreBuy) {
        if (!CsPreBuy.IsInitialized) return false;
      }
      if (HasScPreBuy) {
        if (!ScPreBuy.IsInitialized) return false;
      }
      if (HasScToBuy) {
        if (!ScToBuy.IsInitialized) return false;
      }
      if (HasScSysMessage) {
        if (!ScSysMessage.IsInitialized) return false;
      }
      if (HasCsEvaluate) {
        if (!CsEvaluate.IsInitialized) return false;
      }
      if (HasScEvaluate) {
        if (!ScEvaluate.IsInitialized) return false;
      }
      if (HasCsVerifyCode) {
        if (!CsVerifyCode.IsInitialized) return false;
      }
      if (HasScVerifyCode) {
        if (!ScVerifyCode.IsInitialized) return false;
      }
      if (HasCsBindMobile) {
        if (!CsBindMobile.IsInitialized) return false;
      }
      if (HasScBindMobile) {
        if (!ScBindMobile.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _messageContentFieldNames;
    if (hasMessageType) {
      output.WriteInt32(1, field_names[15], MessageType);
    }
    if (hasErrorTip) {
      output.WriteMessage(2, field_names[14], ErrorTip);
    }
    if (hasCsCommand) {
      output.WriteMessage(13, field_names[5], CsCommand);
    }
    if (hasCsGoodsFind) {
      output.WriteMessage(71, field_names[7], CsGoodsFind);
    }
    if (hasScGoodsFind) {
      output.WriteMessage(72, field_names[18], ScGoodsFind);
    }
    if (hasCsClientOpen) {
      output.WriteMessage(200, field_names[4], CsClientOpen);
    }
    if (hasCsClientClose) {
      output.WriteMessage(201, field_names[3], CsClientClose);
    }
    if (hasCsLogon) {
      output.WriteMessage(202, field_names[10], CsLogon);
    }
    if (hasScLogon) {
      output.WriteMessage(203, field_names[20], ScLogon);
    }
    if (hasCsLogoff) {
      output.WriteMessage(204, field_names[9], CsLogoff);
    }
    if (hasScLogoff) {
      output.WriteMessage(205, field_names[19], ScLogoff);
    }
    if (hasCsHungup) {
      output.WriteMessage(206, field_names[8], CsHungup);
    }
    if (hasCsPreCharge) {
      output.WriteMessage(207, field_names[12], CsPreCharge);
    }
    if (hasScPreCharge) {
      output.WriteMessage(208, field_names[22], ScPreCharge);
    }
    if (hasScToCharge) {
      output.WriteMessage(209, field_names[25], ScToCharge);
    }
    if (hasCsCartAdd) {
      output.WriteMessage(211, field_names[1], CsCartAdd);
    }
    if (hasCsCartDel) {
      output.WriteMessage(212, field_names[2], CsCartDel);
    }
    if (hasCsPreBuy) {
      output.WriteMessage(213, field_names[11], CsPreBuy);
    }
    if (hasScPreBuy) {
      output.WriteMessage(214, field_names[21], ScPreBuy);
    }
    if (hasScToBuy) {
      output.WriteMessage(215, field_names[24], ScToBuy);
    }
    if (hasScSysMessage) {
      output.WriteMessage(216, field_names[23], ScSysMessage);
    }
    if (hasCsEvaluate) {
      output.WriteMessage(218, field_names[6], CsEvaluate);
    }
    if (hasScEvaluate) {
      output.WriteMessage(219, field_names[17], ScEvaluate);
    }
    if (hasCsVerifyCode) {
      output.WriteMessage(220, field_names[13], CsVerifyCode);
    }
    if (hasScVerifyCode) {
      output.WriteMessage(221, field_names[26], ScVerifyCode);
    }
    if (hasCsBindMobile) {
      output.WriteMessage(222, field_names[0], CsBindMobile);
    }
    if (hasScBindMobile) {
      output.WriteMessage(223, field_names[16], ScBindMobile);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasMessageType) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, MessageType);
    }
    if (hasErrorTip) {
      size += pb::CodedOutputStream.ComputeMessageSize(2, ErrorTip);
    }
    if (hasCsCommand) {
      size += pb::CodedOutputStream.ComputeMessageSize(13, CsCommand);
    }
    if (hasCsGoodsFind) {
      size += pb::CodedOutputStream.ComputeMessageSize(71, CsGoodsFind);
    }
    if (hasScGoodsFind) {
      size += pb::CodedOutputStream.ComputeMessageSize(72, ScGoodsFind);
    }
    if (hasCsClientOpen) {
      size += pb::CodedOutputStream.ComputeMessageSize(200, CsClientOpen);
    }
    if (hasCsClientClose) {
      size += pb::CodedOutputStream.ComputeMessageSize(201, CsClientClose);
    }
    if (hasCsLogon) {
      size += pb::CodedOutputStream.ComputeMessageSize(202, CsLogon);
    }
    if (hasScLogon) {
      size += pb::CodedOutputStream.ComputeMessageSize(203, ScLogon);
    }
    if (hasCsLogoff) {
      size += pb::CodedOutputStream.ComputeMessageSize(204, CsLogoff);
    }
    if (hasScLogoff) {
      size += pb::CodedOutputStream.ComputeMessageSize(205, ScLogoff);
    }
    if (hasCsHungup) {
      size += pb::CodedOutputStream.ComputeMessageSize(206, CsHungup);
    }
    if (hasCsPreCharge) {
      size += pb::CodedOutputStream.ComputeMessageSize(207, CsPreCharge);
    }
    if (hasScPreCharge) {
      size += pb::CodedOutputStream.ComputeMessageSize(208, ScPreCharge);
    }
    if (hasScToCharge) {
      size += pb::CodedOutputStream.ComputeMessageSize(209, ScToCharge);
    }
    if (hasCsCartAdd) {
      size += pb::CodedOutputStream.ComputeMessageSize(211, CsCartAdd);
    }
    if (hasCsCartDel) {
      size += pb::CodedOutputStream.ComputeMessageSize(212, CsCartDel);
    }
    if (hasCsPreBuy) {
      size += pb::CodedOutputStream.ComputeMessageSize(213, CsPreBuy);
    }
    if (hasScPreBuy) {
      size += pb::CodedOutputStream.ComputeMessageSize(214, ScPreBuy);
    }
    if (hasScToBuy) {
      size += pb::CodedOutputStream.ComputeMessageSize(215, ScToBuy);
    }
    if (hasScSysMessage) {
      size += pb::CodedOutputStream.ComputeMessageSize(216, ScSysMessage);
    }
    if (hasCsEvaluate) {
      size += pb::CodedOutputStream.ComputeMessageSize(218, CsEvaluate);
    }
    if (hasScEvaluate) {
      size += pb::CodedOutputStream.ComputeMessageSize(219, ScEvaluate);
    }
    if (hasCsVerifyCode) {
      size += pb::CodedOutputStream.ComputeMessageSize(220, CsVerifyCode);
    }
    if (hasScVerifyCode) {
      size += pb::CodedOutputStream.ComputeMessageSize(221, ScVerifyCode);
    }
    if (hasCsBindMobile) {
      size += pb::CodedOutputStream.ComputeMessageSize(222, CsBindMobile);
    }
    if (hasScBindMobile) {
      size += pb::CodedOutputStream.ComputeMessageSize(223, ScBindMobile);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static MessageContent ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static MessageContent ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static MessageContent ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static MessageContent ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static MessageContent ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static MessageContent ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static MessageContent ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static MessageContent ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static MessageContent ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static MessageContent ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private MessageContent MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(MessageContent prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<MessageContent, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(MessageContent cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private MessageContent result;
    
    private MessageContent PrepareBuilder() {
      if (resultIsReadOnly) {
        MessageContent original = result;
        result = new MessageContent();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override MessageContent MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::MessageContent.Descriptor; }
    }
    
    public override MessageContent DefaultInstanceForType {
      get { return global::MessageContent.DefaultInstance; }
    }
    
    public override MessageContent BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is MessageContent) {
        return MergeFrom((MessageContent) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(MessageContent other) {
      if (other == global::MessageContent.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasMessageType) {
        MessageType = other.MessageType;
      }
      if (other.HasErrorTip) {
        MergeErrorTip(other.ErrorTip);
      }
      if (other.HasCsCommand) {
        MergeCsCommand(other.CsCommand);
      }
      if (other.HasCsGoodsFind) {
        MergeCsGoodsFind(other.CsGoodsFind);
      }
      if (other.HasScGoodsFind) {
        MergeScGoodsFind(other.ScGoodsFind);
      }
      if (other.HasCsClientOpen) {
        MergeCsClientOpen(other.CsClientOpen);
      }
      if (other.HasCsClientClose) {
        MergeCsClientClose(other.CsClientClose);
      }
      if (other.HasCsLogon) {
        MergeCsLogon(other.CsLogon);
      }
      if (other.HasScLogon) {
        MergeScLogon(other.ScLogon);
      }
      if (other.HasCsLogoff) {
        MergeCsLogoff(other.CsLogoff);
      }
      if (other.HasScLogoff) {
        MergeScLogoff(other.ScLogoff);
      }
      if (other.HasCsHungup) {
        MergeCsHungup(other.CsHungup);
      }
      if (other.HasCsPreCharge) {
        MergeCsPreCharge(other.CsPreCharge);
      }
      if (other.HasScPreCharge) {
        MergeScPreCharge(other.ScPreCharge);
      }
      if (other.HasScToCharge) {
        MergeScToCharge(other.ScToCharge);
      }
      if (other.HasCsCartAdd) {
        MergeCsCartAdd(other.CsCartAdd);
      }
      if (other.HasCsCartDel) {
        MergeCsCartDel(other.CsCartDel);
      }
      if (other.HasCsPreBuy) {
        MergeCsPreBuy(other.CsPreBuy);
      }
      if (other.HasScPreBuy) {
        MergeScPreBuy(other.ScPreBuy);
      }
      if (other.HasScToBuy) {
        MergeScToBuy(other.ScToBuy);
      }
      if (other.HasScSysMessage) {
        MergeScSysMessage(other.ScSysMessage);
      }
      if (other.HasCsEvaluate) {
        MergeCsEvaluate(other.CsEvaluate);
      }
      if (other.HasScEvaluate) {
        MergeScEvaluate(other.ScEvaluate);
      }
      if (other.HasCsVerifyCode) {
        MergeCsVerifyCode(other.CsVerifyCode);
      }
      if (other.HasScVerifyCode) {
        MergeScVerifyCode(other.ScVerifyCode);
      }
      if (other.HasCsBindMobile) {
        MergeCsBindMobile(other.CsBindMobile);
      }
      if (other.HasScBindMobile) {
        MergeScBindMobile(other.ScBindMobile);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_messageContentFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _messageContentFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasMessageType = input.ReadInt32(ref result.messageType_);
            break;
          }
          case 18: {
            global::StructErrorTip.Builder subBuilder = global::StructErrorTip.CreateBuilder();
            if (result.hasErrorTip) {
              subBuilder.MergeFrom(ErrorTip);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ErrorTip = subBuilder.BuildPartial();
            break;
          }
          case 106: {
            global::CSCommand.Builder subBuilder = global::CSCommand.CreateBuilder();
            if (result.hasCsCommand) {
              subBuilder.MergeFrom(CsCommand);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsCommand = subBuilder.BuildPartial();
            break;
          }
          case 570: {
            global::CSGoodsFind.Builder subBuilder = global::CSGoodsFind.CreateBuilder();
            if (result.hasCsGoodsFind) {
              subBuilder.MergeFrom(CsGoodsFind);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsGoodsFind = subBuilder.BuildPartial();
            break;
          }
          case 578: {
            global::SCGoodsFind.Builder subBuilder = global::SCGoodsFind.CreateBuilder();
            if (result.hasScGoodsFind) {
              subBuilder.MergeFrom(ScGoodsFind);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScGoodsFind = subBuilder.BuildPartial();
            break;
          }
          case 1602: {
            global::CSClientOpen.Builder subBuilder = global::CSClientOpen.CreateBuilder();
            if (result.hasCsClientOpen) {
              subBuilder.MergeFrom(CsClientOpen);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsClientOpen = subBuilder.BuildPartial();
            break;
          }
          case 1610: {
            global::CSClientClose.Builder subBuilder = global::CSClientClose.CreateBuilder();
            if (result.hasCsClientClose) {
              subBuilder.MergeFrom(CsClientClose);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsClientClose = subBuilder.BuildPartial();
            break;
          }
          case 1618: {
            global::CSLogon.Builder subBuilder = global::CSLogon.CreateBuilder();
            if (result.hasCsLogon) {
              subBuilder.MergeFrom(CsLogon);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsLogon = subBuilder.BuildPartial();
            break;
          }
          case 1626: {
            global::SCLogon.Builder subBuilder = global::SCLogon.CreateBuilder();
            if (result.hasScLogon) {
              subBuilder.MergeFrom(ScLogon);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScLogon = subBuilder.BuildPartial();
            break;
          }
          case 1634: {
            global::CSLogoff.Builder subBuilder = global::CSLogoff.CreateBuilder();
            if (result.hasCsLogoff) {
              subBuilder.MergeFrom(CsLogoff);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsLogoff = subBuilder.BuildPartial();
            break;
          }
          case 1642: {
            global::SCLogoff.Builder subBuilder = global::SCLogoff.CreateBuilder();
            if (result.hasScLogoff) {
              subBuilder.MergeFrom(ScLogoff);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScLogoff = subBuilder.BuildPartial();
            break;
          }
          case 1650: {
            global::CSHungup.Builder subBuilder = global::CSHungup.CreateBuilder();
            if (result.hasCsHungup) {
              subBuilder.MergeFrom(CsHungup);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsHungup = subBuilder.BuildPartial();
            break;
          }
          case 1658: {
            global::CSPreCharge.Builder subBuilder = global::CSPreCharge.CreateBuilder();
            if (result.hasCsPreCharge) {
              subBuilder.MergeFrom(CsPreCharge);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsPreCharge = subBuilder.BuildPartial();
            break;
          }
          case 1666: {
            global::SCPreCharge.Builder subBuilder = global::SCPreCharge.CreateBuilder();
            if (result.hasScPreCharge) {
              subBuilder.MergeFrom(ScPreCharge);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScPreCharge = subBuilder.BuildPartial();
            break;
          }
          case 1674: {
            global::SCToCharge.Builder subBuilder = global::SCToCharge.CreateBuilder();
            if (result.hasScToCharge) {
              subBuilder.MergeFrom(ScToCharge);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScToCharge = subBuilder.BuildPartial();
            break;
          }
          case 1690: {
            global::CSCartAdd.Builder subBuilder = global::CSCartAdd.CreateBuilder();
            if (result.hasCsCartAdd) {
              subBuilder.MergeFrom(CsCartAdd);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsCartAdd = subBuilder.BuildPartial();
            break;
          }
          case 1698: {
            global::CSCartDel.Builder subBuilder = global::CSCartDel.CreateBuilder();
            if (result.hasCsCartDel) {
              subBuilder.MergeFrom(CsCartDel);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsCartDel = subBuilder.BuildPartial();
            break;
          }
          case 1706: {
            global::CSPreBuy.Builder subBuilder = global::CSPreBuy.CreateBuilder();
            if (result.hasCsPreBuy) {
              subBuilder.MergeFrom(CsPreBuy);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsPreBuy = subBuilder.BuildPartial();
            break;
          }
          case 1714: {
            global::SCPreBuy.Builder subBuilder = global::SCPreBuy.CreateBuilder();
            if (result.hasScPreBuy) {
              subBuilder.MergeFrom(ScPreBuy);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScPreBuy = subBuilder.BuildPartial();
            break;
          }
          case 1722: {
            global::SCToBuy.Builder subBuilder = global::SCToBuy.CreateBuilder();
            if (result.hasScToBuy) {
              subBuilder.MergeFrom(ScToBuy);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScToBuy = subBuilder.BuildPartial();
            break;
          }
          case 1730: {
            global::SCSysMessage.Builder subBuilder = global::SCSysMessage.CreateBuilder();
            if (result.hasScSysMessage) {
              subBuilder.MergeFrom(ScSysMessage);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScSysMessage = subBuilder.BuildPartial();
            break;
          }
          case 1746: {
            global::CSEvaluate.Builder subBuilder = global::CSEvaluate.CreateBuilder();
            if (result.hasCsEvaluate) {
              subBuilder.MergeFrom(CsEvaluate);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsEvaluate = subBuilder.BuildPartial();
            break;
          }
          case 1754: {
            global::SCEvaluate.Builder subBuilder = global::SCEvaluate.CreateBuilder();
            if (result.hasScEvaluate) {
              subBuilder.MergeFrom(ScEvaluate);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScEvaluate = subBuilder.BuildPartial();
            break;
          }
          case 1762: {
            global::CSVerifyCode.Builder subBuilder = global::CSVerifyCode.CreateBuilder();
            if (result.hasCsVerifyCode) {
              subBuilder.MergeFrom(CsVerifyCode);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsVerifyCode = subBuilder.BuildPartial();
            break;
          }
          case 1770: {
            global::SCVerifyCode.Builder subBuilder = global::SCVerifyCode.CreateBuilder();
            if (result.hasScVerifyCode) {
              subBuilder.MergeFrom(ScVerifyCode);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScVerifyCode = subBuilder.BuildPartial();
            break;
          }
          case 1778: {
            global::CSBindMobile.Builder subBuilder = global::CSBindMobile.CreateBuilder();
            if (result.hasCsBindMobile) {
              subBuilder.MergeFrom(CsBindMobile);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsBindMobile = subBuilder.BuildPartial();
            break;
          }
          case 1786: {
            global::SCBindMobile.Builder subBuilder = global::SCBindMobile.CreateBuilder();
            if (result.hasScBindMobile) {
              subBuilder.MergeFrom(ScBindMobile);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScBindMobile = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasMessageType {
      get { return result.hasMessageType; }
    }
    public int MessageType {
      get { return result.MessageType; }
      set { SetMessageType(value); }
    }
    public Builder SetMessageType(int value) {
      PrepareBuilder();
      result.hasMessageType = true;
      result.messageType_ = value;
      return this;
    }
    public Builder ClearMessageType() {
      PrepareBuilder();
      result.hasMessageType = false;
      result.messageType_ = 0;
      return this;
    }
    
    public bool HasErrorTip {
     get { return result.hasErrorTip; }
    }
    public global::StructErrorTip ErrorTip {
      get { return result.ErrorTip; }
      set { SetErrorTip(value); }
    }
    public Builder SetErrorTip(global::StructErrorTip value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasErrorTip = true;
      result.errorTip_ = value;
      return this;
    }
    public Builder SetErrorTip(global::StructErrorTip.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasErrorTip = true;
      result.errorTip_ = builderForValue.Build();
      return this;
    }
    public Builder MergeErrorTip(global::StructErrorTip value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasErrorTip &&
          result.errorTip_ != global::StructErrorTip.DefaultInstance) {
          result.errorTip_ = global::StructErrorTip.CreateBuilder(result.errorTip_).MergeFrom(value).BuildPartial();
      } else {
        result.errorTip_ = value;
      }
      result.hasErrorTip = true;
      return this;
    }
    public Builder ClearErrorTip() {
      PrepareBuilder();
      result.hasErrorTip = false;
      result.errorTip_ = null;
      return this;
    }
    
    public bool HasCsCommand {
     get { return result.hasCsCommand; }
    }
    public global::CSCommand CsCommand {
      get { return result.CsCommand; }
      set { SetCsCommand(value); }
    }
    public Builder SetCsCommand(global::CSCommand value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsCommand = true;
      result.csCommand_ = value;
      return this;
    }
    public Builder SetCsCommand(global::CSCommand.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsCommand = true;
      result.csCommand_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsCommand(global::CSCommand value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsCommand &&
          result.csCommand_ != global::CSCommand.DefaultInstance) {
          result.csCommand_ = global::CSCommand.CreateBuilder(result.csCommand_).MergeFrom(value).BuildPartial();
      } else {
        result.csCommand_ = value;
      }
      result.hasCsCommand = true;
      return this;
    }
    public Builder ClearCsCommand() {
      PrepareBuilder();
      result.hasCsCommand = false;
      result.csCommand_ = null;
      return this;
    }
    
    public bool HasCsGoodsFind {
     get { return result.hasCsGoodsFind; }
    }
    public global::CSGoodsFind CsGoodsFind {
      get { return result.CsGoodsFind; }
      set { SetCsGoodsFind(value); }
    }
    public Builder SetCsGoodsFind(global::CSGoodsFind value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsGoodsFind = true;
      result.csGoodsFind_ = value;
      return this;
    }
    public Builder SetCsGoodsFind(global::CSGoodsFind.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsGoodsFind = true;
      result.csGoodsFind_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsGoodsFind(global::CSGoodsFind value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsGoodsFind &&
          result.csGoodsFind_ != global::CSGoodsFind.DefaultInstance) {
          result.csGoodsFind_ = global::CSGoodsFind.CreateBuilder(result.csGoodsFind_).MergeFrom(value).BuildPartial();
      } else {
        result.csGoodsFind_ = value;
      }
      result.hasCsGoodsFind = true;
      return this;
    }
    public Builder ClearCsGoodsFind() {
      PrepareBuilder();
      result.hasCsGoodsFind = false;
      result.csGoodsFind_ = null;
      return this;
    }
    
    public bool HasScGoodsFind {
     get { return result.hasScGoodsFind; }
    }
    public global::SCGoodsFind ScGoodsFind {
      get { return result.ScGoodsFind; }
      set { SetScGoodsFind(value); }
    }
    public Builder SetScGoodsFind(global::SCGoodsFind value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScGoodsFind = true;
      result.scGoodsFind_ = value;
      return this;
    }
    public Builder SetScGoodsFind(global::SCGoodsFind.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScGoodsFind = true;
      result.scGoodsFind_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScGoodsFind(global::SCGoodsFind value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScGoodsFind &&
          result.scGoodsFind_ != global::SCGoodsFind.DefaultInstance) {
          result.scGoodsFind_ = global::SCGoodsFind.CreateBuilder(result.scGoodsFind_).MergeFrom(value).BuildPartial();
      } else {
        result.scGoodsFind_ = value;
      }
      result.hasScGoodsFind = true;
      return this;
    }
    public Builder ClearScGoodsFind() {
      PrepareBuilder();
      result.hasScGoodsFind = false;
      result.scGoodsFind_ = null;
      return this;
    }
    
    public bool HasCsClientOpen {
     get { return result.hasCsClientOpen; }
    }
    public global::CSClientOpen CsClientOpen {
      get { return result.CsClientOpen; }
      set { SetCsClientOpen(value); }
    }
    public Builder SetCsClientOpen(global::CSClientOpen value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsClientOpen = true;
      result.csClientOpen_ = value;
      return this;
    }
    public Builder SetCsClientOpen(global::CSClientOpen.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsClientOpen = true;
      result.csClientOpen_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsClientOpen(global::CSClientOpen value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsClientOpen &&
          result.csClientOpen_ != global::CSClientOpen.DefaultInstance) {
          result.csClientOpen_ = global::CSClientOpen.CreateBuilder(result.csClientOpen_).MergeFrom(value).BuildPartial();
      } else {
        result.csClientOpen_ = value;
      }
      result.hasCsClientOpen = true;
      return this;
    }
    public Builder ClearCsClientOpen() {
      PrepareBuilder();
      result.hasCsClientOpen = false;
      result.csClientOpen_ = null;
      return this;
    }
    
    public bool HasCsClientClose {
     get { return result.hasCsClientClose; }
    }
    public global::CSClientClose CsClientClose {
      get { return result.CsClientClose; }
      set { SetCsClientClose(value); }
    }
    public Builder SetCsClientClose(global::CSClientClose value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsClientClose = true;
      result.csClientClose_ = value;
      return this;
    }
    public Builder SetCsClientClose(global::CSClientClose.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsClientClose = true;
      result.csClientClose_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsClientClose(global::CSClientClose value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsClientClose &&
          result.csClientClose_ != global::CSClientClose.DefaultInstance) {
          result.csClientClose_ = global::CSClientClose.CreateBuilder(result.csClientClose_).MergeFrom(value).BuildPartial();
      } else {
        result.csClientClose_ = value;
      }
      result.hasCsClientClose = true;
      return this;
    }
    public Builder ClearCsClientClose() {
      PrepareBuilder();
      result.hasCsClientClose = false;
      result.csClientClose_ = null;
      return this;
    }
    
    public bool HasCsLogon {
     get { return result.hasCsLogon; }
    }
    public global::CSLogon CsLogon {
      get { return result.CsLogon; }
      set { SetCsLogon(value); }
    }
    public Builder SetCsLogon(global::CSLogon value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsLogon = true;
      result.csLogon_ = value;
      return this;
    }
    public Builder SetCsLogon(global::CSLogon.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsLogon = true;
      result.csLogon_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsLogon(global::CSLogon value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsLogon &&
          result.csLogon_ != global::CSLogon.DefaultInstance) {
          result.csLogon_ = global::CSLogon.CreateBuilder(result.csLogon_).MergeFrom(value).BuildPartial();
      } else {
        result.csLogon_ = value;
      }
      result.hasCsLogon = true;
      return this;
    }
    public Builder ClearCsLogon() {
      PrepareBuilder();
      result.hasCsLogon = false;
      result.csLogon_ = null;
      return this;
    }
    
    public bool HasScLogon {
     get { return result.hasScLogon; }
    }
    public global::SCLogon ScLogon {
      get { return result.ScLogon; }
      set { SetScLogon(value); }
    }
    public Builder SetScLogon(global::SCLogon value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScLogon = true;
      result.scLogon_ = value;
      return this;
    }
    public Builder SetScLogon(global::SCLogon.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScLogon = true;
      result.scLogon_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScLogon(global::SCLogon value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScLogon &&
          result.scLogon_ != global::SCLogon.DefaultInstance) {
          result.scLogon_ = global::SCLogon.CreateBuilder(result.scLogon_).MergeFrom(value).BuildPartial();
      } else {
        result.scLogon_ = value;
      }
      result.hasScLogon = true;
      return this;
    }
    public Builder ClearScLogon() {
      PrepareBuilder();
      result.hasScLogon = false;
      result.scLogon_ = null;
      return this;
    }
    
    public bool HasCsLogoff {
     get { return result.hasCsLogoff; }
    }
    public global::CSLogoff CsLogoff {
      get { return result.CsLogoff; }
      set { SetCsLogoff(value); }
    }
    public Builder SetCsLogoff(global::CSLogoff value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsLogoff = true;
      result.csLogoff_ = value;
      return this;
    }
    public Builder SetCsLogoff(global::CSLogoff.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsLogoff = true;
      result.csLogoff_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsLogoff(global::CSLogoff value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsLogoff &&
          result.csLogoff_ != global::CSLogoff.DefaultInstance) {
          result.csLogoff_ = global::CSLogoff.CreateBuilder(result.csLogoff_).MergeFrom(value).BuildPartial();
      } else {
        result.csLogoff_ = value;
      }
      result.hasCsLogoff = true;
      return this;
    }
    public Builder ClearCsLogoff() {
      PrepareBuilder();
      result.hasCsLogoff = false;
      result.csLogoff_ = null;
      return this;
    }
    
    public bool HasScLogoff {
     get { return result.hasScLogoff; }
    }
    public global::SCLogoff ScLogoff {
      get { return result.ScLogoff; }
      set { SetScLogoff(value); }
    }
    public Builder SetScLogoff(global::SCLogoff value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScLogoff = true;
      result.scLogoff_ = value;
      return this;
    }
    public Builder SetScLogoff(global::SCLogoff.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScLogoff = true;
      result.scLogoff_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScLogoff(global::SCLogoff value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScLogoff &&
          result.scLogoff_ != global::SCLogoff.DefaultInstance) {
          result.scLogoff_ = global::SCLogoff.CreateBuilder(result.scLogoff_).MergeFrom(value).BuildPartial();
      } else {
        result.scLogoff_ = value;
      }
      result.hasScLogoff = true;
      return this;
    }
    public Builder ClearScLogoff() {
      PrepareBuilder();
      result.hasScLogoff = false;
      result.scLogoff_ = null;
      return this;
    }
    
    public bool HasCsHungup {
     get { return result.hasCsHungup; }
    }
    public global::CSHungup CsHungup {
      get { return result.CsHungup; }
      set { SetCsHungup(value); }
    }
    public Builder SetCsHungup(global::CSHungup value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsHungup = true;
      result.csHungup_ = value;
      return this;
    }
    public Builder SetCsHungup(global::CSHungup.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsHungup = true;
      result.csHungup_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsHungup(global::CSHungup value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsHungup &&
          result.csHungup_ != global::CSHungup.DefaultInstance) {
          result.csHungup_ = global::CSHungup.CreateBuilder(result.csHungup_).MergeFrom(value).BuildPartial();
      } else {
        result.csHungup_ = value;
      }
      result.hasCsHungup = true;
      return this;
    }
    public Builder ClearCsHungup() {
      PrepareBuilder();
      result.hasCsHungup = false;
      result.csHungup_ = null;
      return this;
    }
    
    public bool HasCsPreCharge {
     get { return result.hasCsPreCharge; }
    }
    public global::CSPreCharge CsPreCharge {
      get { return result.CsPreCharge; }
      set { SetCsPreCharge(value); }
    }
    public Builder SetCsPreCharge(global::CSPreCharge value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsPreCharge = true;
      result.csPreCharge_ = value;
      return this;
    }
    public Builder SetCsPreCharge(global::CSPreCharge.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsPreCharge = true;
      result.csPreCharge_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsPreCharge(global::CSPreCharge value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsPreCharge &&
          result.csPreCharge_ != global::CSPreCharge.DefaultInstance) {
          result.csPreCharge_ = global::CSPreCharge.CreateBuilder(result.csPreCharge_).MergeFrom(value).BuildPartial();
      } else {
        result.csPreCharge_ = value;
      }
      result.hasCsPreCharge = true;
      return this;
    }
    public Builder ClearCsPreCharge() {
      PrepareBuilder();
      result.hasCsPreCharge = false;
      result.csPreCharge_ = null;
      return this;
    }
    
    public bool HasScPreCharge {
     get { return result.hasScPreCharge; }
    }
    public global::SCPreCharge ScPreCharge {
      get { return result.ScPreCharge; }
      set { SetScPreCharge(value); }
    }
    public Builder SetScPreCharge(global::SCPreCharge value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScPreCharge = true;
      result.scPreCharge_ = value;
      return this;
    }
    public Builder SetScPreCharge(global::SCPreCharge.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScPreCharge = true;
      result.scPreCharge_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScPreCharge(global::SCPreCharge value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScPreCharge &&
          result.scPreCharge_ != global::SCPreCharge.DefaultInstance) {
          result.scPreCharge_ = global::SCPreCharge.CreateBuilder(result.scPreCharge_).MergeFrom(value).BuildPartial();
      } else {
        result.scPreCharge_ = value;
      }
      result.hasScPreCharge = true;
      return this;
    }
    public Builder ClearScPreCharge() {
      PrepareBuilder();
      result.hasScPreCharge = false;
      result.scPreCharge_ = null;
      return this;
    }
    
    public bool HasScToCharge {
     get { return result.hasScToCharge; }
    }
    public global::SCToCharge ScToCharge {
      get { return result.ScToCharge; }
      set { SetScToCharge(value); }
    }
    public Builder SetScToCharge(global::SCToCharge value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScToCharge = true;
      result.scToCharge_ = value;
      return this;
    }
    public Builder SetScToCharge(global::SCToCharge.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScToCharge = true;
      result.scToCharge_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScToCharge(global::SCToCharge value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScToCharge &&
          result.scToCharge_ != global::SCToCharge.DefaultInstance) {
          result.scToCharge_ = global::SCToCharge.CreateBuilder(result.scToCharge_).MergeFrom(value).BuildPartial();
      } else {
        result.scToCharge_ = value;
      }
      result.hasScToCharge = true;
      return this;
    }
    public Builder ClearScToCharge() {
      PrepareBuilder();
      result.hasScToCharge = false;
      result.scToCharge_ = null;
      return this;
    }
    
    public bool HasCsCartAdd {
     get { return result.hasCsCartAdd; }
    }
    public global::CSCartAdd CsCartAdd {
      get { return result.CsCartAdd; }
      set { SetCsCartAdd(value); }
    }
    public Builder SetCsCartAdd(global::CSCartAdd value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsCartAdd = true;
      result.csCartAdd_ = value;
      return this;
    }
    public Builder SetCsCartAdd(global::CSCartAdd.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsCartAdd = true;
      result.csCartAdd_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsCartAdd(global::CSCartAdd value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsCartAdd &&
          result.csCartAdd_ != global::CSCartAdd.DefaultInstance) {
          result.csCartAdd_ = global::CSCartAdd.CreateBuilder(result.csCartAdd_).MergeFrom(value).BuildPartial();
      } else {
        result.csCartAdd_ = value;
      }
      result.hasCsCartAdd = true;
      return this;
    }
    public Builder ClearCsCartAdd() {
      PrepareBuilder();
      result.hasCsCartAdd = false;
      result.csCartAdd_ = null;
      return this;
    }
    
    public bool HasCsCartDel {
     get { return result.hasCsCartDel; }
    }
    public global::CSCartDel CsCartDel {
      get { return result.CsCartDel; }
      set { SetCsCartDel(value); }
    }
    public Builder SetCsCartDel(global::CSCartDel value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsCartDel = true;
      result.csCartDel_ = value;
      return this;
    }
    public Builder SetCsCartDel(global::CSCartDel.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsCartDel = true;
      result.csCartDel_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsCartDel(global::CSCartDel value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsCartDel &&
          result.csCartDel_ != global::CSCartDel.DefaultInstance) {
          result.csCartDel_ = global::CSCartDel.CreateBuilder(result.csCartDel_).MergeFrom(value).BuildPartial();
      } else {
        result.csCartDel_ = value;
      }
      result.hasCsCartDel = true;
      return this;
    }
    public Builder ClearCsCartDel() {
      PrepareBuilder();
      result.hasCsCartDel = false;
      result.csCartDel_ = null;
      return this;
    }
    
    public bool HasCsPreBuy {
     get { return result.hasCsPreBuy; }
    }
    public global::CSPreBuy CsPreBuy {
      get { return result.CsPreBuy; }
      set { SetCsPreBuy(value); }
    }
    public Builder SetCsPreBuy(global::CSPreBuy value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsPreBuy = true;
      result.csPreBuy_ = value;
      return this;
    }
    public Builder SetCsPreBuy(global::CSPreBuy.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsPreBuy = true;
      result.csPreBuy_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsPreBuy(global::CSPreBuy value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsPreBuy &&
          result.csPreBuy_ != global::CSPreBuy.DefaultInstance) {
          result.csPreBuy_ = global::CSPreBuy.CreateBuilder(result.csPreBuy_).MergeFrom(value).BuildPartial();
      } else {
        result.csPreBuy_ = value;
      }
      result.hasCsPreBuy = true;
      return this;
    }
    public Builder ClearCsPreBuy() {
      PrepareBuilder();
      result.hasCsPreBuy = false;
      result.csPreBuy_ = null;
      return this;
    }
    
    public bool HasScPreBuy {
     get { return result.hasScPreBuy; }
    }
    public global::SCPreBuy ScPreBuy {
      get { return result.ScPreBuy; }
      set { SetScPreBuy(value); }
    }
    public Builder SetScPreBuy(global::SCPreBuy value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScPreBuy = true;
      result.scPreBuy_ = value;
      return this;
    }
    public Builder SetScPreBuy(global::SCPreBuy.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScPreBuy = true;
      result.scPreBuy_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScPreBuy(global::SCPreBuy value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScPreBuy &&
          result.scPreBuy_ != global::SCPreBuy.DefaultInstance) {
          result.scPreBuy_ = global::SCPreBuy.CreateBuilder(result.scPreBuy_).MergeFrom(value).BuildPartial();
      } else {
        result.scPreBuy_ = value;
      }
      result.hasScPreBuy = true;
      return this;
    }
    public Builder ClearScPreBuy() {
      PrepareBuilder();
      result.hasScPreBuy = false;
      result.scPreBuy_ = null;
      return this;
    }
    
    public bool HasScToBuy {
     get { return result.hasScToBuy; }
    }
    public global::SCToBuy ScToBuy {
      get { return result.ScToBuy; }
      set { SetScToBuy(value); }
    }
    public Builder SetScToBuy(global::SCToBuy value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScToBuy = true;
      result.scToBuy_ = value;
      return this;
    }
    public Builder SetScToBuy(global::SCToBuy.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScToBuy = true;
      result.scToBuy_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScToBuy(global::SCToBuy value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScToBuy &&
          result.scToBuy_ != global::SCToBuy.DefaultInstance) {
          result.scToBuy_ = global::SCToBuy.CreateBuilder(result.scToBuy_).MergeFrom(value).BuildPartial();
      } else {
        result.scToBuy_ = value;
      }
      result.hasScToBuy = true;
      return this;
    }
    public Builder ClearScToBuy() {
      PrepareBuilder();
      result.hasScToBuy = false;
      result.scToBuy_ = null;
      return this;
    }
    
    public bool HasScSysMessage {
     get { return result.hasScSysMessage; }
    }
    public global::SCSysMessage ScSysMessage {
      get { return result.ScSysMessage; }
      set { SetScSysMessage(value); }
    }
    public Builder SetScSysMessage(global::SCSysMessage value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScSysMessage = true;
      result.scSysMessage_ = value;
      return this;
    }
    public Builder SetScSysMessage(global::SCSysMessage.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScSysMessage = true;
      result.scSysMessage_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScSysMessage(global::SCSysMessage value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScSysMessage &&
          result.scSysMessage_ != global::SCSysMessage.DefaultInstance) {
          result.scSysMessage_ = global::SCSysMessage.CreateBuilder(result.scSysMessage_).MergeFrom(value).BuildPartial();
      } else {
        result.scSysMessage_ = value;
      }
      result.hasScSysMessage = true;
      return this;
    }
    public Builder ClearScSysMessage() {
      PrepareBuilder();
      result.hasScSysMessage = false;
      result.scSysMessage_ = null;
      return this;
    }
    
    public bool HasCsEvaluate {
     get { return result.hasCsEvaluate; }
    }
    public global::CSEvaluate CsEvaluate {
      get { return result.CsEvaluate; }
      set { SetCsEvaluate(value); }
    }
    public Builder SetCsEvaluate(global::CSEvaluate value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsEvaluate = true;
      result.csEvaluate_ = value;
      return this;
    }
    public Builder SetCsEvaluate(global::CSEvaluate.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsEvaluate = true;
      result.csEvaluate_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsEvaluate(global::CSEvaluate value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsEvaluate &&
          result.csEvaluate_ != global::CSEvaluate.DefaultInstance) {
          result.csEvaluate_ = global::CSEvaluate.CreateBuilder(result.csEvaluate_).MergeFrom(value).BuildPartial();
      } else {
        result.csEvaluate_ = value;
      }
      result.hasCsEvaluate = true;
      return this;
    }
    public Builder ClearCsEvaluate() {
      PrepareBuilder();
      result.hasCsEvaluate = false;
      result.csEvaluate_ = null;
      return this;
    }
    
    public bool HasScEvaluate {
     get { return result.hasScEvaluate; }
    }
    public global::SCEvaluate ScEvaluate {
      get { return result.ScEvaluate; }
      set { SetScEvaluate(value); }
    }
    public Builder SetScEvaluate(global::SCEvaluate value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScEvaluate = true;
      result.scEvaluate_ = value;
      return this;
    }
    public Builder SetScEvaluate(global::SCEvaluate.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScEvaluate = true;
      result.scEvaluate_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScEvaluate(global::SCEvaluate value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScEvaluate &&
          result.scEvaluate_ != global::SCEvaluate.DefaultInstance) {
          result.scEvaluate_ = global::SCEvaluate.CreateBuilder(result.scEvaluate_).MergeFrom(value).BuildPartial();
      } else {
        result.scEvaluate_ = value;
      }
      result.hasScEvaluate = true;
      return this;
    }
    public Builder ClearScEvaluate() {
      PrepareBuilder();
      result.hasScEvaluate = false;
      result.scEvaluate_ = null;
      return this;
    }
    
    public bool HasCsVerifyCode {
     get { return result.hasCsVerifyCode; }
    }
    public global::CSVerifyCode CsVerifyCode {
      get { return result.CsVerifyCode; }
      set { SetCsVerifyCode(value); }
    }
    public Builder SetCsVerifyCode(global::CSVerifyCode value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsVerifyCode = true;
      result.csVerifyCode_ = value;
      return this;
    }
    public Builder SetCsVerifyCode(global::CSVerifyCode.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsVerifyCode = true;
      result.csVerifyCode_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsVerifyCode(global::CSVerifyCode value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsVerifyCode &&
          result.csVerifyCode_ != global::CSVerifyCode.DefaultInstance) {
          result.csVerifyCode_ = global::CSVerifyCode.CreateBuilder(result.csVerifyCode_).MergeFrom(value).BuildPartial();
      } else {
        result.csVerifyCode_ = value;
      }
      result.hasCsVerifyCode = true;
      return this;
    }
    public Builder ClearCsVerifyCode() {
      PrepareBuilder();
      result.hasCsVerifyCode = false;
      result.csVerifyCode_ = null;
      return this;
    }
    
    public bool HasScVerifyCode {
     get { return result.hasScVerifyCode; }
    }
    public global::SCVerifyCode ScVerifyCode {
      get { return result.ScVerifyCode; }
      set { SetScVerifyCode(value); }
    }
    public Builder SetScVerifyCode(global::SCVerifyCode value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScVerifyCode = true;
      result.scVerifyCode_ = value;
      return this;
    }
    public Builder SetScVerifyCode(global::SCVerifyCode.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScVerifyCode = true;
      result.scVerifyCode_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScVerifyCode(global::SCVerifyCode value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScVerifyCode &&
          result.scVerifyCode_ != global::SCVerifyCode.DefaultInstance) {
          result.scVerifyCode_ = global::SCVerifyCode.CreateBuilder(result.scVerifyCode_).MergeFrom(value).BuildPartial();
      } else {
        result.scVerifyCode_ = value;
      }
      result.hasScVerifyCode = true;
      return this;
    }
    public Builder ClearScVerifyCode() {
      PrepareBuilder();
      result.hasScVerifyCode = false;
      result.scVerifyCode_ = null;
      return this;
    }
    
    public bool HasCsBindMobile {
     get { return result.hasCsBindMobile; }
    }
    public global::CSBindMobile CsBindMobile {
      get { return result.CsBindMobile; }
      set { SetCsBindMobile(value); }
    }
    public Builder SetCsBindMobile(global::CSBindMobile value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsBindMobile = true;
      result.csBindMobile_ = value;
      return this;
    }
    public Builder SetCsBindMobile(global::CSBindMobile.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsBindMobile = true;
      result.csBindMobile_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsBindMobile(global::CSBindMobile value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsBindMobile &&
          result.csBindMobile_ != global::CSBindMobile.DefaultInstance) {
          result.csBindMobile_ = global::CSBindMobile.CreateBuilder(result.csBindMobile_).MergeFrom(value).BuildPartial();
      } else {
        result.csBindMobile_ = value;
      }
      result.hasCsBindMobile = true;
      return this;
    }
    public Builder ClearCsBindMobile() {
      PrepareBuilder();
      result.hasCsBindMobile = false;
      result.csBindMobile_ = null;
      return this;
    }
    
    public bool HasScBindMobile {
     get { return result.hasScBindMobile; }
    }
    public global::SCBindMobile ScBindMobile {
      get { return result.ScBindMobile; }
      set { SetScBindMobile(value); }
    }
    public Builder SetScBindMobile(global::SCBindMobile value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScBindMobile = true;
      result.scBindMobile_ = value;
      return this;
    }
    public Builder SetScBindMobile(global::SCBindMobile.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScBindMobile = true;
      result.scBindMobile_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScBindMobile(global::SCBindMobile value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScBindMobile &&
          result.scBindMobile_ != global::SCBindMobile.DefaultInstance) {
          result.scBindMobile_ = global::SCBindMobile.CreateBuilder(result.scBindMobile_).MergeFrom(value).BuildPartial();
      } else {
        result.scBindMobile_ = value;
      }
      result.hasScBindMobile = true;
      return this;
    }
    public Builder ClearScBindMobile() {
      PrepareBuilder();
      result.hasScBindMobile = false;
      result.scBindMobile_ = null;
      return this;
    }
  }
  static MessageContent() {
    object.ReferenceEquals(global::ClientProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSClientOpen : pb::GeneratedMessage<CSClientOpen, CSClientOpen.Builder> {
  private CSClientOpen() { }
  private static readonly CSClientOpen defaultInstance = new CSClientOpen().MakeReadOnly();
  private static readonly string[] _cSClientOpenFieldNames = new string[] { "text" };
  private static readonly uint[] _cSClientOpenFieldTags = new uint[] { 10 };
  public static CSClientOpen DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSClientOpen DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSClientOpen ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::ClientProtocol.internal__static_CSClientOpen__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSClientOpen, CSClientOpen.Builder> InternalFieldAccessors {
    get { return global::ClientProtocol.internal__static_CSClientOpen__FieldAccessorTable; }
  }
  
  public const int TextFieldNumber = 1;
  private bool hasText;
  private string text_ = "";
  public bool HasText {
    get { return hasText; }
  }
  public string Text {
    get { return text_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasText) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSClientOpenFieldNames;
    if (hasText) {
      output.WriteString(1, field_names[0], Text);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasText) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Text);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSClientOpen ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSClientOpen ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSClientOpen ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSClientOpen ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSClientOpen ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSClientOpen ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSClientOpen ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSClientOpen ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSClientOpen ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSClientOpen ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSClientOpen MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSClientOpen prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSClientOpen, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSClientOpen cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSClientOpen result;
    
    private CSClientOpen PrepareBuilder() {
      if (resultIsReadOnly) {
        CSClientOpen original = result;
        result = new CSClientOpen();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSClientOpen MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSClientOpen.Descriptor; }
    }
    
    public override CSClientOpen DefaultInstanceForType {
      get { return global::CSClientOpen.DefaultInstance; }
    }
    
    public override CSClientOpen BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSClientOpen) {
        return MergeFrom((CSClientOpen) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSClientOpen other) {
      if (other == global::CSClientOpen.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasText) {
        Text = other.Text;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSClientOpenFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSClientOpenFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasText = input.ReadString(ref result.text_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasText {
      get { return result.hasText; }
    }
    public string Text {
      get { return result.Text; }
      set { SetText(value); }
    }
    public Builder SetText(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasText = true;
      result.text_ = value;
      return this;
    }
    public Builder ClearText() {
      PrepareBuilder();
      result.hasText = false;
      result.text_ = "";
      return this;
    }
  }
  static CSClientOpen() {
    object.ReferenceEquals(global::ClientProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSClientClose : pb::GeneratedMessage<CSClientClose, CSClientClose.Builder> {
  private CSClientClose() { }
  private static readonly CSClientClose defaultInstance = new CSClientClose().MakeReadOnly();
  private static readonly string[] _cSClientCloseFieldNames = new string[] {  };
  private static readonly uint[] _cSClientCloseFieldTags = new uint[] {  };
  public static CSClientClose DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSClientClose DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSClientClose ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::ClientProtocol.internal__static_CSClientClose__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSClientClose, CSClientClose.Builder> InternalFieldAccessors {
    get { return global::ClientProtocol.internal__static_CSClientClose__FieldAccessorTable; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSClientCloseFieldNames;
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSClientClose ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSClientClose ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSClientClose ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSClientClose ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSClientClose ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSClientClose ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSClientClose ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSClientClose ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSClientClose ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSClientClose ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSClientClose MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSClientClose prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSClientClose, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSClientClose cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSClientClose result;
    
    private CSClientClose PrepareBuilder() {
      if (resultIsReadOnly) {
        CSClientClose original = result;
        result = new CSClientClose();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSClientClose MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSClientClose.Descriptor; }
    }
    
    public override CSClientClose DefaultInstanceForType {
      get { return global::CSClientClose.DefaultInstance; }
    }
    
    public override CSClientClose BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSClientClose) {
        return MergeFrom((CSClientClose) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSClientClose other) {
      if (other == global::CSClientClose.DefaultInstance) return this;
      PrepareBuilder();
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSClientCloseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSClientCloseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
  }
  static CSClientClose() {
    object.ReferenceEquals(global::ClientProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSLogon : pb::GeneratedMessage<CSLogon, CSLogon.Builder> {
  private CSLogon() { }
  private static readonly CSLogon defaultInstance = new CSLogon().MakeReadOnly();
  private static readonly string[] _cSLogonFieldNames = new string[] { "cardnumber" };
  private static readonly uint[] _cSLogonFieldTags = new uint[] { 10 };
  public static CSLogon DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSLogon DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSLogon ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::ClientProtocol.internal__static_CSLogon__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSLogon, CSLogon.Builder> InternalFieldAccessors {
    get { return global::ClientProtocol.internal__static_CSLogon__FieldAccessorTable; }
  }
  
  public const int CardnumberFieldNumber = 1;
  private bool hasCardnumber;
  private string cardnumber_ = "";
  public bool HasCardnumber {
    get { return hasCardnumber; }
  }
  public string Cardnumber {
    get { return cardnumber_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasCardnumber) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSLogonFieldNames;
    if (hasCardnumber) {
      output.WriteString(1, field_names[0], Cardnumber);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasCardnumber) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Cardnumber);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSLogon ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSLogon ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSLogon ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSLogon ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSLogon ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSLogon ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSLogon ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSLogon ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSLogon ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSLogon ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSLogon MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSLogon prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSLogon, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSLogon cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSLogon result;
    
    private CSLogon PrepareBuilder() {
      if (resultIsReadOnly) {
        CSLogon original = result;
        result = new CSLogon();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSLogon MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSLogon.Descriptor; }
    }
    
    public override CSLogon DefaultInstanceForType {
      get { return global::CSLogon.DefaultInstance; }
    }
    
    public override CSLogon BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSLogon) {
        return MergeFrom((CSLogon) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSLogon other) {
      if (other == global::CSLogon.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasCardnumber) {
        Cardnumber = other.Cardnumber;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSLogonFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSLogonFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasCardnumber = input.ReadString(ref result.cardnumber_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasCardnumber {
      get { return result.hasCardnumber; }
    }
    public string Cardnumber {
      get { return result.Cardnumber; }
      set { SetCardnumber(value); }
    }
    public Builder SetCardnumber(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCardnumber = true;
      result.cardnumber_ = value;
      return this;
    }
    public Builder ClearCardnumber() {
      PrepareBuilder();
      result.hasCardnumber = false;
      result.cardnumber_ = "";
      return this;
    }
  }
  static CSLogon() {
    object.ReferenceEquals(global::ClientProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCLogon : pb::GeneratedMessage<SCLogon, SCLogon.Builder> {
  private SCLogon() { }
  private static readonly SCLogon defaultInstance = new SCLogon().MakeReadOnly();
  private static readonly string[] _sCLogonFieldNames = new string[] { "balance", "cardnumber", "integal", "memberid", "name", "right" };
  private static readonly uint[] _sCLogonFieldTags = new uint[] { 72, 18, 96, 8, 34, 40 };
  public static SCLogon DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCLogon DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCLogon ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::ClientProtocol.internal__static_SCLogon__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCLogon, SCLogon.Builder> InternalFieldAccessors {
    get { return global::ClientProtocol.internal__static_SCLogon__FieldAccessorTable; }
  }
  
  public const int MemberidFieldNumber = 1;
  private bool hasMemberid;
  private int memberid_;
  public bool HasMemberid {
    get { return hasMemberid; }
  }
  public int Memberid {
    get { return memberid_; }
  }
  
  public const int CardnumberFieldNumber = 2;
  private bool hasCardnumber;
  private string cardnumber_ = "";
  public bool HasCardnumber {
    get { return hasCardnumber; }
  }
  public string Cardnumber {
    get { return cardnumber_; }
  }
  
  public const int NameFieldNumber = 4;
  private bool hasName;
  private string name_ = "";
  public bool HasName {
    get { return hasName; }
  }
  public string Name {
    get { return name_; }
  }
  
  public const int RightFieldNumber = 5;
  private bool hasRight;
  private int right_;
  public bool HasRight {
    get { return hasRight; }
  }
  public int Right {
    get { return right_; }
  }
  
  public const int BalanceFieldNumber = 9;
  private bool hasBalance;
  private int balance_;
  public bool HasBalance {
    get { return hasBalance; }
  }
  public int Balance {
    get { return balance_; }
  }
  
  public const int IntegalFieldNumber = 12;
  private bool hasIntegal;
  private int integal_;
  public bool HasIntegal {
    get { return hasIntegal; }
  }
  public int Integal {
    get { return integal_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasMemberid) return false;
      if (!hasCardnumber) return false;
      if (!hasName) return false;
      if (!hasRight) return false;
      if (!hasBalance) return false;
      if (!hasIntegal) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCLogonFieldNames;
    if (hasMemberid) {
      output.WriteInt32(1, field_names[3], Memberid);
    }
    if (hasCardnumber) {
      output.WriteString(2, field_names[1], Cardnumber);
    }
    if (hasName) {
      output.WriteString(4, field_names[4], Name);
    }
    if (hasRight) {
      output.WriteInt32(5, field_names[5], Right);
    }
    if (hasBalance) {
      output.WriteInt32(9, field_names[0], Balance);
    }
    if (hasIntegal) {
      output.WriteInt32(12, field_names[2], Integal);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasMemberid) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Memberid);
    }
    if (hasCardnumber) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Cardnumber);
    }
    if (hasName) {
      size += pb::CodedOutputStream.ComputeStringSize(4, Name);
    }
    if (hasRight) {
      size += pb::CodedOutputStream.ComputeInt32Size(5, Right);
    }
    if (hasBalance) {
      size += pb::CodedOutputStream.ComputeInt32Size(9, Balance);
    }
    if (hasIntegal) {
      size += pb::CodedOutputStream.ComputeInt32Size(12, Integal);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCLogon ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCLogon ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCLogon ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCLogon ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCLogon ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCLogon ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCLogon ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCLogon ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCLogon ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCLogon ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCLogon MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCLogon prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCLogon, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCLogon cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCLogon result;
    
    private SCLogon PrepareBuilder() {
      if (resultIsReadOnly) {
        SCLogon original = result;
        result = new SCLogon();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCLogon MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCLogon.Descriptor; }
    }
    
    public override SCLogon DefaultInstanceForType {
      get { return global::SCLogon.DefaultInstance; }
    }
    
    public override SCLogon BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCLogon) {
        return MergeFrom((SCLogon) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCLogon other) {
      if (other == global::SCLogon.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasMemberid) {
        Memberid = other.Memberid;
      }
      if (other.HasCardnumber) {
        Cardnumber = other.Cardnumber;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasRight) {
        Right = other.Right;
      }
      if (other.HasBalance) {
        Balance = other.Balance;
      }
      if (other.HasIntegal) {
        Integal = other.Integal;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCLogonFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCLogonFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasMemberid = input.ReadInt32(ref result.memberid_);
            break;
          }
          case 18: {
            result.hasCardnumber = input.ReadString(ref result.cardnumber_);
            break;
          }
          case 34: {
            result.hasName = input.ReadString(ref result.name_);
            break;
          }
          case 40: {
            result.hasRight = input.ReadInt32(ref result.right_);
            break;
          }
          case 72: {
            result.hasBalance = input.ReadInt32(ref result.balance_);
            break;
          }
          case 96: {
            result.hasIntegal = input.ReadInt32(ref result.integal_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasMemberid {
      get { return result.hasMemberid; }
    }
    public int Memberid {
      get { return result.Memberid; }
      set { SetMemberid(value); }
    }
    public Builder SetMemberid(int value) {
      PrepareBuilder();
      result.hasMemberid = true;
      result.memberid_ = value;
      return this;
    }
    public Builder ClearMemberid() {
      PrepareBuilder();
      result.hasMemberid = false;
      result.memberid_ = 0;
      return this;
    }
    
    public bool HasCardnumber {
      get { return result.hasCardnumber; }
    }
    public string Cardnumber {
      get { return result.Cardnumber; }
      set { SetCardnumber(value); }
    }
    public Builder SetCardnumber(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCardnumber = true;
      result.cardnumber_ = value;
      return this;
    }
    public Builder ClearCardnumber() {
      PrepareBuilder();
      result.hasCardnumber = false;
      result.cardnumber_ = "";
      return this;
    }
    
    public bool HasName {
      get { return result.hasName; }
    }
    public string Name {
      get { return result.Name; }
      set { SetName(value); }
    }
    public Builder SetName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasName = true;
      result.name_ = value;
      return this;
    }
    public Builder ClearName() {
      PrepareBuilder();
      result.hasName = false;
      result.name_ = "";
      return this;
    }
    
    public bool HasRight {
      get { return result.hasRight; }
    }
    public int Right {
      get { return result.Right; }
      set { SetRight(value); }
    }
    public Builder SetRight(int value) {
      PrepareBuilder();
      result.hasRight = true;
      result.right_ = value;
      return this;
    }
    public Builder ClearRight() {
      PrepareBuilder();
      result.hasRight = false;
      result.right_ = 0;
      return this;
    }
    
    public bool HasBalance {
      get { return result.hasBalance; }
    }
    public int Balance {
      get { return result.Balance; }
      set { SetBalance(value); }
    }
    public Builder SetBalance(int value) {
      PrepareBuilder();
      result.hasBalance = true;
      result.balance_ = value;
      return this;
    }
    public Builder ClearBalance() {
      PrepareBuilder();
      result.hasBalance = false;
      result.balance_ = 0;
      return this;
    }
    
    public bool HasIntegal {
      get { return result.hasIntegal; }
    }
    public int Integal {
      get { return result.Integal; }
      set { SetIntegal(value); }
    }
    public Builder SetIntegal(int value) {
      PrepareBuilder();
      result.hasIntegal = true;
      result.integal_ = value;
      return this;
    }
    public Builder ClearIntegal() {
      PrepareBuilder();
      result.hasIntegal = false;
      result.integal_ = 0;
      return this;
    }
  }
  static SCLogon() {
    object.ReferenceEquals(global::ClientProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSLogoff : pb::GeneratedMessage<CSLogoff, CSLogoff.Builder> {
  private CSLogoff() { }
  private static readonly CSLogoff defaultInstance = new CSLogoff().MakeReadOnly();
  private static readonly string[] _cSLogoffFieldNames = new string[] { "cardnumber" };
  private static readonly uint[] _cSLogoffFieldTags = new uint[] { 10 };
  public static CSLogoff DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSLogoff DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSLogoff ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::ClientProtocol.internal__static_CSLogoff__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSLogoff, CSLogoff.Builder> InternalFieldAccessors {
    get { return global::ClientProtocol.internal__static_CSLogoff__FieldAccessorTable; }
  }
  
  public const int CardnumberFieldNumber = 1;
  private bool hasCardnumber;
  private string cardnumber_ = "";
  public bool HasCardnumber {
    get { return hasCardnumber; }
  }
  public string Cardnumber {
    get { return cardnumber_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasCardnumber) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSLogoffFieldNames;
    if (hasCardnumber) {
      output.WriteString(1, field_names[0], Cardnumber);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasCardnumber) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Cardnumber);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSLogoff ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSLogoff ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSLogoff ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSLogoff ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSLogoff ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSLogoff ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSLogoff ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSLogoff ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSLogoff ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSLogoff ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSLogoff MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSLogoff prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSLogoff, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSLogoff cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSLogoff result;
    
    private CSLogoff PrepareBuilder() {
      if (resultIsReadOnly) {
        CSLogoff original = result;
        result = new CSLogoff();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSLogoff MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSLogoff.Descriptor; }
    }
    
    public override CSLogoff DefaultInstanceForType {
      get { return global::CSLogoff.DefaultInstance; }
    }
    
    public override CSLogoff BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSLogoff) {
        return MergeFrom((CSLogoff) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSLogoff other) {
      if (other == global::CSLogoff.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasCardnumber) {
        Cardnumber = other.Cardnumber;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSLogoffFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSLogoffFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasCardnumber = input.ReadString(ref result.cardnumber_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasCardnumber {
      get { return result.hasCardnumber; }
    }
    public string Cardnumber {
      get { return result.Cardnumber; }
      set { SetCardnumber(value); }
    }
    public Builder SetCardnumber(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCardnumber = true;
      result.cardnumber_ = value;
      return this;
    }
    public Builder ClearCardnumber() {
      PrepareBuilder();
      result.hasCardnumber = false;
      result.cardnumber_ = "";
      return this;
    }
  }
  static CSLogoff() {
    object.ReferenceEquals(global::ClientProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCLogoff : pb::GeneratedMessage<SCLogoff, SCLogoff.Builder> {
  private SCLogoff() { }
  private static readonly SCLogoff defaultInstance = new SCLogoff().MakeReadOnly();
  private static readonly string[] _sCLogoffFieldNames = new string[] { "balance", "cardnumber", "name", "right", "usedmoney", "usedtime" };
  private static readonly uint[] _sCLogoffFieldTags = new uint[] { 32, 18, 10, 26, 40, 48 };
  public static SCLogoff DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCLogoff DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCLogoff ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::ClientProtocol.internal__static_SCLogoff__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCLogoff, SCLogoff.Builder> InternalFieldAccessors {
    get { return global::ClientProtocol.internal__static_SCLogoff__FieldAccessorTable; }
  }
  
  public const int NameFieldNumber = 1;
  private bool hasName;
  private string name_ = "";
  public bool HasName {
    get { return hasName; }
  }
  public string Name {
    get { return name_; }
  }
  
  public const int CardnumberFieldNumber = 2;
  private bool hasCardnumber;
  private string cardnumber_ = "";
  public bool HasCardnumber {
    get { return hasCardnumber; }
  }
  public string Cardnumber {
    get { return cardnumber_; }
  }
  
  public const int RightFieldNumber = 3;
  private bool hasRight;
  private string right_ = "";
  public bool HasRight {
    get { return hasRight; }
  }
  public string Right {
    get { return right_; }
  }
  
  public const int BalanceFieldNumber = 4;
  private bool hasBalance;
  private int balance_;
  public bool HasBalance {
    get { return hasBalance; }
  }
  public int Balance {
    get { return balance_; }
  }
  
  public const int UsedmoneyFieldNumber = 5;
  private bool hasUsedmoney;
  private int usedmoney_;
  public bool HasUsedmoney {
    get { return hasUsedmoney; }
  }
  public int Usedmoney {
    get { return usedmoney_; }
  }
  
  public const int UsedtimeFieldNumber = 6;
  private bool hasUsedtime;
  private int usedtime_;
  public bool HasUsedtime {
    get { return hasUsedtime; }
  }
  public int Usedtime {
    get { return usedtime_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasName) return false;
      if (!hasCardnumber) return false;
      if (!hasRight) return false;
      if (!hasBalance) return false;
      if (!hasUsedmoney) return false;
      if (!hasUsedtime) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCLogoffFieldNames;
    if (hasName) {
      output.WriteString(1, field_names[2], Name);
    }
    if (hasCardnumber) {
      output.WriteString(2, field_names[1], Cardnumber);
    }
    if (hasRight) {
      output.WriteString(3, field_names[3], Right);
    }
    if (hasBalance) {
      output.WriteInt32(4, field_names[0], Balance);
    }
    if (hasUsedmoney) {
      output.WriteInt32(5, field_names[4], Usedmoney);
    }
    if (hasUsedtime) {
      output.WriteInt32(6, field_names[5], Usedtime);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasName) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Name);
    }
    if (hasCardnumber) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Cardnumber);
    }
    if (hasRight) {
      size += pb::CodedOutputStream.ComputeStringSize(3, Right);
    }
    if (hasBalance) {
      size += pb::CodedOutputStream.ComputeInt32Size(4, Balance);
    }
    if (hasUsedmoney) {
      size += pb::CodedOutputStream.ComputeInt32Size(5, Usedmoney);
    }
    if (hasUsedtime) {
      size += pb::CodedOutputStream.ComputeInt32Size(6, Usedtime);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCLogoff ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCLogoff ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCLogoff ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCLogoff ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCLogoff ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCLogoff ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCLogoff ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCLogoff ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCLogoff ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCLogoff ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCLogoff MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCLogoff prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCLogoff, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCLogoff cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCLogoff result;
    
    private SCLogoff PrepareBuilder() {
      if (resultIsReadOnly) {
        SCLogoff original = result;
        result = new SCLogoff();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCLogoff MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCLogoff.Descriptor; }
    }
    
    public override SCLogoff DefaultInstanceForType {
      get { return global::SCLogoff.DefaultInstance; }
    }
    
    public override SCLogoff BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCLogoff) {
        return MergeFrom((SCLogoff) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCLogoff other) {
      if (other == global::SCLogoff.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasCardnumber) {
        Cardnumber = other.Cardnumber;
      }
      if (other.HasRight) {
        Right = other.Right;
      }
      if (other.HasBalance) {
        Balance = other.Balance;
      }
      if (other.HasUsedmoney) {
        Usedmoney = other.Usedmoney;
      }
      if (other.HasUsedtime) {
        Usedtime = other.Usedtime;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCLogoffFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCLogoffFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasName = input.ReadString(ref result.name_);
            break;
          }
          case 18: {
            result.hasCardnumber = input.ReadString(ref result.cardnumber_);
            break;
          }
          case 26: {
            result.hasRight = input.ReadString(ref result.right_);
            break;
          }
          case 32: {
            result.hasBalance = input.ReadInt32(ref result.balance_);
            break;
          }
          case 40: {
            result.hasUsedmoney = input.ReadInt32(ref result.usedmoney_);
            break;
          }
          case 48: {
            result.hasUsedtime = input.ReadInt32(ref result.usedtime_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasName {
      get { return result.hasName; }
    }
    public string Name {
      get { return result.Name; }
      set { SetName(value); }
    }
    public Builder SetName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasName = true;
      result.name_ = value;
      return this;
    }
    public Builder ClearName() {
      PrepareBuilder();
      result.hasName = false;
      result.name_ = "";
      return this;
    }
    
    public bool HasCardnumber {
      get { return result.hasCardnumber; }
    }
    public string Cardnumber {
      get { return result.Cardnumber; }
      set { SetCardnumber(value); }
    }
    public Builder SetCardnumber(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCardnumber = true;
      result.cardnumber_ = value;
      return this;
    }
    public Builder ClearCardnumber() {
      PrepareBuilder();
      result.hasCardnumber = false;
      result.cardnumber_ = "";
      return this;
    }
    
    public bool HasRight {
      get { return result.hasRight; }
    }
    public string Right {
      get { return result.Right; }
      set { SetRight(value); }
    }
    public Builder SetRight(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasRight = true;
      result.right_ = value;
      return this;
    }
    public Builder ClearRight() {
      PrepareBuilder();
      result.hasRight = false;
      result.right_ = "";
      return this;
    }
    
    public bool HasBalance {
      get { return result.hasBalance; }
    }
    public int Balance {
      get { return result.Balance; }
      set { SetBalance(value); }
    }
    public Builder SetBalance(int value) {
      PrepareBuilder();
      result.hasBalance = true;
      result.balance_ = value;
      return this;
    }
    public Builder ClearBalance() {
      PrepareBuilder();
      result.hasBalance = false;
      result.balance_ = 0;
      return this;
    }
    
    public bool HasUsedmoney {
      get { return result.hasUsedmoney; }
    }
    public int Usedmoney {
      get { return result.Usedmoney; }
      set { SetUsedmoney(value); }
    }
    public Builder SetUsedmoney(int value) {
      PrepareBuilder();
      result.hasUsedmoney = true;
      result.usedmoney_ = value;
      return this;
    }
    public Builder ClearUsedmoney() {
      PrepareBuilder();
      result.hasUsedmoney = false;
      result.usedmoney_ = 0;
      return this;
    }
    
    public bool HasUsedtime {
      get { return result.hasUsedtime; }
    }
    public int Usedtime {
      get { return result.Usedtime; }
      set { SetUsedtime(value); }
    }
    public Builder SetUsedtime(int value) {
      PrepareBuilder();
      result.hasUsedtime = true;
      result.usedtime_ = value;
      return this;
    }
    public Builder ClearUsedtime() {
      PrepareBuilder();
      result.hasUsedtime = false;
      result.usedtime_ = 0;
      return this;
    }
  }
  static SCLogoff() {
    object.ReferenceEquals(global::ClientProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSHungup : pb::GeneratedMessage<CSHungup, CSHungup.Builder> {
  private CSHungup() { }
  private static readonly CSHungup defaultInstance = new CSHungup().MakeReadOnly();
  private static readonly string[] _cSHungupFieldNames = new string[] { "cardnumber" };
  private static readonly uint[] _cSHungupFieldTags = new uint[] { 10 };
  public static CSHungup DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSHungup DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSHungup ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::ClientProtocol.internal__static_CSHungup__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSHungup, CSHungup.Builder> InternalFieldAccessors {
    get { return global::ClientProtocol.internal__static_CSHungup__FieldAccessorTable; }
  }
  
  public const int CardnumberFieldNumber = 1;
  private bool hasCardnumber;
  private string cardnumber_ = "";
  public bool HasCardnumber {
    get { return hasCardnumber; }
  }
  public string Cardnumber {
    get { return cardnumber_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasCardnumber) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSHungupFieldNames;
    if (hasCardnumber) {
      output.WriteString(1, field_names[0], Cardnumber);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasCardnumber) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Cardnumber);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSHungup ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSHungup ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSHungup ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSHungup ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSHungup ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSHungup ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSHungup ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSHungup ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSHungup ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSHungup ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSHungup MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSHungup prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSHungup, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSHungup cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSHungup result;
    
    private CSHungup PrepareBuilder() {
      if (resultIsReadOnly) {
        CSHungup original = result;
        result = new CSHungup();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSHungup MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSHungup.Descriptor; }
    }
    
    public override CSHungup DefaultInstanceForType {
      get { return global::CSHungup.DefaultInstance; }
    }
    
    public override CSHungup BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSHungup) {
        return MergeFrom((CSHungup) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSHungup other) {
      if (other == global::CSHungup.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasCardnumber) {
        Cardnumber = other.Cardnumber;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSHungupFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSHungupFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasCardnumber = input.ReadString(ref result.cardnumber_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasCardnumber {
      get { return result.hasCardnumber; }
    }
    public string Cardnumber {
      get { return result.Cardnumber; }
      set { SetCardnumber(value); }
    }
    public Builder SetCardnumber(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCardnumber = true;
      result.cardnumber_ = value;
      return this;
    }
    public Builder ClearCardnumber() {
      PrepareBuilder();
      result.hasCardnumber = false;
      result.cardnumber_ = "";
      return this;
    }
  }
  static CSHungup() {
    object.ReferenceEquals(global::ClientProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSPreCharge : pb::GeneratedMessage<CSPreCharge, CSPreCharge.Builder> {
  private CSPreCharge() { }
  private static readonly CSPreCharge defaultInstance = new CSPreCharge().MakeReadOnly();
  private static readonly string[] _cSPreChargeFieldNames = new string[] { "amount", "cardnumber", "offical", "paymode" };
  private static readonly uint[] _cSPreChargeFieldTags = new uint[] { 16, 10, 32, 24 };
  public static CSPreCharge DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSPreCharge DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSPreCharge ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::ClientProtocol.internal__static_CSPreCharge__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSPreCharge, CSPreCharge.Builder> InternalFieldAccessors {
    get { return global::ClientProtocol.internal__static_CSPreCharge__FieldAccessorTable; }
  }
  
  public const int CardnumberFieldNumber = 1;
  private bool hasCardnumber;
  private string cardnumber_ = "";
  public bool HasCardnumber {
    get { return hasCardnumber; }
  }
  public string Cardnumber {
    get { return cardnumber_; }
  }
  
  public const int AmountFieldNumber = 2;
  private bool hasAmount;
  private int amount_;
  public bool HasAmount {
    get { return hasAmount; }
  }
  public int Amount {
    get { return amount_; }
  }
  
  public const int PaymodeFieldNumber = 3;
  private bool hasPaymode;
  private int paymode_;
  public bool HasPaymode {
    get { return hasPaymode; }
  }
  public int Paymode {
    get { return paymode_; }
  }
  
  public const int OfficalFieldNumber = 4;
  private bool hasOffical;
  private int offical_;
  public bool HasOffical {
    get { return hasOffical; }
  }
  public int Offical {
    get { return offical_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasCardnumber) return false;
      if (!hasAmount) return false;
      if (!hasPaymode) return false;
      if (!hasOffical) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSPreChargeFieldNames;
    if (hasCardnumber) {
      output.WriteString(1, field_names[1], Cardnumber);
    }
    if (hasAmount) {
      output.WriteInt32(2, field_names[0], Amount);
    }
    if (hasPaymode) {
      output.WriteInt32(3, field_names[3], Paymode);
    }
    if (hasOffical) {
      output.WriteInt32(4, field_names[2], Offical);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasCardnumber) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Cardnumber);
    }
    if (hasAmount) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Amount);
    }
    if (hasPaymode) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, Paymode);
    }
    if (hasOffical) {
      size += pb::CodedOutputStream.ComputeInt32Size(4, Offical);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSPreCharge ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSPreCharge ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSPreCharge ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSPreCharge ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSPreCharge ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSPreCharge ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSPreCharge ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSPreCharge ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSPreCharge ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSPreCharge ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSPreCharge MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSPreCharge prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSPreCharge, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSPreCharge cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSPreCharge result;
    
    private CSPreCharge PrepareBuilder() {
      if (resultIsReadOnly) {
        CSPreCharge original = result;
        result = new CSPreCharge();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSPreCharge MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSPreCharge.Descriptor; }
    }
    
    public override CSPreCharge DefaultInstanceForType {
      get { return global::CSPreCharge.DefaultInstance; }
    }
    
    public override CSPreCharge BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSPreCharge) {
        return MergeFrom((CSPreCharge) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSPreCharge other) {
      if (other == global::CSPreCharge.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasCardnumber) {
        Cardnumber = other.Cardnumber;
      }
      if (other.HasAmount) {
        Amount = other.Amount;
      }
      if (other.HasPaymode) {
        Paymode = other.Paymode;
      }
      if (other.HasOffical) {
        Offical = other.Offical;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSPreChargeFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSPreChargeFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasCardnumber = input.ReadString(ref result.cardnumber_);
            break;
          }
          case 16: {
            result.hasAmount = input.ReadInt32(ref result.amount_);
            break;
          }
          case 24: {
            result.hasPaymode = input.ReadInt32(ref result.paymode_);
            break;
          }
          case 32: {
            result.hasOffical = input.ReadInt32(ref result.offical_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasCardnumber {
      get { return result.hasCardnumber; }
    }
    public string Cardnumber {
      get { return result.Cardnumber; }
      set { SetCardnumber(value); }
    }
    public Builder SetCardnumber(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCardnumber = true;
      result.cardnumber_ = value;
      return this;
    }
    public Builder ClearCardnumber() {
      PrepareBuilder();
      result.hasCardnumber = false;
      result.cardnumber_ = "";
      return this;
    }
    
    public bool HasAmount {
      get { return result.hasAmount; }
    }
    public int Amount {
      get { return result.Amount; }
      set { SetAmount(value); }
    }
    public Builder SetAmount(int value) {
      PrepareBuilder();
      result.hasAmount = true;
      result.amount_ = value;
      return this;
    }
    public Builder ClearAmount() {
      PrepareBuilder();
      result.hasAmount = false;
      result.amount_ = 0;
      return this;
    }
    
    public bool HasPaymode {
      get { return result.hasPaymode; }
    }
    public int Paymode {
      get { return result.Paymode; }
      set { SetPaymode(value); }
    }
    public Builder SetPaymode(int value) {
      PrepareBuilder();
      result.hasPaymode = true;
      result.paymode_ = value;
      return this;
    }
    public Builder ClearPaymode() {
      PrepareBuilder();
      result.hasPaymode = false;
      result.paymode_ = 0;
      return this;
    }
    
    public bool HasOffical {
      get { return result.hasOffical; }
    }
    public int Offical {
      get { return result.Offical; }
      set { SetOffical(value); }
    }
    public Builder SetOffical(int value) {
      PrepareBuilder();
      result.hasOffical = true;
      result.offical_ = value;
      return this;
    }
    public Builder ClearOffical() {
      PrepareBuilder();
      result.hasOffical = false;
      result.offical_ = 0;
      return this;
    }
  }
  static CSPreCharge() {
    object.ReferenceEquals(global::ClientProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCPreCharge : pb::GeneratedMessage<SCPreCharge, SCPreCharge.Builder> {
  private SCPreCharge() { }
  private static readonly SCPreCharge defaultInstance = new SCPreCharge().MakeReadOnly();
  private static readonly string[] _sCPreChargeFieldNames = new string[] { "qrcode" };
  private static readonly uint[] _sCPreChargeFieldTags = new uint[] { 10 };
  public static SCPreCharge DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCPreCharge DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCPreCharge ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::ClientProtocol.internal__static_SCPreCharge__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCPreCharge, SCPreCharge.Builder> InternalFieldAccessors {
    get { return global::ClientProtocol.internal__static_SCPreCharge__FieldAccessorTable; }
  }
  
  public const int QrcodeFieldNumber = 1;
  private bool hasQrcode;
  private string qrcode_ = "";
  public bool HasQrcode {
    get { return hasQrcode; }
  }
  public string Qrcode {
    get { return qrcode_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasQrcode) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCPreChargeFieldNames;
    if (hasQrcode) {
      output.WriteString(1, field_names[0], Qrcode);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasQrcode) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Qrcode);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCPreCharge ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCPreCharge ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCPreCharge ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCPreCharge ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCPreCharge ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCPreCharge ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCPreCharge ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCPreCharge ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCPreCharge ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCPreCharge ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCPreCharge MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCPreCharge prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCPreCharge, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCPreCharge cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCPreCharge result;
    
    private SCPreCharge PrepareBuilder() {
      if (resultIsReadOnly) {
        SCPreCharge original = result;
        result = new SCPreCharge();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCPreCharge MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCPreCharge.Descriptor; }
    }
    
    public override SCPreCharge DefaultInstanceForType {
      get { return global::SCPreCharge.DefaultInstance; }
    }
    
    public override SCPreCharge BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCPreCharge) {
        return MergeFrom((SCPreCharge) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCPreCharge other) {
      if (other == global::SCPreCharge.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasQrcode) {
        Qrcode = other.Qrcode;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCPreChargeFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCPreChargeFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasQrcode = input.ReadString(ref result.qrcode_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasQrcode {
      get { return result.hasQrcode; }
    }
    public string Qrcode {
      get { return result.Qrcode; }
      set { SetQrcode(value); }
    }
    public Builder SetQrcode(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasQrcode = true;
      result.qrcode_ = value;
      return this;
    }
    public Builder ClearQrcode() {
      PrepareBuilder();
      result.hasQrcode = false;
      result.qrcode_ = "";
      return this;
    }
  }
  static SCPreCharge() {
    object.ReferenceEquals(global::ClientProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCToCharge : pb::GeneratedMessage<SCToCharge, SCToCharge.Builder> {
  private SCToCharge() { }
  private static readonly SCToCharge defaultInstance = new SCToCharge().MakeReadOnly();
  private static readonly string[] _sCToChargeFieldNames = new string[] { "balance", "cardnumber", "integal", "name", "recharge", "right" };
  private static readonly uint[] _sCToChargeFieldTags = new uint[] { 40, 18, 48, 10, 32, 26 };
  public static SCToCharge DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCToCharge DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCToCharge ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::ClientProtocol.internal__static_SCToCharge__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCToCharge, SCToCharge.Builder> InternalFieldAccessors {
    get { return global::ClientProtocol.internal__static_SCToCharge__FieldAccessorTable; }
  }
  
  public const int NameFieldNumber = 1;
  private bool hasName;
  private string name_ = "";
  public bool HasName {
    get { return hasName; }
  }
  public string Name {
    get { return name_; }
  }
  
  public const int CardnumberFieldNumber = 2;
  private bool hasCardnumber;
  private string cardnumber_ = "";
  public bool HasCardnumber {
    get { return hasCardnumber; }
  }
  public string Cardnumber {
    get { return cardnumber_; }
  }
  
  public const int RightFieldNumber = 3;
  private bool hasRight;
  private string right_ = "";
  public bool HasRight {
    get { return hasRight; }
  }
  public string Right {
    get { return right_; }
  }
  
  public const int RechargeFieldNumber = 4;
  private bool hasRecharge;
  private int recharge_;
  public bool HasRecharge {
    get { return hasRecharge; }
  }
  public int Recharge {
    get { return recharge_; }
  }
  
  public const int BalanceFieldNumber = 5;
  private bool hasBalance;
  private int balance_;
  public bool HasBalance {
    get { return hasBalance; }
  }
  public int Balance {
    get { return balance_; }
  }
  
  public const int IntegalFieldNumber = 6;
  private bool hasIntegal;
  private int integal_;
  public bool HasIntegal {
    get { return hasIntegal; }
  }
  public int Integal {
    get { return integal_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasName) return false;
      if (!hasCardnumber) return false;
      if (!hasRight) return false;
      if (!hasRecharge) return false;
      if (!hasBalance) return false;
      if (!hasIntegal) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCToChargeFieldNames;
    if (hasName) {
      output.WriteString(1, field_names[3], Name);
    }
    if (hasCardnumber) {
      output.WriteString(2, field_names[1], Cardnumber);
    }
    if (hasRight) {
      output.WriteString(3, field_names[5], Right);
    }
    if (hasRecharge) {
      output.WriteInt32(4, field_names[4], Recharge);
    }
    if (hasBalance) {
      output.WriteInt32(5, field_names[0], Balance);
    }
    if (hasIntegal) {
      output.WriteInt32(6, field_names[2], Integal);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasName) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Name);
    }
    if (hasCardnumber) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Cardnumber);
    }
    if (hasRight) {
      size += pb::CodedOutputStream.ComputeStringSize(3, Right);
    }
    if (hasRecharge) {
      size += pb::CodedOutputStream.ComputeInt32Size(4, Recharge);
    }
    if (hasBalance) {
      size += pb::CodedOutputStream.ComputeInt32Size(5, Balance);
    }
    if (hasIntegal) {
      size += pb::CodedOutputStream.ComputeInt32Size(6, Integal);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCToCharge ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCToCharge ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCToCharge ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCToCharge ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCToCharge ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCToCharge ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCToCharge ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCToCharge ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCToCharge ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCToCharge ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCToCharge MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCToCharge prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCToCharge, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCToCharge cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCToCharge result;
    
    private SCToCharge PrepareBuilder() {
      if (resultIsReadOnly) {
        SCToCharge original = result;
        result = new SCToCharge();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCToCharge MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCToCharge.Descriptor; }
    }
    
    public override SCToCharge DefaultInstanceForType {
      get { return global::SCToCharge.DefaultInstance; }
    }
    
    public override SCToCharge BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCToCharge) {
        return MergeFrom((SCToCharge) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCToCharge other) {
      if (other == global::SCToCharge.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasCardnumber) {
        Cardnumber = other.Cardnumber;
      }
      if (other.HasRight) {
        Right = other.Right;
      }
      if (other.HasRecharge) {
        Recharge = other.Recharge;
      }
      if (other.HasBalance) {
        Balance = other.Balance;
      }
      if (other.HasIntegal) {
        Integal = other.Integal;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCToChargeFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCToChargeFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasName = input.ReadString(ref result.name_);
            break;
          }
          case 18: {
            result.hasCardnumber = input.ReadString(ref result.cardnumber_);
            break;
          }
          case 26: {
            result.hasRight = input.ReadString(ref result.right_);
            break;
          }
          case 32: {
            result.hasRecharge = input.ReadInt32(ref result.recharge_);
            break;
          }
          case 40: {
            result.hasBalance = input.ReadInt32(ref result.balance_);
            break;
          }
          case 48: {
            result.hasIntegal = input.ReadInt32(ref result.integal_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasName {
      get { return result.hasName; }
    }
    public string Name {
      get { return result.Name; }
      set { SetName(value); }
    }
    public Builder SetName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasName = true;
      result.name_ = value;
      return this;
    }
    public Builder ClearName() {
      PrepareBuilder();
      result.hasName = false;
      result.name_ = "";
      return this;
    }
    
    public bool HasCardnumber {
      get { return result.hasCardnumber; }
    }
    public string Cardnumber {
      get { return result.Cardnumber; }
      set { SetCardnumber(value); }
    }
    public Builder SetCardnumber(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCardnumber = true;
      result.cardnumber_ = value;
      return this;
    }
    public Builder ClearCardnumber() {
      PrepareBuilder();
      result.hasCardnumber = false;
      result.cardnumber_ = "";
      return this;
    }
    
    public bool HasRight {
      get { return result.hasRight; }
    }
    public string Right {
      get { return result.Right; }
      set { SetRight(value); }
    }
    public Builder SetRight(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasRight = true;
      result.right_ = value;
      return this;
    }
    public Builder ClearRight() {
      PrepareBuilder();
      result.hasRight = false;
      result.right_ = "";
      return this;
    }
    
    public bool HasRecharge {
      get { return result.hasRecharge; }
    }
    public int Recharge {
      get { return result.Recharge; }
      set { SetRecharge(value); }
    }
    public Builder SetRecharge(int value) {
      PrepareBuilder();
      result.hasRecharge = true;
      result.recharge_ = value;
      return this;
    }
    public Builder ClearRecharge() {
      PrepareBuilder();
      result.hasRecharge = false;
      result.recharge_ = 0;
      return this;
    }
    
    public bool HasBalance {
      get { return result.hasBalance; }
    }
    public int Balance {
      get { return result.Balance; }
      set { SetBalance(value); }
    }
    public Builder SetBalance(int value) {
      PrepareBuilder();
      result.hasBalance = true;
      result.balance_ = value;
      return this;
    }
    public Builder ClearBalance() {
      PrepareBuilder();
      result.hasBalance = false;
      result.balance_ = 0;
      return this;
    }
    
    public bool HasIntegal {
      get { return result.hasIntegal; }
    }
    public int Integal {
      get { return result.Integal; }
      set { SetIntegal(value); }
    }
    public Builder SetIntegal(int value) {
      PrepareBuilder();
      result.hasIntegal = true;
      result.integal_ = value;
      return this;
    }
    public Builder ClearIntegal() {
      PrepareBuilder();
      result.hasIntegal = false;
      result.integal_ = 0;
      return this;
    }
  }
  static SCToCharge() {
    object.ReferenceEquals(global::ClientProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSGoodsFind : pb::GeneratedMessage<CSGoodsFind, CSGoodsFind.Builder> {
  private CSGoodsFind() { }
  private static readonly CSGoodsFind defaultInstance = new CSGoodsFind().MakeReadOnly();
  private static readonly string[] _cSGoodsFindFieldNames = new string[] { "category", "keywords", "page" };
  private static readonly uint[] _cSGoodsFindFieldTags = new uint[] { 16, 34, 10 };
  public static CSGoodsFind DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSGoodsFind DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSGoodsFind ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::ClientProtocol.internal__static_CSGoodsFind__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSGoodsFind, CSGoodsFind.Builder> InternalFieldAccessors {
    get { return global::ClientProtocol.internal__static_CSGoodsFind__FieldAccessorTable; }
  }
  
  public const int PageFieldNumber = 1;
  private bool hasPage;
  private global::StructPage page_;
  public bool HasPage {
    get { return hasPage; }
  }
  public global::StructPage Page {
    get { return page_ ?? global::StructPage.DefaultInstance; }
  }
  
  public const int CategoryFieldNumber = 2;
  private bool hasCategory;
  private int category_;
  public bool HasCategory {
    get { return hasCategory; }
  }
  public int Category {
    get { return category_; }
  }
  
  public const int KeywordsFieldNumber = 4;
  private bool hasKeywords;
  private string keywords_ = "";
  public bool HasKeywords {
    get { return hasKeywords; }
  }
  public string Keywords {
    get { return keywords_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasPage) return false;
      if (!Page.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSGoodsFindFieldNames;
    if (hasPage) {
      output.WriteMessage(1, field_names[2], Page);
    }
    if (hasCategory) {
      output.WriteInt32(2, field_names[0], Category);
    }
    if (hasKeywords) {
      output.WriteString(4, field_names[1], Keywords);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPage) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Page);
    }
    if (hasCategory) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Category);
    }
    if (hasKeywords) {
      size += pb::CodedOutputStream.ComputeStringSize(4, Keywords);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSGoodsFind ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSGoodsFind ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSGoodsFind ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSGoodsFind ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSGoodsFind ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSGoodsFind ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSGoodsFind ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSGoodsFind ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSGoodsFind ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSGoodsFind ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSGoodsFind MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSGoodsFind prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSGoodsFind, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSGoodsFind cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSGoodsFind result;
    
    private CSGoodsFind PrepareBuilder() {
      if (resultIsReadOnly) {
        CSGoodsFind original = result;
        result = new CSGoodsFind();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSGoodsFind MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSGoodsFind.Descriptor; }
    }
    
    public override CSGoodsFind DefaultInstanceForType {
      get { return global::CSGoodsFind.DefaultInstance; }
    }
    
    public override CSGoodsFind BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSGoodsFind) {
        return MergeFrom((CSGoodsFind) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSGoodsFind other) {
      if (other == global::CSGoodsFind.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPage) {
        MergePage(other.Page);
      }
      if (other.HasCategory) {
        Category = other.Category;
      }
      if (other.HasKeywords) {
        Keywords = other.Keywords;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSGoodsFindFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSGoodsFindFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::StructPage.Builder subBuilder = global::StructPage.CreateBuilder();
            if (result.hasPage) {
              subBuilder.MergeFrom(Page);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Page = subBuilder.BuildPartial();
            break;
          }
          case 16: {
            result.hasCategory = input.ReadInt32(ref result.category_);
            break;
          }
          case 34: {
            result.hasKeywords = input.ReadString(ref result.keywords_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPage {
     get { return result.hasPage; }
    }
    public global::StructPage Page {
      get { return result.Page; }
      set { SetPage(value); }
    }
    public Builder SetPage(global::StructPage value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPage = true;
      result.page_ = value;
      return this;
    }
    public Builder SetPage(global::StructPage.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasPage = true;
      result.page_ = builderForValue.Build();
      return this;
    }
    public Builder MergePage(global::StructPage value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasPage &&
          result.page_ != global::StructPage.DefaultInstance) {
          result.page_ = global::StructPage.CreateBuilder(result.page_).MergeFrom(value).BuildPartial();
      } else {
        result.page_ = value;
      }
      result.hasPage = true;
      return this;
    }
    public Builder ClearPage() {
      PrepareBuilder();
      result.hasPage = false;
      result.page_ = null;
      return this;
    }
    
    public bool HasCategory {
      get { return result.hasCategory; }
    }
    public int Category {
      get { return result.Category; }
      set { SetCategory(value); }
    }
    public Builder SetCategory(int value) {
      PrepareBuilder();
      result.hasCategory = true;
      result.category_ = value;
      return this;
    }
    public Builder ClearCategory() {
      PrepareBuilder();
      result.hasCategory = false;
      result.category_ = 0;
      return this;
    }
    
    public bool HasKeywords {
      get { return result.hasKeywords; }
    }
    public string Keywords {
      get { return result.Keywords; }
      set { SetKeywords(value); }
    }
    public Builder SetKeywords(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasKeywords = true;
      result.keywords_ = value;
      return this;
    }
    public Builder ClearKeywords() {
      PrepareBuilder();
      result.hasKeywords = false;
      result.keywords_ = "";
      return this;
    }
  }
  static CSGoodsFind() {
    object.ReferenceEquals(global::ClientProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCGoodsFind : pb::GeneratedMessage<SCGoodsFind, SCGoodsFind.Builder> {
  private SCGoodsFind() { }
  private static readonly SCGoodsFind defaultInstance = new SCGoodsFind().MakeReadOnly();
  private static readonly string[] _sCGoodsFindFieldNames = new string[] { "goods" };
  private static readonly uint[] _sCGoodsFindFieldTags = new uint[] { 10 };
  public static SCGoodsFind DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCGoodsFind DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCGoodsFind ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::ClientProtocol.internal__static_SCGoodsFind__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCGoodsFind, SCGoodsFind.Builder> InternalFieldAccessors {
    get { return global::ClientProtocol.internal__static_SCGoodsFind__FieldAccessorTable; }
  }
  
  public const int GoodsFieldNumber = 1;
  private pbc::PopsicleList<global::StructGoods> goods_ = new pbc::PopsicleList<global::StructGoods>();
  public scg::IList<global::StructGoods> GoodsList {
    get { return goods_; }
  }
  public int GoodsCount {
    get { return goods_.Count; }
  }
  public global::StructGoods GetGoods(int index) {
    return goods_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::StructGoods element in GoodsList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCGoodsFindFieldNames;
    if (goods_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], goods_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::StructGoods element in GoodsList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCGoodsFind ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCGoodsFind ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCGoodsFind ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCGoodsFind ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCGoodsFind ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCGoodsFind ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCGoodsFind ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCGoodsFind ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCGoodsFind ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCGoodsFind ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCGoodsFind MakeReadOnly() {
    goods_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCGoodsFind prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCGoodsFind, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCGoodsFind cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCGoodsFind result;
    
    private SCGoodsFind PrepareBuilder() {
      if (resultIsReadOnly) {
        SCGoodsFind original = result;
        result = new SCGoodsFind();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCGoodsFind MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCGoodsFind.Descriptor; }
    }
    
    public override SCGoodsFind DefaultInstanceForType {
      get { return global::SCGoodsFind.DefaultInstance; }
    }
    
    public override SCGoodsFind BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCGoodsFind) {
        return MergeFrom((SCGoodsFind) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCGoodsFind other) {
      if (other == global::SCGoodsFind.DefaultInstance) return this;
      PrepareBuilder();
      if (other.goods_.Count != 0) {
        result.goods_.Add(other.goods_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCGoodsFindFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCGoodsFindFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.goods_, global::StructGoods.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::StructGoods> GoodsList {
      get { return PrepareBuilder().goods_; }
    }
    public int GoodsCount {
      get { return result.GoodsCount; }
    }
    public global::StructGoods GetGoods(int index) {
      return result.GetGoods(index);
    }
    public Builder SetGoods(int index, global::StructGoods value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.goods_[index] = value;
      return this;
    }
    public Builder SetGoods(int index, global::StructGoods.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.goods_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddGoods(global::StructGoods value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.goods_.Add(value);
      return this;
    }
    public Builder AddGoods(global::StructGoods.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.goods_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeGoods(scg::IEnumerable<global::StructGoods> values) {
      PrepareBuilder();
      result.goods_.Add(values);
      return this;
    }
    public Builder ClearGoods() {
      PrepareBuilder();
      result.goods_.Clear();
      return this;
    }
  }
  static SCGoodsFind() {
    object.ReferenceEquals(global::ClientProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSCartAdd : pb::GeneratedMessage<CSCartAdd, CSCartAdd.Builder> {
  private CSCartAdd() { }
  private static readonly CSCartAdd defaultInstance = new CSCartAdd().MakeReadOnly();
  private static readonly string[] _cSCartAddFieldNames = new string[] { "goodsid", "goodsnum" };
  private static readonly uint[] _cSCartAddFieldTags = new uint[] { 8, 16 };
  public static CSCartAdd DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSCartAdd DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSCartAdd ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::ClientProtocol.internal__static_CSCartAdd__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSCartAdd, CSCartAdd.Builder> InternalFieldAccessors {
    get { return global::ClientProtocol.internal__static_CSCartAdd__FieldAccessorTable; }
  }
  
  public const int GoodsidFieldNumber = 1;
  private bool hasGoodsid;
  private int goodsid_;
  public bool HasGoodsid {
    get { return hasGoodsid; }
  }
  public int Goodsid {
    get { return goodsid_; }
  }
  
  public const int GoodsnumFieldNumber = 2;
  private bool hasGoodsnum;
  private int goodsnum_;
  public bool HasGoodsnum {
    get { return hasGoodsnum; }
  }
  public int Goodsnum {
    get { return goodsnum_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasGoodsid) return false;
      if (!hasGoodsnum) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSCartAddFieldNames;
    if (hasGoodsid) {
      output.WriteInt32(1, field_names[0], Goodsid);
    }
    if (hasGoodsnum) {
      output.WriteInt32(2, field_names[1], Goodsnum);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasGoodsid) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Goodsid);
    }
    if (hasGoodsnum) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Goodsnum);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSCartAdd ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSCartAdd ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSCartAdd ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSCartAdd ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSCartAdd ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSCartAdd ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSCartAdd ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSCartAdd ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSCartAdd ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSCartAdd ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSCartAdd MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSCartAdd prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSCartAdd, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSCartAdd cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSCartAdd result;
    
    private CSCartAdd PrepareBuilder() {
      if (resultIsReadOnly) {
        CSCartAdd original = result;
        result = new CSCartAdd();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSCartAdd MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSCartAdd.Descriptor; }
    }
    
    public override CSCartAdd DefaultInstanceForType {
      get { return global::CSCartAdd.DefaultInstance; }
    }
    
    public override CSCartAdd BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSCartAdd) {
        return MergeFrom((CSCartAdd) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSCartAdd other) {
      if (other == global::CSCartAdd.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasGoodsid) {
        Goodsid = other.Goodsid;
      }
      if (other.HasGoodsnum) {
        Goodsnum = other.Goodsnum;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSCartAddFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSCartAddFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasGoodsid = input.ReadInt32(ref result.goodsid_);
            break;
          }
          case 16: {
            result.hasGoodsnum = input.ReadInt32(ref result.goodsnum_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasGoodsid {
      get { return result.hasGoodsid; }
    }
    public int Goodsid {
      get { return result.Goodsid; }
      set { SetGoodsid(value); }
    }
    public Builder SetGoodsid(int value) {
      PrepareBuilder();
      result.hasGoodsid = true;
      result.goodsid_ = value;
      return this;
    }
    public Builder ClearGoodsid() {
      PrepareBuilder();
      result.hasGoodsid = false;
      result.goodsid_ = 0;
      return this;
    }
    
    public bool HasGoodsnum {
      get { return result.hasGoodsnum; }
    }
    public int Goodsnum {
      get { return result.Goodsnum; }
      set { SetGoodsnum(value); }
    }
    public Builder SetGoodsnum(int value) {
      PrepareBuilder();
      result.hasGoodsnum = true;
      result.goodsnum_ = value;
      return this;
    }
    public Builder ClearGoodsnum() {
      PrepareBuilder();
      result.hasGoodsnum = false;
      result.goodsnum_ = 0;
      return this;
    }
  }
  static CSCartAdd() {
    object.ReferenceEquals(global::ClientProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSCartDel : pb::GeneratedMessage<CSCartDel, CSCartDel.Builder> {
  private CSCartDel() { }
  private static readonly CSCartDel defaultInstance = new CSCartDel().MakeReadOnly();
  private static readonly string[] _cSCartDelFieldNames = new string[] { "goodsid", "goodsnum" };
  private static readonly uint[] _cSCartDelFieldTags = new uint[] { 8, 16 };
  public static CSCartDel DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSCartDel DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSCartDel ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::ClientProtocol.internal__static_CSCartDel__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSCartDel, CSCartDel.Builder> InternalFieldAccessors {
    get { return global::ClientProtocol.internal__static_CSCartDel__FieldAccessorTable; }
  }
  
  public const int GoodsidFieldNumber = 1;
  private bool hasGoodsid;
  private int goodsid_;
  public bool HasGoodsid {
    get { return hasGoodsid; }
  }
  public int Goodsid {
    get { return goodsid_; }
  }
  
  public const int GoodsnumFieldNumber = 2;
  private bool hasGoodsnum;
  private int goodsnum_;
  public bool HasGoodsnum {
    get { return hasGoodsnum; }
  }
  public int Goodsnum {
    get { return goodsnum_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasGoodsid) return false;
      if (!hasGoodsnum) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSCartDelFieldNames;
    if (hasGoodsid) {
      output.WriteInt32(1, field_names[0], Goodsid);
    }
    if (hasGoodsnum) {
      output.WriteInt32(2, field_names[1], Goodsnum);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasGoodsid) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Goodsid);
    }
    if (hasGoodsnum) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Goodsnum);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSCartDel ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSCartDel ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSCartDel ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSCartDel ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSCartDel ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSCartDel ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSCartDel ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSCartDel ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSCartDel ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSCartDel ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSCartDel MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSCartDel prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSCartDel, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSCartDel cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSCartDel result;
    
    private CSCartDel PrepareBuilder() {
      if (resultIsReadOnly) {
        CSCartDel original = result;
        result = new CSCartDel();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSCartDel MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSCartDel.Descriptor; }
    }
    
    public override CSCartDel DefaultInstanceForType {
      get { return global::CSCartDel.DefaultInstance; }
    }
    
    public override CSCartDel BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSCartDel) {
        return MergeFrom((CSCartDel) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSCartDel other) {
      if (other == global::CSCartDel.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasGoodsid) {
        Goodsid = other.Goodsid;
      }
      if (other.HasGoodsnum) {
        Goodsnum = other.Goodsnum;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSCartDelFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSCartDelFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasGoodsid = input.ReadInt32(ref result.goodsid_);
            break;
          }
          case 16: {
            result.hasGoodsnum = input.ReadInt32(ref result.goodsnum_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasGoodsid {
      get { return result.hasGoodsid; }
    }
    public int Goodsid {
      get { return result.Goodsid; }
      set { SetGoodsid(value); }
    }
    public Builder SetGoodsid(int value) {
      PrepareBuilder();
      result.hasGoodsid = true;
      result.goodsid_ = value;
      return this;
    }
    public Builder ClearGoodsid() {
      PrepareBuilder();
      result.hasGoodsid = false;
      result.goodsid_ = 0;
      return this;
    }
    
    public bool HasGoodsnum {
      get { return result.hasGoodsnum; }
    }
    public int Goodsnum {
      get { return result.Goodsnum; }
      set { SetGoodsnum(value); }
    }
    public Builder SetGoodsnum(int value) {
      PrepareBuilder();
      result.hasGoodsnum = true;
      result.goodsnum_ = value;
      return this;
    }
    public Builder ClearGoodsnum() {
      PrepareBuilder();
      result.hasGoodsnum = false;
      result.goodsnum_ = 0;
      return this;
    }
  }
  static CSCartDel() {
    object.ReferenceEquals(global::ClientProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSPreBuy : pb::GeneratedMessage<CSPreBuy, CSPreBuy.Builder> {
  private CSPreBuy() { }
  private static readonly CSPreBuy defaultInstance = new CSPreBuy().MakeReadOnly();
  private static readonly string[] _cSPreBuyFieldNames = new string[] { "cardnumber", "goodsid", "goodsnum" };
  private static readonly uint[] _cSPreBuyFieldTags = new uint[] { 10, 16, 24 };
  public static CSPreBuy DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSPreBuy DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSPreBuy ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::ClientProtocol.internal__static_CSPreBuy__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSPreBuy, CSPreBuy.Builder> InternalFieldAccessors {
    get { return global::ClientProtocol.internal__static_CSPreBuy__FieldAccessorTable; }
  }
  
  public const int CardnumberFieldNumber = 1;
  private bool hasCardnumber;
  private string cardnumber_ = "";
  public bool HasCardnumber {
    get { return hasCardnumber; }
  }
  public string Cardnumber {
    get { return cardnumber_; }
  }
  
  public const int GoodsidFieldNumber = 2;
  private bool hasGoodsid;
  private int goodsid_;
  public bool HasGoodsid {
    get { return hasGoodsid; }
  }
  public int Goodsid {
    get { return goodsid_; }
  }
  
  public const int GoodsnumFieldNumber = 3;
  private bool hasGoodsnum;
  private int goodsnum_;
  public bool HasGoodsnum {
    get { return hasGoodsnum; }
  }
  public int Goodsnum {
    get { return goodsnum_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasCardnumber) return false;
      if (!hasGoodsid) return false;
      if (!hasGoodsnum) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSPreBuyFieldNames;
    if (hasCardnumber) {
      output.WriteString(1, field_names[0], Cardnumber);
    }
    if (hasGoodsid) {
      output.WriteInt32(2, field_names[1], Goodsid);
    }
    if (hasGoodsnum) {
      output.WriteInt32(3, field_names[2], Goodsnum);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasCardnumber) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Cardnumber);
    }
    if (hasGoodsid) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Goodsid);
    }
    if (hasGoodsnum) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, Goodsnum);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSPreBuy ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSPreBuy ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSPreBuy ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSPreBuy ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSPreBuy ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSPreBuy ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSPreBuy ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSPreBuy ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSPreBuy ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSPreBuy ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSPreBuy MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSPreBuy prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSPreBuy, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSPreBuy cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSPreBuy result;
    
    private CSPreBuy PrepareBuilder() {
      if (resultIsReadOnly) {
        CSPreBuy original = result;
        result = new CSPreBuy();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSPreBuy MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSPreBuy.Descriptor; }
    }
    
    public override CSPreBuy DefaultInstanceForType {
      get { return global::CSPreBuy.DefaultInstance; }
    }
    
    public override CSPreBuy BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSPreBuy) {
        return MergeFrom((CSPreBuy) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSPreBuy other) {
      if (other == global::CSPreBuy.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasCardnumber) {
        Cardnumber = other.Cardnumber;
      }
      if (other.HasGoodsid) {
        Goodsid = other.Goodsid;
      }
      if (other.HasGoodsnum) {
        Goodsnum = other.Goodsnum;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSPreBuyFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSPreBuyFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasCardnumber = input.ReadString(ref result.cardnumber_);
            break;
          }
          case 16: {
            result.hasGoodsid = input.ReadInt32(ref result.goodsid_);
            break;
          }
          case 24: {
            result.hasGoodsnum = input.ReadInt32(ref result.goodsnum_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasCardnumber {
      get { return result.hasCardnumber; }
    }
    public string Cardnumber {
      get { return result.Cardnumber; }
      set { SetCardnumber(value); }
    }
    public Builder SetCardnumber(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCardnumber = true;
      result.cardnumber_ = value;
      return this;
    }
    public Builder ClearCardnumber() {
      PrepareBuilder();
      result.hasCardnumber = false;
      result.cardnumber_ = "";
      return this;
    }
    
    public bool HasGoodsid {
      get { return result.hasGoodsid; }
    }
    public int Goodsid {
      get { return result.Goodsid; }
      set { SetGoodsid(value); }
    }
    public Builder SetGoodsid(int value) {
      PrepareBuilder();
      result.hasGoodsid = true;
      result.goodsid_ = value;
      return this;
    }
    public Builder ClearGoodsid() {
      PrepareBuilder();
      result.hasGoodsid = false;
      result.goodsid_ = 0;
      return this;
    }
    
    public bool HasGoodsnum {
      get { return result.hasGoodsnum; }
    }
    public int Goodsnum {
      get { return result.Goodsnum; }
      set { SetGoodsnum(value); }
    }
    public Builder SetGoodsnum(int value) {
      PrepareBuilder();
      result.hasGoodsnum = true;
      result.goodsnum_ = value;
      return this;
    }
    public Builder ClearGoodsnum() {
      PrepareBuilder();
      result.hasGoodsnum = false;
      result.goodsnum_ = 0;
      return this;
    }
  }
  static CSPreBuy() {
    object.ReferenceEquals(global::ClientProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCPreBuy : pb::GeneratedMessage<SCPreBuy, SCPreBuy.Builder> {
  private SCPreBuy() { }
  private static readonly SCPreBuy defaultInstance = new SCPreBuy().MakeReadOnly();
  private static readonly string[] _sCPreBuyFieldNames = new string[] { "qrcode" };
  private static readonly uint[] _sCPreBuyFieldTags = new uint[] { 10 };
  public static SCPreBuy DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCPreBuy DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCPreBuy ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::ClientProtocol.internal__static_SCPreBuy__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCPreBuy, SCPreBuy.Builder> InternalFieldAccessors {
    get { return global::ClientProtocol.internal__static_SCPreBuy__FieldAccessorTable; }
  }
  
  public const int QrcodeFieldNumber = 1;
  private bool hasQrcode;
  private string qrcode_ = "";
  public bool HasQrcode {
    get { return hasQrcode; }
  }
  public string Qrcode {
    get { return qrcode_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasQrcode) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCPreBuyFieldNames;
    if (hasQrcode) {
      output.WriteString(1, field_names[0], Qrcode);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasQrcode) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Qrcode);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCPreBuy ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCPreBuy ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCPreBuy ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCPreBuy ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCPreBuy ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCPreBuy ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCPreBuy ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCPreBuy ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCPreBuy ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCPreBuy ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCPreBuy MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCPreBuy prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCPreBuy, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCPreBuy cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCPreBuy result;
    
    private SCPreBuy PrepareBuilder() {
      if (resultIsReadOnly) {
        SCPreBuy original = result;
        result = new SCPreBuy();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCPreBuy MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCPreBuy.Descriptor; }
    }
    
    public override SCPreBuy DefaultInstanceForType {
      get { return global::SCPreBuy.DefaultInstance; }
    }
    
    public override SCPreBuy BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCPreBuy) {
        return MergeFrom((SCPreBuy) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCPreBuy other) {
      if (other == global::SCPreBuy.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasQrcode) {
        Qrcode = other.Qrcode;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCPreBuyFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCPreBuyFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasQrcode = input.ReadString(ref result.qrcode_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasQrcode {
      get { return result.hasQrcode; }
    }
    public string Qrcode {
      get { return result.Qrcode; }
      set { SetQrcode(value); }
    }
    public Builder SetQrcode(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasQrcode = true;
      result.qrcode_ = value;
      return this;
    }
    public Builder ClearQrcode() {
      PrepareBuilder();
      result.hasQrcode = false;
      result.qrcode_ = "";
      return this;
    }
  }
  static SCPreBuy() {
    object.ReferenceEquals(global::ClientProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCToBuy : pb::GeneratedMessage<SCToBuy, SCToBuy.Builder> {
  private SCToBuy() { }
  private static readonly SCToBuy defaultInstance = new SCToBuy().MakeReadOnly();
  private static readonly string[] _sCToBuyFieldNames = new string[] { "balance", "cardnumber", "integal", "name", "right", "usedintegal", "usedmoney" };
  private static readonly uint[] _sCToBuyFieldTags = new uint[] { 48, 18, 56, 10, 26, 40, 32 };
  public static SCToBuy DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCToBuy DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCToBuy ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::ClientProtocol.internal__static_SCToBuy__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCToBuy, SCToBuy.Builder> InternalFieldAccessors {
    get { return global::ClientProtocol.internal__static_SCToBuy__FieldAccessorTable; }
  }
  
  public const int NameFieldNumber = 1;
  private bool hasName;
  private string name_ = "";
  public bool HasName {
    get { return hasName; }
  }
  public string Name {
    get { return name_; }
  }
  
  public const int CardnumberFieldNumber = 2;
  private bool hasCardnumber;
  private string cardnumber_ = "";
  public bool HasCardnumber {
    get { return hasCardnumber; }
  }
  public string Cardnumber {
    get { return cardnumber_; }
  }
  
  public const int RightFieldNumber = 3;
  private bool hasRight;
  private string right_ = "";
  public bool HasRight {
    get { return hasRight; }
  }
  public string Right {
    get { return right_; }
  }
  
  public const int UsedmoneyFieldNumber = 4;
  private bool hasUsedmoney;
  private int usedmoney_;
  public bool HasUsedmoney {
    get { return hasUsedmoney; }
  }
  public int Usedmoney {
    get { return usedmoney_; }
  }
  
  public const int UsedintegalFieldNumber = 5;
  private bool hasUsedintegal;
  private int usedintegal_;
  public bool HasUsedintegal {
    get { return hasUsedintegal; }
  }
  public int Usedintegal {
    get { return usedintegal_; }
  }
  
  public const int BalanceFieldNumber = 6;
  private bool hasBalance;
  private int balance_;
  public bool HasBalance {
    get { return hasBalance; }
  }
  public int Balance {
    get { return balance_; }
  }
  
  public const int IntegalFieldNumber = 7;
  private bool hasIntegal;
  private int integal_;
  public bool HasIntegal {
    get { return hasIntegal; }
  }
  public int Integal {
    get { return integal_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasName) return false;
      if (!hasCardnumber) return false;
      if (!hasRight) return false;
      if (!hasUsedmoney) return false;
      if (!hasUsedintegal) return false;
      if (!hasBalance) return false;
      if (!hasIntegal) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCToBuyFieldNames;
    if (hasName) {
      output.WriteString(1, field_names[3], Name);
    }
    if (hasCardnumber) {
      output.WriteString(2, field_names[1], Cardnumber);
    }
    if (hasRight) {
      output.WriteString(3, field_names[4], Right);
    }
    if (hasUsedmoney) {
      output.WriteInt32(4, field_names[6], Usedmoney);
    }
    if (hasUsedintegal) {
      output.WriteInt32(5, field_names[5], Usedintegal);
    }
    if (hasBalance) {
      output.WriteInt32(6, field_names[0], Balance);
    }
    if (hasIntegal) {
      output.WriteInt32(7, field_names[2], Integal);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasName) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Name);
    }
    if (hasCardnumber) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Cardnumber);
    }
    if (hasRight) {
      size += pb::CodedOutputStream.ComputeStringSize(3, Right);
    }
    if (hasUsedmoney) {
      size += pb::CodedOutputStream.ComputeInt32Size(4, Usedmoney);
    }
    if (hasUsedintegal) {
      size += pb::CodedOutputStream.ComputeInt32Size(5, Usedintegal);
    }
    if (hasBalance) {
      size += pb::CodedOutputStream.ComputeInt32Size(6, Balance);
    }
    if (hasIntegal) {
      size += pb::CodedOutputStream.ComputeInt32Size(7, Integal);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCToBuy ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCToBuy ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCToBuy ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCToBuy ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCToBuy ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCToBuy ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCToBuy ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCToBuy ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCToBuy ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCToBuy ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCToBuy MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCToBuy prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCToBuy, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCToBuy cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCToBuy result;
    
    private SCToBuy PrepareBuilder() {
      if (resultIsReadOnly) {
        SCToBuy original = result;
        result = new SCToBuy();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCToBuy MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCToBuy.Descriptor; }
    }
    
    public override SCToBuy DefaultInstanceForType {
      get { return global::SCToBuy.DefaultInstance; }
    }
    
    public override SCToBuy BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCToBuy) {
        return MergeFrom((SCToBuy) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCToBuy other) {
      if (other == global::SCToBuy.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasCardnumber) {
        Cardnumber = other.Cardnumber;
      }
      if (other.HasRight) {
        Right = other.Right;
      }
      if (other.HasUsedmoney) {
        Usedmoney = other.Usedmoney;
      }
      if (other.HasUsedintegal) {
        Usedintegal = other.Usedintegal;
      }
      if (other.HasBalance) {
        Balance = other.Balance;
      }
      if (other.HasIntegal) {
        Integal = other.Integal;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCToBuyFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCToBuyFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasName = input.ReadString(ref result.name_);
            break;
          }
          case 18: {
            result.hasCardnumber = input.ReadString(ref result.cardnumber_);
            break;
          }
          case 26: {
            result.hasRight = input.ReadString(ref result.right_);
            break;
          }
          case 32: {
            result.hasUsedmoney = input.ReadInt32(ref result.usedmoney_);
            break;
          }
          case 40: {
            result.hasUsedintegal = input.ReadInt32(ref result.usedintegal_);
            break;
          }
          case 48: {
            result.hasBalance = input.ReadInt32(ref result.balance_);
            break;
          }
          case 56: {
            result.hasIntegal = input.ReadInt32(ref result.integal_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasName {
      get { return result.hasName; }
    }
    public string Name {
      get { return result.Name; }
      set { SetName(value); }
    }
    public Builder SetName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasName = true;
      result.name_ = value;
      return this;
    }
    public Builder ClearName() {
      PrepareBuilder();
      result.hasName = false;
      result.name_ = "";
      return this;
    }
    
    public bool HasCardnumber {
      get { return result.hasCardnumber; }
    }
    public string Cardnumber {
      get { return result.Cardnumber; }
      set { SetCardnumber(value); }
    }
    public Builder SetCardnumber(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCardnumber = true;
      result.cardnumber_ = value;
      return this;
    }
    public Builder ClearCardnumber() {
      PrepareBuilder();
      result.hasCardnumber = false;
      result.cardnumber_ = "";
      return this;
    }
    
    public bool HasRight {
      get { return result.hasRight; }
    }
    public string Right {
      get { return result.Right; }
      set { SetRight(value); }
    }
    public Builder SetRight(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasRight = true;
      result.right_ = value;
      return this;
    }
    public Builder ClearRight() {
      PrepareBuilder();
      result.hasRight = false;
      result.right_ = "";
      return this;
    }
    
    public bool HasUsedmoney {
      get { return result.hasUsedmoney; }
    }
    public int Usedmoney {
      get { return result.Usedmoney; }
      set { SetUsedmoney(value); }
    }
    public Builder SetUsedmoney(int value) {
      PrepareBuilder();
      result.hasUsedmoney = true;
      result.usedmoney_ = value;
      return this;
    }
    public Builder ClearUsedmoney() {
      PrepareBuilder();
      result.hasUsedmoney = false;
      result.usedmoney_ = 0;
      return this;
    }
    
    public bool HasUsedintegal {
      get { return result.hasUsedintegal; }
    }
    public int Usedintegal {
      get { return result.Usedintegal; }
      set { SetUsedintegal(value); }
    }
    public Builder SetUsedintegal(int value) {
      PrepareBuilder();
      result.hasUsedintegal = true;
      result.usedintegal_ = value;
      return this;
    }
    public Builder ClearUsedintegal() {
      PrepareBuilder();
      result.hasUsedintegal = false;
      result.usedintegal_ = 0;
      return this;
    }
    
    public bool HasBalance {
      get { return result.hasBalance; }
    }
    public int Balance {
      get { return result.Balance; }
      set { SetBalance(value); }
    }
    public Builder SetBalance(int value) {
      PrepareBuilder();
      result.hasBalance = true;
      result.balance_ = value;
      return this;
    }
    public Builder ClearBalance() {
      PrepareBuilder();
      result.hasBalance = false;
      result.balance_ = 0;
      return this;
    }
    
    public bool HasIntegal {
      get { return result.hasIntegal; }
    }
    public int Integal {
      get { return result.Integal; }
      set { SetIntegal(value); }
    }
    public Builder SetIntegal(int value) {
      PrepareBuilder();
      result.hasIntegal = true;
      result.integal_ = value;
      return this;
    }
    public Builder ClearIntegal() {
      PrepareBuilder();
      result.hasIntegal = false;
      result.integal_ = 0;
      return this;
    }
  }
  static SCToBuy() {
    object.ReferenceEquals(global::ClientProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCSysMessage : pb::GeneratedMessage<SCSysMessage, SCSysMessage.Builder> {
  private SCSysMessage() { }
  private static readonly SCSysMessage defaultInstance = new SCSysMessage().MakeReadOnly();
  private static readonly string[] _sCSysMessageFieldNames = new string[] { "cmd", "params" };
  private static readonly uint[] _sCSysMessageFieldTags = new uint[] { 8, 18 };
  public static SCSysMessage DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCSysMessage DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCSysMessage ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::ClientProtocol.internal__static_SCSysMessage__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCSysMessage, SCSysMessage.Builder> InternalFieldAccessors {
    get { return global::ClientProtocol.internal__static_SCSysMessage__FieldAccessorTable; }
  }
  
  public const int CmdFieldNumber = 1;
  private bool hasCmd;
  private int cmd_;
  public bool HasCmd {
    get { return hasCmd; }
  }
  public int Cmd {
    get { return cmd_; }
  }
  
  public const int ParamsFieldNumber = 2;
  private pbc::PopsicleList<string> params_ = new pbc::PopsicleList<string>();
  public scg::IList<string> ParamsList {
    get { return pbc::Lists.AsReadOnly(params_); }
  }
  public int ParamsCount {
    get { return params_.Count; }
  }
  public string GetParams(int index) {
    return params_[index];
  }
  
  public override bool IsInitialized {
    get {
      if (!hasCmd) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCSysMessageFieldNames;
    if (hasCmd) {
      output.WriteInt32(1, field_names[0], Cmd);
    }
    if (params_.Count > 0) {
      output.WriteStringArray(2, field_names[1], params_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasCmd) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Cmd);
    }
    {
      int dataSize = 0;
      foreach (string element in ParamsList) {
        dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
      }
      size += dataSize;
      size += 1 * params_.Count;
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCSysMessage ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCSysMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCSysMessage ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCSysMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCSysMessage ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCSysMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCSysMessage ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCSysMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCSysMessage ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCSysMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCSysMessage MakeReadOnly() {
    params_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCSysMessage prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCSysMessage, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCSysMessage cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCSysMessage result;
    
    private SCSysMessage PrepareBuilder() {
      if (resultIsReadOnly) {
        SCSysMessage original = result;
        result = new SCSysMessage();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCSysMessage MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCSysMessage.Descriptor; }
    }
    
    public override SCSysMessage DefaultInstanceForType {
      get { return global::SCSysMessage.DefaultInstance; }
    }
    
    public override SCSysMessage BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCSysMessage) {
        return MergeFrom((SCSysMessage) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCSysMessage other) {
      if (other == global::SCSysMessage.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasCmd) {
        Cmd = other.Cmd;
      }
      if (other.params_.Count != 0) {
        result.params_.Add(other.params_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCSysMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCSysMessageFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasCmd = input.ReadInt32(ref result.cmd_);
            break;
          }
          case 18: {
            input.ReadStringArray(tag, field_name, result.params_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasCmd {
      get { return result.hasCmd; }
    }
    public int Cmd {
      get { return result.Cmd; }
      set { SetCmd(value); }
    }
    public Builder SetCmd(int value) {
      PrepareBuilder();
      result.hasCmd = true;
      result.cmd_ = value;
      return this;
    }
    public Builder ClearCmd() {
      PrepareBuilder();
      result.hasCmd = false;
      result.cmd_ = 0;
      return this;
    }
    
    public pbc::IPopsicleList<string> ParamsList {
      get { return PrepareBuilder().params_; }
    }
    public int ParamsCount {
      get { return result.ParamsCount; }
    }
    public string GetParams(int index) {
      return result.GetParams(index);
    }
    public Builder SetParams(int index, string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.params_[index] = value;
      return this;
    }
    public Builder AddParams(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.params_.Add(value);
      return this;
    }
    public Builder AddRangeParams(scg::IEnumerable<string> values) {
      PrepareBuilder();
      result.params_.Add(values);
      return this;
    }
    public Builder ClearParams() {
      PrepareBuilder();
      result.params_.Clear();
      return this;
    }
  }
  static SCSysMessage() {
    object.ReferenceEquals(global::ClientProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSCommand : pb::GeneratedMessage<CSCommand, CSCommand.Builder> {
  private CSCommand() { }
  private static readonly CSCommand defaultInstance = new CSCommand().MakeReadOnly();
  private static readonly string[] _cSCommandFieldNames = new string[] { "cmd", "params" };
  private static readonly uint[] _cSCommandFieldTags = new uint[] { 8, 18 };
  public static CSCommand DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSCommand DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSCommand ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::ClientProtocol.internal__static_CSCommand__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSCommand, CSCommand.Builder> InternalFieldAccessors {
    get { return global::ClientProtocol.internal__static_CSCommand__FieldAccessorTable; }
  }
  
  public const int CmdFieldNumber = 1;
  private bool hasCmd;
  private int cmd_;
  public bool HasCmd {
    get { return hasCmd; }
  }
  public int Cmd {
    get { return cmd_; }
  }
  
  public const int ParamsFieldNumber = 2;
  private pbc::PopsicleList<string> params_ = new pbc::PopsicleList<string>();
  public scg::IList<string> ParamsList {
    get { return pbc::Lists.AsReadOnly(params_); }
  }
  public int ParamsCount {
    get { return params_.Count; }
  }
  public string GetParams(int index) {
    return params_[index];
  }
  
  public override bool IsInitialized {
    get {
      if (!hasCmd) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSCommandFieldNames;
    if (hasCmd) {
      output.WriteInt32(1, field_names[0], Cmd);
    }
    if (params_.Count > 0) {
      output.WriteStringArray(2, field_names[1], params_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasCmd) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Cmd);
    }
    {
      int dataSize = 0;
      foreach (string element in ParamsList) {
        dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
      }
      size += dataSize;
      size += 1 * params_.Count;
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSCommand ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSCommand ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSCommand ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSCommand ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSCommand ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSCommand ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSCommand ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSCommand ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSCommand ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSCommand ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSCommand MakeReadOnly() {
    params_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSCommand prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSCommand, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSCommand cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSCommand result;
    
    private CSCommand PrepareBuilder() {
      if (resultIsReadOnly) {
        CSCommand original = result;
        result = new CSCommand();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSCommand MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSCommand.Descriptor; }
    }
    
    public override CSCommand DefaultInstanceForType {
      get { return global::CSCommand.DefaultInstance; }
    }
    
    public override CSCommand BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSCommand) {
        return MergeFrom((CSCommand) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSCommand other) {
      if (other == global::CSCommand.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasCmd) {
        Cmd = other.Cmd;
      }
      if (other.params_.Count != 0) {
        result.params_.Add(other.params_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSCommandFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSCommandFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasCmd = input.ReadInt32(ref result.cmd_);
            break;
          }
          case 18: {
            input.ReadStringArray(tag, field_name, result.params_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasCmd {
      get { return result.hasCmd; }
    }
    public int Cmd {
      get { return result.Cmd; }
      set { SetCmd(value); }
    }
    public Builder SetCmd(int value) {
      PrepareBuilder();
      result.hasCmd = true;
      result.cmd_ = value;
      return this;
    }
    public Builder ClearCmd() {
      PrepareBuilder();
      result.hasCmd = false;
      result.cmd_ = 0;
      return this;
    }
    
    public pbc::IPopsicleList<string> ParamsList {
      get { return PrepareBuilder().params_; }
    }
    public int ParamsCount {
      get { return result.ParamsCount; }
    }
    public string GetParams(int index) {
      return result.GetParams(index);
    }
    public Builder SetParams(int index, string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.params_[index] = value;
      return this;
    }
    public Builder AddParams(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.params_.Add(value);
      return this;
    }
    public Builder AddRangeParams(scg::IEnumerable<string> values) {
      PrepareBuilder();
      result.params_.Add(values);
      return this;
    }
    public Builder ClearParams() {
      PrepareBuilder();
      result.params_.Clear();
      return this;
    }
  }
  static CSCommand() {
    object.ReferenceEquals(global::ClientProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSEvaluate : pb::GeneratedMessage<CSEvaluate, CSEvaluate.Builder> {
  private CSEvaluate() { }
  private static readonly CSEvaluate defaultInstance = new CSEvaluate().MakeReadOnly();
  private static readonly string[] _cSEvaluateFieldNames = new string[] { "devStar", "envStar", "eval", "staffStar" };
  private static readonly uint[] _cSEvaluateFieldTags = new uint[] { 24, 16, 34, 8 };
  public static CSEvaluate DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSEvaluate DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSEvaluate ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::ClientProtocol.internal__static_CSEvaluate__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSEvaluate, CSEvaluate.Builder> InternalFieldAccessors {
    get { return global::ClientProtocol.internal__static_CSEvaluate__FieldAccessorTable; }
  }
  
  public const int StaffStarFieldNumber = 1;
  private bool hasStaffStar;
  private int staffStar_;
  public bool HasStaffStar {
    get { return hasStaffStar; }
  }
  public int StaffStar {
    get { return staffStar_; }
  }
  
  public const int EnvStarFieldNumber = 2;
  private bool hasEnvStar;
  private int envStar_;
  public bool HasEnvStar {
    get { return hasEnvStar; }
  }
  public int EnvStar {
    get { return envStar_; }
  }
  
  public const int DevStarFieldNumber = 3;
  private bool hasDevStar;
  private int devStar_;
  public bool HasDevStar {
    get { return hasDevStar; }
  }
  public int DevStar {
    get { return devStar_; }
  }
  
  public const int EvalFieldNumber = 4;
  private bool hasEval;
  private string eval_ = "";
  public bool HasEval {
    get { return hasEval; }
  }
  public string Eval {
    get { return eval_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasStaffStar) return false;
      if (!hasEnvStar) return false;
      if (!hasDevStar) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSEvaluateFieldNames;
    if (hasStaffStar) {
      output.WriteInt32(1, field_names[3], StaffStar);
    }
    if (hasEnvStar) {
      output.WriteInt32(2, field_names[1], EnvStar);
    }
    if (hasDevStar) {
      output.WriteInt32(3, field_names[0], DevStar);
    }
    if (hasEval) {
      output.WriteString(4, field_names[2], Eval);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasStaffStar) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, StaffStar);
    }
    if (hasEnvStar) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, EnvStar);
    }
    if (hasDevStar) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, DevStar);
    }
    if (hasEval) {
      size += pb::CodedOutputStream.ComputeStringSize(4, Eval);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSEvaluate ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSEvaluate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSEvaluate ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSEvaluate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSEvaluate ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSEvaluate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSEvaluate ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSEvaluate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSEvaluate ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSEvaluate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSEvaluate MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSEvaluate prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSEvaluate, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSEvaluate cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSEvaluate result;
    
    private CSEvaluate PrepareBuilder() {
      if (resultIsReadOnly) {
        CSEvaluate original = result;
        result = new CSEvaluate();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSEvaluate MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSEvaluate.Descriptor; }
    }
    
    public override CSEvaluate DefaultInstanceForType {
      get { return global::CSEvaluate.DefaultInstance; }
    }
    
    public override CSEvaluate BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSEvaluate) {
        return MergeFrom((CSEvaluate) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSEvaluate other) {
      if (other == global::CSEvaluate.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasStaffStar) {
        StaffStar = other.StaffStar;
      }
      if (other.HasEnvStar) {
        EnvStar = other.EnvStar;
      }
      if (other.HasDevStar) {
        DevStar = other.DevStar;
      }
      if (other.HasEval) {
        Eval = other.Eval;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSEvaluateFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSEvaluateFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasStaffStar = input.ReadInt32(ref result.staffStar_);
            break;
          }
          case 16: {
            result.hasEnvStar = input.ReadInt32(ref result.envStar_);
            break;
          }
          case 24: {
            result.hasDevStar = input.ReadInt32(ref result.devStar_);
            break;
          }
          case 34: {
            result.hasEval = input.ReadString(ref result.eval_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasStaffStar {
      get { return result.hasStaffStar; }
    }
    public int StaffStar {
      get { return result.StaffStar; }
      set { SetStaffStar(value); }
    }
    public Builder SetStaffStar(int value) {
      PrepareBuilder();
      result.hasStaffStar = true;
      result.staffStar_ = value;
      return this;
    }
    public Builder ClearStaffStar() {
      PrepareBuilder();
      result.hasStaffStar = false;
      result.staffStar_ = 0;
      return this;
    }
    
    public bool HasEnvStar {
      get { return result.hasEnvStar; }
    }
    public int EnvStar {
      get { return result.EnvStar; }
      set { SetEnvStar(value); }
    }
    public Builder SetEnvStar(int value) {
      PrepareBuilder();
      result.hasEnvStar = true;
      result.envStar_ = value;
      return this;
    }
    public Builder ClearEnvStar() {
      PrepareBuilder();
      result.hasEnvStar = false;
      result.envStar_ = 0;
      return this;
    }
    
    public bool HasDevStar {
      get { return result.hasDevStar; }
    }
    public int DevStar {
      get { return result.DevStar; }
      set { SetDevStar(value); }
    }
    public Builder SetDevStar(int value) {
      PrepareBuilder();
      result.hasDevStar = true;
      result.devStar_ = value;
      return this;
    }
    public Builder ClearDevStar() {
      PrepareBuilder();
      result.hasDevStar = false;
      result.devStar_ = 0;
      return this;
    }
    
    public bool HasEval {
      get { return result.hasEval; }
    }
    public string Eval {
      get { return result.Eval; }
      set { SetEval(value); }
    }
    public Builder SetEval(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasEval = true;
      result.eval_ = value;
      return this;
    }
    public Builder ClearEval() {
      PrepareBuilder();
      result.hasEval = false;
      result.eval_ = "";
      return this;
    }
  }
  static CSEvaluate() {
    object.ReferenceEquals(global::ClientProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCEvaluate : pb::GeneratedMessage<SCEvaluate, SCEvaluate.Builder> {
  private SCEvaluate() { }
  private static readonly SCEvaluate defaultInstance = new SCEvaluate().MakeReadOnly();
  private static readonly string[] _sCEvaluateFieldNames = new string[] { "integal" };
  private static readonly uint[] _sCEvaluateFieldTags = new uint[] { 8 };
  public static SCEvaluate DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCEvaluate DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCEvaluate ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::ClientProtocol.internal__static_SCEvaluate__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCEvaluate, SCEvaluate.Builder> InternalFieldAccessors {
    get { return global::ClientProtocol.internal__static_SCEvaluate__FieldAccessorTable; }
  }
  
  public const int IntegalFieldNumber = 1;
  private bool hasIntegal;
  private int integal_;
  public bool HasIntegal {
    get { return hasIntegal; }
  }
  public int Integal {
    get { return integal_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasIntegal) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCEvaluateFieldNames;
    if (hasIntegal) {
      output.WriteInt32(1, field_names[0], Integal);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasIntegal) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Integal);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCEvaluate ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCEvaluate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCEvaluate ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCEvaluate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCEvaluate ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCEvaluate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCEvaluate ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCEvaluate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCEvaluate ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCEvaluate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCEvaluate MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCEvaluate prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCEvaluate, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCEvaluate cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCEvaluate result;
    
    private SCEvaluate PrepareBuilder() {
      if (resultIsReadOnly) {
        SCEvaluate original = result;
        result = new SCEvaluate();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCEvaluate MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCEvaluate.Descriptor; }
    }
    
    public override SCEvaluate DefaultInstanceForType {
      get { return global::SCEvaluate.DefaultInstance; }
    }
    
    public override SCEvaluate BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCEvaluate) {
        return MergeFrom((SCEvaluate) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCEvaluate other) {
      if (other == global::SCEvaluate.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasIntegal) {
        Integal = other.Integal;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCEvaluateFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCEvaluateFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasIntegal = input.ReadInt32(ref result.integal_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasIntegal {
      get { return result.hasIntegal; }
    }
    public int Integal {
      get { return result.Integal; }
      set { SetIntegal(value); }
    }
    public Builder SetIntegal(int value) {
      PrepareBuilder();
      result.hasIntegal = true;
      result.integal_ = value;
      return this;
    }
    public Builder ClearIntegal() {
      PrepareBuilder();
      result.hasIntegal = false;
      result.integal_ = 0;
      return this;
    }
  }
  static SCEvaluate() {
    object.ReferenceEquals(global::ClientProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSVerifyCode : pb::GeneratedMessage<CSVerifyCode, CSVerifyCode.Builder> {
  private CSVerifyCode() { }
  private static readonly CSVerifyCode defaultInstance = new CSVerifyCode().MakeReadOnly();
  private static readonly string[] _cSVerifyCodeFieldNames = new string[] { "phonenumber" };
  private static readonly uint[] _cSVerifyCodeFieldTags = new uint[] { 10 };
  public static CSVerifyCode DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSVerifyCode DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSVerifyCode ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::ClientProtocol.internal__static_CSVerifyCode__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSVerifyCode, CSVerifyCode.Builder> InternalFieldAccessors {
    get { return global::ClientProtocol.internal__static_CSVerifyCode__FieldAccessorTable; }
  }
  
  public const int PhonenumberFieldNumber = 1;
  private bool hasPhonenumber;
  private string phonenumber_ = "";
  public bool HasPhonenumber {
    get { return hasPhonenumber; }
  }
  public string Phonenumber {
    get { return phonenumber_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasPhonenumber) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSVerifyCodeFieldNames;
    if (hasPhonenumber) {
      output.WriteString(1, field_names[0], Phonenumber);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPhonenumber) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Phonenumber);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSVerifyCode ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSVerifyCode ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSVerifyCode ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSVerifyCode ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSVerifyCode ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSVerifyCode ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSVerifyCode ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSVerifyCode ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSVerifyCode ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSVerifyCode ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSVerifyCode MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSVerifyCode prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSVerifyCode, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSVerifyCode cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSVerifyCode result;
    
    private CSVerifyCode PrepareBuilder() {
      if (resultIsReadOnly) {
        CSVerifyCode original = result;
        result = new CSVerifyCode();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSVerifyCode MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSVerifyCode.Descriptor; }
    }
    
    public override CSVerifyCode DefaultInstanceForType {
      get { return global::CSVerifyCode.DefaultInstance; }
    }
    
    public override CSVerifyCode BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSVerifyCode) {
        return MergeFrom((CSVerifyCode) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSVerifyCode other) {
      if (other == global::CSVerifyCode.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPhonenumber) {
        Phonenumber = other.Phonenumber;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSVerifyCodeFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSVerifyCodeFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasPhonenumber = input.ReadString(ref result.phonenumber_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPhonenumber {
      get { return result.hasPhonenumber; }
    }
    public string Phonenumber {
      get { return result.Phonenumber; }
      set { SetPhonenumber(value); }
    }
    public Builder SetPhonenumber(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPhonenumber = true;
      result.phonenumber_ = value;
      return this;
    }
    public Builder ClearPhonenumber() {
      PrepareBuilder();
      result.hasPhonenumber = false;
      result.phonenumber_ = "";
      return this;
    }
  }
  static CSVerifyCode() {
    object.ReferenceEquals(global::ClientProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCVerifyCode : pb::GeneratedMessage<SCVerifyCode, SCVerifyCode.Builder> {
  private SCVerifyCode() { }
  private static readonly SCVerifyCode defaultInstance = new SCVerifyCode().MakeReadOnly();
  private static readonly string[] _sCVerifyCodeFieldNames = new string[] { "verifycode" };
  private static readonly uint[] _sCVerifyCodeFieldTags = new uint[] { 10 };
  public static SCVerifyCode DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCVerifyCode DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCVerifyCode ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::ClientProtocol.internal__static_SCVerifyCode__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCVerifyCode, SCVerifyCode.Builder> InternalFieldAccessors {
    get { return global::ClientProtocol.internal__static_SCVerifyCode__FieldAccessorTable; }
  }
  
  public const int VerifycodeFieldNumber = 1;
  private bool hasVerifycode;
  private string verifycode_ = "";
  public bool HasVerifycode {
    get { return hasVerifycode; }
  }
  public string Verifycode {
    get { return verifycode_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasVerifycode) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCVerifyCodeFieldNames;
    if (hasVerifycode) {
      output.WriteString(1, field_names[0], Verifycode);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasVerifycode) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Verifycode);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCVerifyCode ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCVerifyCode ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCVerifyCode ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCVerifyCode ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCVerifyCode ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCVerifyCode ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCVerifyCode ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCVerifyCode ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCVerifyCode ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCVerifyCode ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCVerifyCode MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCVerifyCode prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCVerifyCode, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCVerifyCode cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCVerifyCode result;
    
    private SCVerifyCode PrepareBuilder() {
      if (resultIsReadOnly) {
        SCVerifyCode original = result;
        result = new SCVerifyCode();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCVerifyCode MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCVerifyCode.Descriptor; }
    }
    
    public override SCVerifyCode DefaultInstanceForType {
      get { return global::SCVerifyCode.DefaultInstance; }
    }
    
    public override SCVerifyCode BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCVerifyCode) {
        return MergeFrom((SCVerifyCode) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCVerifyCode other) {
      if (other == global::SCVerifyCode.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasVerifycode) {
        Verifycode = other.Verifycode;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCVerifyCodeFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCVerifyCodeFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasVerifycode = input.ReadString(ref result.verifycode_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasVerifycode {
      get { return result.hasVerifycode; }
    }
    public string Verifycode {
      get { return result.Verifycode; }
      set { SetVerifycode(value); }
    }
    public Builder SetVerifycode(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasVerifycode = true;
      result.verifycode_ = value;
      return this;
    }
    public Builder ClearVerifycode() {
      PrepareBuilder();
      result.hasVerifycode = false;
      result.verifycode_ = "";
      return this;
    }
  }
  static SCVerifyCode() {
    object.ReferenceEquals(global::ClientProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSBindMobile : pb::GeneratedMessage<CSBindMobile, CSBindMobile.Builder> {
  private CSBindMobile() { }
  private static readonly CSBindMobile defaultInstance = new CSBindMobile().MakeReadOnly();
  private static readonly string[] _cSBindMobileFieldNames = new string[] { "phonenumber", "verifycode" };
  private static readonly uint[] _cSBindMobileFieldTags = new uint[] { 10, 18 };
  public static CSBindMobile DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSBindMobile DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSBindMobile ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::ClientProtocol.internal__static_CSBindMobile__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSBindMobile, CSBindMobile.Builder> InternalFieldAccessors {
    get { return global::ClientProtocol.internal__static_CSBindMobile__FieldAccessorTable; }
  }
  
  public const int PhonenumberFieldNumber = 1;
  private bool hasPhonenumber;
  private string phonenumber_ = "";
  public bool HasPhonenumber {
    get { return hasPhonenumber; }
  }
  public string Phonenumber {
    get { return phonenumber_; }
  }
  
  public const int VerifycodeFieldNumber = 2;
  private bool hasVerifycode;
  private string verifycode_ = "";
  public bool HasVerifycode {
    get { return hasVerifycode; }
  }
  public string Verifycode {
    get { return verifycode_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasPhonenumber) return false;
      if (!hasVerifycode) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSBindMobileFieldNames;
    if (hasPhonenumber) {
      output.WriteString(1, field_names[0], Phonenumber);
    }
    if (hasVerifycode) {
      output.WriteString(2, field_names[1], Verifycode);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPhonenumber) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Phonenumber);
    }
    if (hasVerifycode) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Verifycode);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSBindMobile ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSBindMobile ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSBindMobile ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSBindMobile ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSBindMobile ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSBindMobile ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSBindMobile ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSBindMobile ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSBindMobile ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSBindMobile ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSBindMobile MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSBindMobile prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSBindMobile, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSBindMobile cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSBindMobile result;
    
    private CSBindMobile PrepareBuilder() {
      if (resultIsReadOnly) {
        CSBindMobile original = result;
        result = new CSBindMobile();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSBindMobile MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSBindMobile.Descriptor; }
    }
    
    public override CSBindMobile DefaultInstanceForType {
      get { return global::CSBindMobile.DefaultInstance; }
    }
    
    public override CSBindMobile BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSBindMobile) {
        return MergeFrom((CSBindMobile) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSBindMobile other) {
      if (other == global::CSBindMobile.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPhonenumber) {
        Phonenumber = other.Phonenumber;
      }
      if (other.HasVerifycode) {
        Verifycode = other.Verifycode;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSBindMobileFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSBindMobileFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasPhonenumber = input.ReadString(ref result.phonenumber_);
            break;
          }
          case 18: {
            result.hasVerifycode = input.ReadString(ref result.verifycode_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPhonenumber {
      get { return result.hasPhonenumber; }
    }
    public string Phonenumber {
      get { return result.Phonenumber; }
      set { SetPhonenumber(value); }
    }
    public Builder SetPhonenumber(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPhonenumber = true;
      result.phonenumber_ = value;
      return this;
    }
    public Builder ClearPhonenumber() {
      PrepareBuilder();
      result.hasPhonenumber = false;
      result.phonenumber_ = "";
      return this;
    }
    
    public bool HasVerifycode {
      get { return result.hasVerifycode; }
    }
    public string Verifycode {
      get { return result.Verifycode; }
      set { SetVerifycode(value); }
    }
    public Builder SetVerifycode(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasVerifycode = true;
      result.verifycode_ = value;
      return this;
    }
    public Builder ClearVerifycode() {
      PrepareBuilder();
      result.hasVerifycode = false;
      result.verifycode_ = "";
      return this;
    }
  }
  static CSBindMobile() {
    object.ReferenceEquals(global::ClientProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCBindMobile : pb::GeneratedMessage<SCBindMobile, SCBindMobile.Builder> {
  private SCBindMobile() { }
  private static readonly SCBindMobile defaultInstance = new SCBindMobile().MakeReadOnly();
  private static readonly string[] _sCBindMobileFieldNames = new string[] { "integal" };
  private static readonly uint[] _sCBindMobileFieldTags = new uint[] { 8 };
  public static SCBindMobile DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCBindMobile DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCBindMobile ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::ClientProtocol.internal__static_SCBindMobile__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCBindMobile, SCBindMobile.Builder> InternalFieldAccessors {
    get { return global::ClientProtocol.internal__static_SCBindMobile__FieldAccessorTable; }
  }
  
  public const int IntegalFieldNumber = 1;
  private bool hasIntegal;
  private int integal_;
  public bool HasIntegal {
    get { return hasIntegal; }
  }
  public int Integal {
    get { return integal_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasIntegal) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCBindMobileFieldNames;
    if (hasIntegal) {
      output.WriteInt32(1, field_names[0], Integal);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasIntegal) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Integal);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCBindMobile ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCBindMobile ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCBindMobile ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCBindMobile ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCBindMobile ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCBindMobile ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCBindMobile ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCBindMobile ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCBindMobile ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCBindMobile ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCBindMobile MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCBindMobile prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCBindMobile, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCBindMobile cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCBindMobile result;
    
    private SCBindMobile PrepareBuilder() {
      if (resultIsReadOnly) {
        SCBindMobile original = result;
        result = new SCBindMobile();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCBindMobile MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCBindMobile.Descriptor; }
    }
    
    public override SCBindMobile DefaultInstanceForType {
      get { return global::SCBindMobile.DefaultInstance; }
    }
    
    public override SCBindMobile BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCBindMobile) {
        return MergeFrom((SCBindMobile) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCBindMobile other) {
      if (other == global::SCBindMobile.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasIntegal) {
        Integal = other.Integal;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCBindMobileFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCBindMobileFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasIntegal = input.ReadInt32(ref result.integal_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasIntegal {
      get { return result.hasIntegal; }
    }
    public int Integal {
      get { return result.Integal; }
      set { SetIntegal(value); }
    }
    public Builder SetIntegal(int value) {
      PrepareBuilder();
      result.hasIntegal = true;
      result.integal_ = value;
      return this;
    }
    public Builder ClearIntegal() {
      PrepareBuilder();
      result.hasIntegal = false;
      result.integal_ = 0;
      return this;
    }
  }
  static SCBindMobile() {
    object.ReferenceEquals(global::ClientProtocol.Descriptor, null);
  }
}

#endregion


#endregion Designer generated code
